%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1504.m00.i125.n046.S.c10.224868973 Silhouettes of naval ships.eps
%%Creator: Adobe Illustrator(R) 17.0
%%For: Антон
%%CreationDate: 4/23/2015
%%BoundingBox: 0 0 600 400
%%HiResBoundingBox: 0 0 600 400
%%CropBox: 0 0 600 400
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 17.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 17.0.0 x256 R agm 4.7700 ct 5.3328%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.5-c014 79.151739, 2013/04/03-12:12:15        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">shablon 600x400</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2015-04-23T20:14:51+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2015-04-23T20:14:51+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2015-04-23T20:14:51+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>172</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgArAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXdMVd1xVg1v51HmHX7aw0w3tjDbXMi3MzRKqTQmGQQyxl0kDI8qEL8vlirOcVdirsVd&#xA;irsVdirsVdirsVdirsVdiriQASTQDqcVYfB+a/kqe21WdL5VGk8/VSQrG0pjDGkAZv3teO3HxHji&#xA;qlbfm95Kmi0h2ujG+sD92h4n0GqAVuGDER09/nirNFZXUMpDKwqrDcEHoQcVbxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxVjXnrXbPTdPt4pruO2kuriNAHkVCYw3Jz8RB47UPzxVierfmf5XttBfSry8m&#xA;keeGb/SrA28zInqyqq0csoPCIdVOxGKsS/JDzLotlq9+JbsRoNMe4vZZF4its6sTXqxCSNsB0WuK&#xA;vTdL/Njyfqmj6tqtlNI1toyK92JEMZPqcvTC86KS7IVG/XrTFU+8t+YLHzBotrq1kf3Nygf0yyM8&#xA;bEA8H4FgGFdxXFUzxV2KuxV2KuxV2KuxV2KuxVhH5k/mjpvkqKKGS3kutSu4nktIl4+mChABmJYM&#xA;qknbip6HFWGeYv8AnIry9daFdW2k2l/BqNxH6Uc0iwosYchXdWWVzyVSSnw9aYqwv8tNR8lsmqvr&#xA;wgimlnE0ETafb3YVDUkKXibgAduK0HtiqYea9Q/L++Syt9Da1+sSmYlpLC101Apt5OLGZ4EU/HSn&#xA;vSlDvir1P8o/Ocuu6F+j9Rmjk1vSlSK7McscwljI/dzB4mdWJGzUP2hv1xVneKuxV2KuxV2KuxV2&#xA;KsG84fmpa+UNVS01vSboWdxvaahbGOWOQCnIEMYyrKTuu/jiq7TPzp/Le/oF1ZbaQ/sXMckVPm7L&#xA;w/4bFU8bzx5KRVZvMGmqriqE3kABHt8e+KqV5578qRaTf6hbapbX0enwme4SzmiuJFXoDxRj1Jpv&#xA;irzjRf8AnI3Tn1N7bV7TjZySKtte2wI4qTQtNHIxIp1+En6cVW/mZ+d9jHEdK8s3nNp4o3bV7b4m&#xA;ib1hzRVbgCfTU9+9PcKvL7rz4uqQQDzHb/p25tWdoZ7trhDxdADF+4uIlC8wDULX9WKoCHXfLPpl&#xA;ZvLtsG4IodZb1jVa8n/3pQVbao6eFO6q671zy3Ja3MNnpEdhNcUVbqFrpnjSsfNFWS6dGDAPXkD+&#xA;PwqpbBq11Zadd2NjeTJb6gIxfW/BVSQR1ZeR5MfhY7bYq9S/Kf8ANS7t9Q0Ty/d3FnYaHDbyreTz&#xA;8IeUimRkYytxAPHgvvTFXvkOraVPYrfw3sEtg/2LtJUaE702kB49duuKu0zUrTUrNby0bnbu0iK3&#xA;Spido2+jkhxVD+YtS1DTNIuL6xsG1Oe3XmbNHEbsg+1wJVqsBvx7/PFXlkf/ADkxoJIEujXSD9vj&#xA;JGxB9q8a4qqTf85JeV3t5BFY38NyN4SY4JEJHZx6yGh9sVRGif8AORnlS6tHfV7WfTbkPxWGOtyr&#xA;JT7QcLHTftTFUn07/nIWCDzRLaXI9fyr8Qt71o2+ur8AZeYB4uA9V+zWm5J3qqoeRvzs0bT9R8xz&#xA;a5d301te3huNLRx63CIlhwA+HgePEU6YqwK6/NvzofMt/r1heCynvf3fARQyBIFNY4/3iMPhFByp&#xA;U98VY/5i8za55j1D9Ia1dG7vAixCQqiURakKFjVFHU9sVSvFU4stB836jY+vY6dqF5YCq+rBDPLD&#xA;8HUclBXbFVGw8s+ZNRtWu9P0q8vLVSVa4t7eWWMFRUguikVAOKqvl7Xtf8u6j+kNGuxaXnFojIDE&#xA;4KNSqlX5IR06j37Yq9Q8j/nvfaXpOqL5kZ9VvfUNxYN6iDm0hIeElQ3poCOS0WgrTYUxV6l5S/ND&#xA;y5r3lsa1czRaVwZkube4mSsbJTox48lIIoeIxVMrLz55LvruK0s9bs57qZuEMKTIWZj2UV3OKp9i&#xA;rsVdirsVSXzj5T03zToNxpF+KLKOUEwFWilX7Ei/Lv4ioxV8nT6M/l7XrzT9cskupbQSwm3+sCJf&#xA;UZCIpaghyoqHA2riqTfVpPGP/kYn/NWKqsBvoBKIJ/SEyGKYJMq84yQSjUbdSQNjiql9Wk8Y/wDk&#xA;Yn/NWKti0lPRo/pljH62xVv6lN/NF/yNi/5qxV31Kb+aL/kbF/zVirvqU380X/I2L/mrFXfUpv5o&#xA;v+RsX/NWKu+pTfzRf8jYv+asVRkV5rsNg+nRag8enyNzks0ugsLPt8RjD8SdutMVfS35FC5H5c2Q&#xA;nk9Sks4iowcKgkPw1BI61xV6Bir56/5yB8paLo2oWet2UESSaq8ou7clxWRAp9VFVlHxcvj96Hvi&#xA;ryi0jmvJhBZ6cLmc7iKFZncgf5KuTiqYf4a8y/8AUt3X/SPd/wBcVd/hrzL/ANS3df8ASPd/1xV3&#xA;+GvMv/Ut3X/SPd/1xV3+GvMv/Ut3X/SPd/1xV3+GvMv/AFLd1/0j3f8AXFXf4a8y/wDUt3X/AEj3&#xA;f9cVRUGneeLeL0YNH1CGLf8Adxx3qrv12DUxV1tpnniCP0bbRdQijY/3ccV6qknbord8VR9v+Vn5&#xA;gzxiRPLDhT2kYxt/wLyqcVVR+Uf5ikgHy1QHuZRQfdNiqNtPyV88zXUEMulQQRzNxeZnlKxeDOA9&#xA;af6tcVZJ+VH5ZX0Hnu7n1K3iii8uT8VYCak8jBwjxFzTivEN08MVe+4q7FXYq7FXYqwnVvyb8g6t&#xA;qVzqV9ZSyXd3IZZ3+sTCrN1oOew8ANh2xVCf8qG/LT/q3y/9JE3/ADVirv8AlQ35af8AVvl/6SJv&#xA;+asVd/yob8tP+rfL/wBJE3/NWKu/5UN+Wn/Vvl/6SJv+asVd/wAqG/LT/q3y/wDSRN/zVirv+VDf&#xA;lp/1b5f+kib/AJqxV3/Khvy0/wCrfL/0kTf81Yq7/lQ35af9W+X/AKSJv+asVd/yob8tP+rfL/0k&#xA;Tf8ANWKptB+VvkSCFYodMC8EeKOQyzO6JIpRgru7EAqSKdMVTzQdE0/QtIttJ09SlnaKViVjyahY&#xA;sanvucVR+KoHVNB0PVvT/SunWt/6PL0frUMc3DlTlx9QNSvEVpiq/TtI0nTIjFp1lBZRHrHbxJEp&#xA;+hAoxVF4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FWP6z5xttL1/TdGe1klk1IkJcK8Kxpx3fkGcP8KfGfh6dKnbFWQdcVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiryf88fOl5pFsdLtL6bTri5t&#xA;TNbzQiSNnlS4i+FJo+n7sPXf59RirzbWPNeh3eueWrmXWXvzbwhNXvpbRCVf0UiPJXhrcCobeQMS&#xA;u3vir3n8vtV1PUdLvHvr6HUVtb2e0t7yFFX1Y4X4iRuB9M8v8gAYqyjFXYq7FXYq7FXYq7FXYq7F&#xA;XYqwj8wfzPs/JmpaTb3do81vfGRriZCKpGgp8C/tNyYdabfgqyby9rtjr2jWur2PMWl2peISAK9A&#xA;xU1ALd18cVTHFXYq7FXYq7FXYqote2aMVaeNWGxUuoIP34qkmqfmF5K0q8NnqGrwQXKgMyEk0DCo&#xA;qVBUVHTfFUbpXmfQtVt2ubG8jltw5RZSeCsQAapypyXfqNsVUtZ85+VtFER1PU4bf1iRHU8iaUqa&#xA;IGoBXriqXH80/IPBpRrETQoAWlUOy1JIC1CmrbE0HbFUXpfn3yjq1yLbTdTiupSrM3p14qEpUsxA&#xA;C/aFK9cVTK81vR7O1kurq9hit4V5SSM60AH04qkcP5o+Qp2CQaxFLKWC+kofmKuEqVKggAmrE9Bu&#xA;dsVWD81fy+aoj1mGSQAlYkEhdqCtEXjVq9qdcVXn80fy/WdoDrdv6qtx4/Fua0+E8aNvttirTfmn&#xA;5AjcRzazDBLQFo5Q6spIrxaq7MK/EvUd8VeXf85AKur6bpXmKwngm0ta24UhluA7Mx5gNT92wTwr&#xA;9+yrxHFXv3/ON9jp8Ojalq00wS5e4NoqvJRRGiRyEhDtUs/XFXsn1+x/5aYv+DX+uKpZ/jbyj9ba&#xA;zGr2puUUMYhKpahYrQU6tVTVRuO+KtQ+ePJ88s0UWs2bPAaSgTJQfDz5VrQrxO7DbFURpPmfy9rE&#xA;kkemajBdyxF1kjicMw9NuDHj1py6Hoe2KpnirsVdirsVYX54/M3yxoFjfWkmofV9ZEMi2sHpSGQS&#xA;lG9NuJWnHkBRjtiryLSPzZ866mWVNTgtpuR4pczwwJxCH/dkzRr9orTx/AqpN5oTzXr1skut6lo1&#xA;9cWkbCK5Gp2nrca8yFRJwhJ6fYxV7J+Qd4035fR2rEM2nXdxbEqQy7sJtmUkH++6jFUH/wA5Ba1r&#xA;Gk+WdOl0u+nsZZL0K8ltI8TMvpOeJZCDSvbFWUflh5lk8xeS9OvpY51ljjW2mnuKVnlhRUlmQgnk&#xA;rSchU9wcVZVirsVdirsVeBfnP+UV5HPqHm7SZPXgkY3Go2ZADxClXlQj7S92HUe/ZV4/Y31rbK4m&#xA;0+3vSxBDTtcKVp2Hoyw9feuKsm0Wy0XU7M3Mg8u6cwcp9XvZ9VSXYA8qRySLxNfHFUw/w7oP/Ld5&#xA;T/6StY/riqXXXknT5p3lj8zeX7ZGpSCKe9KLtTYyQyP97YqrWHlDSrbn62u+W77nTj69xqK8KVrx&#xA;9GOHrXetcVW32h6PZWBuReeXL1rZKtBBcao005pToSi8q77FR9GKsfbVNPYADRrJaNUkPd1IqTx3&#xA;uenb+OKuOq6eVcfoWyBf7JD3lUqAPhrc/T8VcVTDRI7rVL9xpXlyzumSKsluDcMgBYfGedxXl2+1&#xA;9GKp7/h7zT/1JVj903/ZVirv8Peaf+pKsfum/wCyrFV8X5eatqPKe70uLSXB4rbQwzSKQBXnUTt3&#xA;NMVREX5Y3kYIUIQd/is5HP3tKcVS+68ia5C91CmgG+5hhBeIwtwpZECkREn7DA9964qhZdIl0/U7&#xA;5r/ynOYbq2kWxtUd5BBK8gKS+ogPLgqleJ+eKphNdeXHWcR+Q7pDJFdJCec54PMUNu/2d/RCsPeu&#xA;Ko3yHoOrT/mVp+t6dolxpmi/XCVhJY+lHwIZSWo5Xfc0xV9M4q84/Mbz9578vySJpflhrixQqf0s&#xA;XM6GOnx/uohyiIPRnanscVYIn56/mW8v1qLQo5LGUVgT6vcMKUG4kUry+7FUDJ+cX5svHHG2mgiK&#xA;X1lc2k3IgMzKj8WVWVeQHSvwgk1qSqw7/DHnPzLf3uotaUuJZTLObqaK0+KVi1EF1JGWA/ya0xVO&#xA;/wAv/LnlSK41KLzxp98ShjWxNvHcOlQXEvxW4Ib9nia0xVKdY8ny6h5ovYPK9jMmkg8rM3pFqOAC&#xA;1/eXRiFeRNATWmKo7RNY/NHyRJLp2mK8UTSLPPFFFDeQu3Ef7tQSjdRQ8H/HFV+q+cvPmtWMdlrm&#xA;kHVIIpPWjFxBdAq/KRq1ieM9JStOnEDwxV7H+Q2oSSeSRpdzH9Xu9NnlU2zKySCKZzMjMrb0LO4B&#xA;9sVekYq7FXYq7FXjf5xv+a8mti18vw3Umgy2oRktIxIrs1RKJaBm3BAodqdO+KvHv+Vbef8A/qX7&#xA;/wD5EP8A0xV3/KtvP/8A1L9//wAiH/pirv8AlW3n/wD6l+//AORD/wBMVd/yrbz/AP8AUv3/APyI&#xA;f+mKu/5Vt5//AOpfv/8AkQ/9MVd/yrbz/wD9S/f/APIh/wCmKu/5Vt5//wCpfv8A/kQ/9MVd/wAq&#xA;28//APUv3/8AyIf+mKu/5Vt5/wD+pfv/APkQ/wDTFXf8q28//wDUv3//ACIf+mKu/wCVbef/APqX&#xA;7/8A5EP/AExV3/KtvP8A/wBS/f8A/Ih/6Yq7/lW3n/8A6l+//wCRD/0xV3/KtvP/AP1L9/8A8iH/&#xA;AKYqmvlz8m/PWsaktpNp8ulwU5S3l4jRoqj+UUqzeAH4YqzT/oWO+/6v8X/SM3/VTFUw/K78l/MW&#xA;g+Yo9a1eS2QWcjpHbcROZFKELKj1Hpnkajavjir2zFWBfnT5b8xeYPJ4s9CrJNHcJNcWisEM0Sqw&#xA;KgkgGjENxPWnjTFXg3/KtvzKcgz+X559yzGRF5MT/M6ssh/4LFWx+V3nhmLSeWbwVOyxMFUD/Z+q&#xA;fxxVVl/Lj8wZLSOzHl+9S3jcutRC7Cta7hY2br3bFVH/AJVN53/6s1//AMiY/wDqrirv+VTed/8A&#xA;qzX/APyJj/6q4q7/AJVN53/6s1//AMiY/wDqriraflR54R1ddHvuSkEfuIzuPYy4qzb8sfKn5i6V&#xA;54tb+WxuILWVBBqLTRxW8Jt0QKKhGarLxXjRak9T1OKvf8VdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdiqhNfW0N1b2kjET3XP0FCsQfTALVYAqtAe5xVXxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVC3Oq6Za3dvZ&#xA;3F1FFd3bFbaBmAdyAW+Fev7JxVvT76O9tkuI1Kq6owDUrR41kHT2fFXlf5leZfMmj+brPVtJkS6s&#xA;bAPDLbuD6SzGF2kRvjTkwj+NuNONFr3xVmPkfz8nmiS6gGmXllJYhBNNcxrHGznqqUdzXvTw74qy&#xA;tWVhVSCD0I3GKt4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqldl5n0K8eaOK8iEkEz27I8iAl&#xA;068Ry3GKqeieb/L2uSFNLu1uaQxXAYAqCkzSKtAwU1rA1RTbFU4xV2KuxV2KuxV2KuxV2KuxVgv5&#xA;necbzRW0vTNGt2u/MWoyk2EIbglIxRue6qwblTiduvQgHFXi99+Y0+p+dG1rUoJLK/s7a4iWCGY+&#xA;n6kNvMFWrH4KyEbL1Pviqp+V/n/UdP1DVJL2/kMC6Y3prNMWAaExj90jsFMhRTTv86UKqdeZfPnl&#xA;7XNB07QrOCeDUbQtNqKMA6GUxn1ysqOS/wC8Ynlx9/h+0qqf63+Zlz5W8s6RZ6U0F/r+qwrdTTST&#xA;LJHCOEbKsgMhNTCQF+Om1RXFUg/LX83tVsrvTNI1SWF7CV1tZZXoHQvNKfUBV+P2plDHjTiv0lV9&#xA;CYq7FXYq7FXYq7FXYq7FXYqkHmDz95R8v3SWmragsN3IvNbdElnk4/zFIVkZR7kYqlMn5zflvEvK&#xA;TVXRenJrO8Ar9MOKqX/K8Pyu/wCr1/063f8A1RxV3/K8Pyu/6vX/AE63f/VHFXf8rw/K7/q9f9Ot&#xA;3/1RxVA65+dv5cSaNfR2uqtPcyQSJDClvcIzOylVAaSNEG56lhir5mOn3w/495PEEIxBB7jbFUdo&#xA;Muo6VrdhqaW84ayuIp/gRgxEbhiB06gUxV9K2356flvJEDcahJZTft209vMZEPgxiWVK/wCyxVNb&#xA;P80/y8uzSLX7Rf8AjM/o/wDJ0Jiqe2us6RdwNPaXsFzCil2khkSRQo6mqE4q8l8g/nfr3mbz1baJ&#xA;NY2sOm3hn9JkEnrqscTypyYuUb7FD8IxV7HOJjDIICqzlT6TOCyB6fCWAKkivXfFXiWufnz5u8va&#xA;xNpWseX7eO5tzR1WWQB1I+F0Yhqq3UYqhh/zk5dcGB8vIZP2WF0QB8x6W/34qu0//nJSeTWbYX2m&#xA;x2+jFW+t+nzluA3E8fTJZEpyp1HTwxVk/wD0MV5A/wB93/8AyJT/AKqYq8q/Nj8xbLzJ5k07VvL8&#xA;t1amxt/TWVv3MqSeozckKMSNiN64q89kkkkkaSRi8jks7sakk7kknqTirSsVYMNiDUH5YqiYNRnj&#xA;vPrLkuXIE6ii80qKqdiO3hiqLvdS0u9uI5JLaaMheMkjTGdiqR8IlAIioF4gdemKrVutOjUei8qL&#xA;6scpiMKNUxcuJ9Qycx9s/CNj36DFXqV//wA5H60xVrKziX4aOjpQct9wechP4Yqpad/zkf5gW8tz&#xA;qFnE1oHX6yIRRyn7XANtXwqcVTPzN/zkak9gB5ct5rS+DAlruKOVGXuKrL8J/wBif44qnvl7/nIL&#xA;yw+jxSa48iagJBFKIYOINQSZAgkmoi9D8VSei+CrJtG/N3yXrOuQaNp9xJNc3MkkcL8OMbekgk5V&#xA;JDUYEhduoOKszxV2KuxV2Kvkj81rHW9N/MHWJb71Ue6uJJ7SfcB7dz+74MOoVKL9FMVYm15dOKPK&#xA;0g/lc8x9zVGKrTO5BFE3/wAhB2p4Yq3bziF+RiSZSCCkgJG4p2Kn8cVVpL+N4yn1OBainJQ4IPGl&#xA;R8X0+FcVahvY44wn1SCQ93cOWO4P8w8Kf24q1LeJJIGNtCqgMPTUMoJYk1NG5fDXbemw96qrWuIS&#xA;pAtYgSCAQZaiopUVf6cVctxCECm1iYgU5ky1PTfZwPwxVWtklurmttpwn/5d4xM43Jb9ly/Tbr09&#xA;98VZDp35fee78AWfli4jZgFWeRJrfsQWDTOib1+X44qhzF5p/LvzbDJJGlvrFknqRhuMqcZ4ih6H&#xA;i3wuR88VfVPky91TUPK+majqc0U11fW0N0TDEYlUTRq/EgvJUry+0KV8BirGfzo8r6TqXlK61ae2&#xA;hk1DSYjNbyyl1qgILxkxtGxqPsiv2sVfMv6Rs/8Aq12v/BXP/VbFUZHbXssayR+XA8bCquqXpBB7&#xA;giXFV31LUf8AqWv+Sd7/ANVcVd9S1H/qWv8Akne/9VcVd9S1H/qWv+Sd7/1VxV31LUf+pa/5J3v/&#xA;AFVxV31LUf8AqWv+Sd7/ANVcVd9S1H/qWv8Akne/9VcVd9S1H/qWv+Sd7/1VxVtNP1N2CJ5YLOxo&#xA;qiK+JJ9gJcVTmH8v/O80YkTyYwU9A63SN9KvOpGKqqflx54ZgD5PCA/tN9ZoPunJxVFp+Vfm9vTr&#xA;5et15sA1RqHwA/tNRjsPauKsl8g+RtQ0P827XTruwta2Nu9695bG6ZCrxGNeBlelQ8gG64q99xV2&#xA;KuxV2KqVzZ2l0gS6gjnQGoWVVcA+NGBxVDfoDQv+rda/8iY/+acVd+gNC/6t1r/yJj/5pxV36A0L&#xA;/q3Wv/ImP/mnFXfoDQv+rda/8iY/+acVd+gNC/6t1r/yJj/5pxV36A0L/q3Wv/ImP/mnFXfoDQv+&#xA;rda/8iY/+acVbXQ9FRgy6fbKw3DCGMEH7sVRiIiKFRQqjooFAMVbxVTltbaVuUsSSMBQFlBNPpxV&#xA;eqqqhVACgUAGwAGKofUtM0/U7GWw1C3S6s5wBLBKOStQhhUexAOKpRp35feSNNmE1nolnHMpqspi&#xA;V2U/5LPyI+jFWQYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq//9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:968394c5-4d2d-c04a-bc99-b72513a46fba</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:968394c5-4d2d-c04a-bc99-b72513a46fba</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:4aa9ba63-3076-8c4e-b5e5-d68c460ffcea</stRef:instanceID>
            <stRef:documentID>xmp.did:4aa9ba63-3076-8c4e-b5e5-d68c460ffcea</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:d016339e-7c47-184f-992b-9230ff59afcb</stEvt:instanceID>
                  <stEvt:when>2015-03-29T08:29:17+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:968394c5-4d2d-c04a-bc99-b72513a46fba</stEvt:instanceID>
                  <stEvt:when>2015-04-23T20:14:51+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>600.000000</stDim:w>
            <stDim:h>400.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Р“СЂСѓРїРїР° РѕР±СЂР°Р·С†РѕРІ РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Р‘РµР»С‹Р№</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Р§РµСЂРЅС‹Р№</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>РћС‚С‚РµРЅРєРё СЃРµСЂРѕРіРѕ</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -400 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 400 li
600 400 li
600 0 li
cp
clp
600 400 mo
0 400 li
0 0 li
600 0 li
600 400 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
517.575 325.688 mo
518.687 325.688 519.602 325.626 521.394 325.588 cv
521.394 324.897 li
524.706 324.897 li
524.706 325.567 li
528.967 325.659 531.092 327.705 529.111 327.705 cv
528.244 327.705 527.308 327.705 526.339 327.705 cv
526.339 328.451 li
525.643 328.451 li
525.643 329.982 li
520.457 329.982 li
520.457 328.451 li
519.617 328.451 li
519.617 327.705 li
519.532 327.705 519.446 327.705 519.361 327.705 cv
516.329 327.705 517.071 325.688 517.575 325.688 cv
cp
553.388 336.231 mo
551.03 336.231 li
551.03 335.174 li
553.388 335.174 li
553.388 336.231 li
cp
547.573 336.231 mo
535.13 336.231 li
534.41 336.231 533.706 336.202 533.016 336.155 cv
533.016 335.174 li
536.031 335.174 li
536.365 335.611 536.794 335.979 537.282 336.223 cv
541.506 336.223 li
541.89 335.979 542.162 335.611 542.31 335.174 cv
547.573 335.174 li
547.573 336.231 li
cp
479.709 330.564 mo
478.268 330.564 li
478.268 327.971 li
479.709 327.971 li
479.709 330.564 li
cp
477.26 330.564 mo
475.819 330.564 li
475.819 327.971 li
477.26 327.971 li
477.26 330.564 li
cp
474.81 330.564 mo
473.37 330.564 li
473.37 327.971 li
474.81 327.971 li
474.81 330.564 li
cp
472.361 330.564 mo
470.92 330.564 li
470.92 327.971 li
472.361 327.971 li
472.361 330.564 li
cp
469.912 330.564 mo
468.471 330.564 li
468.471 327.971 li
469.912 327.971 li
469.912 330.564 li
cp
467.607 318.894 mo
455.072 318.894 li
455.072 318.173 li
467.607 318.173 li
467.607 318.894 li
cp
467.462 330.564 mo
466.022 330.564 li
466.022 327.971 li
467.462 327.971 li
467.462 330.564 li
cp
463.14 326.962 mo
463.14 322.496 li
463.861 322.496 li
463.861 326.962 li
463.14 326.962 li
cp
465.013 330.564 mo
463.572 330.564 li
463.572 327.971 li
465.013 327.971 li
465.013 330.564 li
cp
462.564 330.564 mo
461.123 330.564 li
461.123 327.971 li
462.564 327.971 li
462.564 330.564 li
cp
459.25 322.928 mo
459.25 320.046 li
461.844 320.046 li
461.844 322.928 li
459.25 322.928 li
cp
460.115 330.564 mo
458.674 330.564 li
458.674 327.971 li
460.115 327.971 li
460.115 330.564 li
cp
457.357 325.185 mo
455.648 325.185 li
455.451 325.185 455.292 324.863 455.292 324.465 cv
455.292 324.067 455.451 323.744 455.648 323.744 cv
457.357 323.744 li
457.554 323.744 457.713 324.067 457.713 324.465 cv
457.713 324.863 457.554 325.185 457.357 325.185 cv
cp
457.357 326.818 mo
455.648 326.818 li
455.451 326.818 455.292 326.495 455.292 326.098 cv
455.292 325.7 455.451 325.377 455.648 325.377 cv
457.357 325.377 li
457.554 325.377 457.713 325.7 457.713 326.098 cv
457.713 326.495 457.554 326.818 457.357 326.818 cv
cp
457.665 330.564 mo
456.225 330.564 li
456.225 327.971 li
457.665 327.971 li
457.665 330.564 li
cp
455.216 330.564 mo
453.775 330.564 li
453.775 327.971 li
455.216 327.971 li
455.216 330.564 li
cp
452.727 326.098 mo
452.727 325.7 452.887 325.377 453.084 325.377 cv
454.793 325.377 li
454.99 325.377 455.149 325.7 455.149 326.098 cv
455.149 326.495 454.99 326.818 454.793 326.818 cv
453.084 326.818 li
452.887 326.818 452.727 326.495 452.727 326.098 cv
cp
452.767 330.564 mo
451.326 330.564 li
451.326 327.971 li
452.767 327.971 li
452.767 330.564 li
cp
450.163 326.098 mo
450.163 325.7 450.323 325.377 450.519 325.377 cv
452.229 325.377 li
452.426 325.377 452.585 325.7 452.585 326.098 cv
452.585 326.495 452.426 326.818 452.229 326.818 cv
450.519 326.818 li
450.323 326.818 450.163 326.495 450.163 326.098 cv
cp
450.318 330.564 mo
448.877 330.564 li
448.877 327.971 li
450.318 327.971 li
450.318 330.564 li
cp
447.599 326.098 mo
447.599 325.7 447.758 325.377 447.955 325.377 cv
449.665 325.377 li
449.861 325.377 450.021 325.7 450.021 326.098 cv
450.021 326.495 449.861 326.818 449.665 326.818 cv
447.955 326.818 li
447.758 326.818 447.599 326.495 447.599 326.098 cv
cp
447.868 330.564 mo
446.428 330.564 li
446.428 327.971 li
447.868 327.971 li
447.868 330.564 li
cp
445.035 326.098 mo
445.035 325.7 445.194 325.377 445.391 325.377 cv
447.1 325.377 li
447.297 325.377 447.457 325.7 447.457 326.098 cv
447.457 326.495 447.297 326.818 447.1 326.818 cv
445.391 326.818 li
445.194 326.818 445.035 326.495 445.035 326.098 cv
cp
445.391 323.744 mo
447.1 323.744 li
447.297 323.744 447.457 324.067 447.457 324.465 cv
447.457 324.863 447.297 325.185 447.1 325.185 cv
445.391 325.185 li
445.194 325.185 445.035 324.863 445.035 324.465 cv
445.035 324.067 445.194 323.744 445.391 323.744 cv
cp
445.223 314.251 mo
446.619 314.251 li
446.619 317.139 li
445.223 317.139 li
445.223 314.251 li
cp
447.955 323.744 mo
449.665 323.744 li
449.861 323.744 450.021 324.067 450.021 324.465 cv
450.021 324.863 449.861 325.185 449.665 325.185 cv
447.955 325.185 li
447.758 325.185 447.599 324.863 447.599 324.465 cv
447.599 324.067 447.758 323.744 447.955 323.744 cv
cp
448.207 314.251 mo
449.603 314.251 li
449.603 317.139 li
448.207 317.139 li
448.207 314.251 li
cp
450.519 323.744 mo
452.229 323.744 li
452.426 323.744 452.585 324.067 452.585 324.465 cv
452.585 324.863 452.426 325.185 452.229 325.185 cv
450.519 325.185 li
450.323 325.185 450.163 324.863 450.163 324.465 cv
450.163 324.067 450.323 323.744 450.519 323.744 cv
cp
450.683 310.586 mo
451.269 310.586 li
451.269 311.738 li
450.683 311.738 li
450.683 310.586 li
cp
450.683 308.534 mo
451.269 308.534 li
451.269 308.987 li
450.683 308.987 li
450.683 308.534 li
cp
452.587 314.251 mo
452.587 317.139 li
451.191 317.139 li
451.191 314.251 li
452.587 314.251 li
cp
453.084 323.744 mo
454.793 323.744 li
454.99 323.744 455.149 324.067 455.149 324.465 cv
455.149 324.863 454.99 325.185 454.793 325.185 cv
453.084 325.185 li
452.887 325.185 452.727 324.863 452.727 324.465 cv
452.727 324.067 452.887 323.744 453.084 323.744 cv
cp
453.871 308.534 mo
458.194 308.534 li
458.194 308.987 li
453.871 308.987 li
453.871 308.534 li
cp
455.57 314.251 mo
455.57 317.139 li
454.175 317.139 li
454.175 314.251 li
455.57 314.251 li
cp
458.29 311.738 mo
453.967 311.738 li
453.967 310.586 li
458.29 310.586 li
458.29 311.738 li
cp
458.77 308.534 mo
463.092 308.534 li
463.092 308.987 li
458.77 308.987 li
458.77 308.534 li
cp
458.962 312.843 mo
458.962 316.3 li
457.665 316.3 li
457.665 312.843 li
458.962 312.843 li
cp
460.835 312.843 mo
460.835 316.3 li
459.538 316.3 li
459.538 312.843 li
460.835 312.843 li
cp
462.708 312.843 mo
462.708 316.3 li
461.411 316.3 li
461.411 312.843 li
462.708 312.843 li
cp
458.866 311.738 mo
458.866 310.586 li
463.188 310.586 li
463.188 311.738 li
458.866 311.738 li
cp
441.241 327.409 mo
429.331 327.409 li
428.47 327.409 427.753 326.348 427.589 324.938 cv
442.982 324.938 li
442.818 326.348 442.101 327.409 441.241 327.409 cv
cp
423.839 288.494 mo
422.728 288.494 li
421.018 286.978 li
423.839 286.978 li
423.839 288.494 li
cp
423.839 289.455 mo
423.812 289.455 li
423.053 288.782 li
423.839 288.782 li
423.839 289.455 li
cp
423.839 290.359 mo
421.695 290.359 li
421.695 289.647 li
423.836 289.647 li
423.839 289.649 li
423.839 290.359 li
cp
423.839 291.076 mo
422.609 292.891 li
422.401 292.641 li
423.839 290.96 li
423.839 291.076 li
cp
423.839 294.371 mo
422.705 293.006 li
423.839 291.332 li
423.839 294.371 li
cp
420.909 290.845 mo
423.747 290.845 li
422.308 292.529 li
420.909 290.845 li
cp
419.101 290.359 mo
419.101 289.647 li
421.503 289.647 li
421.503 290.359 li
419.101 290.359 li
cp
419.101 288.782 mo
421.503 288.782 li
421.503 289.455 li
419.101 289.455 li
419.101 288.782 li
cp
421.695 288.782 mo
422.861 288.782 li
423.62 289.455 li
421.695 289.455 li
421.695 288.782 li
cp
422.978 331.29 mo
422.517 331.29 li
422.517 321.972 li
422.978 321.972 li
422.978 331.29 li
cp
420.072 331.29 mo
419.611 331.29 li
419.611 321.972 li
420.072 321.972 li
420.072 331.29 li
cp
416.892 322.243 mo
411.225 322.243 li
411.225 320.13 li
416.892 320.13 li
416.892 322.243 li
cp
412.09 315.196 mo
415.932 315.196 li
415.932 317.576 li
412.09 317.576 li
412.09 315.196 li
cp
392.533 330.956 mo
392.164 330.956 li
392.164 322.618 li
392.533 322.618 li
392.533 330.956 li
cp
389.858 330.956 mo
389.489 330.956 li
389.489 322.618 li
389.858 322.618 li
389.858 330.956 li
cp
385.208 310.879 mo
387.348 312.123 li
383.068 312.123 li
385.208 310.879 li
cp
382.645 310.805 mo
382.933 309.556 li
384.96 310.735 li
382.645 312.081 li
382.645 310.805 li
cp
383.039 309.097 mo
387.778 309.097 li
385.208 310.591 li
382.992 309.302 li
383.039 309.097 li
cp
383.113 308.776 mo
385.73 307.255 li
387.904 308.809 li
383.106 308.809 li
383.113 308.776 li
cp
383.785 305.866 mo
385.507 307.096 li
383.19 308.443 li
383.785 305.866 li
cp
383.868 305.506 mo
388.077 305.506 li
388.077 305.602 li
385.73 306.967 li
383.842 305.619 li
383.868 305.506 li
cp
388.077 300.947 mo
388.077 303.296 li
383.968 300.947 li
388.077 300.947 li
cp
388.077 303.91 mo
384.916 303.91 li
385.089 303.612 385.196 303.271 385.196 302.902 cv
385.196 302.453 385.044 302.042 384.796 301.707 cv
388.077 303.582 li
388.077 303.91 li
cp
388.077 308.644 mo
385.952 307.126 li
388.077 305.89 li
388.077 308.644 li
cp
388.077 312.123 mo
387.844 312.123 li
385.456 310.735 li
388.077 309.211 li
388.077 312.123 li
cp
376.407 321.343 mo
371.221 321.343 li
371.221 314.572 li
376.407 314.572 li
376.407 321.343 li
cp
424.353 318.179 mo
424.601 318.179 li
428.423 319.718 li
424.353 321.243 li
424.353 318.179 li
cp
424.353 317.19 mo
428.184 315.644 li
432.467 317.693 li
424.601 317.693 li
424.353 317.593 li
424.353 317.19 li
cp
424.353 313.811 mo
427.633 315.381 li
424.353 316.704 li
424.353 313.811 li
cp
424.353 308.734 mo
427.868 310.712 li
424.353 312.728 li
424.353 308.734 li
cp
424.353 304.085 mo
427.538 305.773 li
424.353 307.693 li
424.353 304.085 li
cp
424.353 299.499 mo
427.447 301.259 li
424.353 303.049 li
424.353 299.499 li
cp
424.353 295.424 mo
427.207 297.003 li
424.353 298.708 li
424.353 295.424 li
cp
424.353 294.645 mo
427.196 292.934 li
430.073 294.666 li
424.353 294.666 li
424.353 294.645 li
cp
424.353 291.224 mo
426.792 292.692 li
424.353 294.159 li
424.353 291.224 li
cp
429.862 290.845 mo
427.196 292.449 li
424.53 290.845 li
429.862 290.845 li
cp
425.249 288.782 mo
425.55 288.782 li
425.385 289.455 li
425.249 289.455 li
425.249 288.782 li
cp
425.249 286.978 mo
425.99 286.978 li
425.62 288.494 li
425.249 288.494 li
425.249 286.978 li
cp
428.226 289.647 mo
428.226 290.359 li
425.356 290.359 li
425.53 289.647 li
428.226 289.647 li
cp
428.226 288.782 mo
428.226 289.455 li
425.577 289.455 li
425.742 288.782 li
428.226 288.782 li
cp
428.418 289.647 mo
431.684 289.647 li
431.684 290.359 li
428.418 290.359 li
428.418 289.647 li
cp
428.418 288.782 mo
431.684 288.782 li
431.684 289.455 li
428.418 289.455 li
428.418 288.782 li
cp
427.6 292.692 mo
430.112 291.18 li
430.421 294.39 li
427.6 292.692 li
cp
430.819 298.516 mo
428.051 296.985 li
430.529 295.505 li
430.819 298.516 li
cp
431.245 302.935 mo
428.293 301.255 li
430.936 299.726 li
431.245 302.935 li
cp
431.683 307.484 mo
428.396 305.742 li
431.344 303.965 li
431.683 307.484 li
cp
438.188 299.393 mo
436.572 303.235 li
431.788 303.235 li
431.418 299.393 li
438.188 299.393 li
cp
434.866 296.966 mo
434.866 296.562 li
435.334 296.562 li
435.334 296.966 li
434.866 296.966 li
cp
434.794 293.176 mo
433.821 293.176 li
433.821 292.701 li
434.794 292.701 li
434.794 293.176 li
cp
434.794 294.041 mo
433.821 294.041 li
433.821 293.393 li
434.794 293.393 li
434.794 294.041 li
cp
434.794 295.194 mo
433.821 295.194 li
433.821 294.257 li
434.794 294.257 li
434.794 295.194 li
cp
434.794 295.446 mo
434.758 295.446 li
434.758 296.022 li
434.794 296.022 li
434.794 296.346 li
433.821 296.346 li
433.821 295.41 li
434.794 295.41 li
434.794 295.446 li
cp
434.794 296.966 mo
433.821 296.966 li
433.821 296.562 li
434.794 296.562 li
434.794 296.966 li
cp
433.749 293.176 mo
432.776 293.176 li
432.776 292.846 li
433.012 292.756 433.266 292.701 433.533 292.701 cv
433.749 292.701 li
433.749 293.176 li
cp
433.749 294.041 mo
432.776 294.041 li
432.776 293.393 li
433.749 293.393 li
433.749 294.041 li
cp
433.749 295.194 mo
432.776 295.194 li
432.776 294.257 li
433.749 294.257 li
433.749 295.194 li
cp
433.749 296.346 mo
432.776 296.346 li
432.776 295.41 li
433.749 295.41 li
433.749 296.346 li
cp
433.749 296.966 mo
433.533 296.966 li
433.266 296.966 433.012 296.911 432.776 296.821 cv
432.776 296.562 li
433.749 296.562 li
433.749 296.966 li
cp
434.866 296.022 mo
435.334 296.022 li
435.334 296.346 li
434.866 296.346 li
434.866 296.022 li
cp
434.866 294.257 mo
435.838 294.257 li
435.838 295.194 li
434.866 295.194 li
434.866 294.257 li
cp
434.866 293.393 mo
435.838 293.393 li
435.838 294.041 li
434.866 294.041 li
434.866 293.393 li
cp
434.866 292.701 mo
435.838 292.701 li
435.838 293.176 li
434.866 293.176 li
434.866 292.701 li
cp
435.91 296.562 mo
436.126 296.562 li
436.126 296.966 li
435.91 296.966 li
435.91 296.562 li
cp
435.91 294.257 mo
436.126 294.257 li
436.126 295.194 li
435.91 295.194 li
435.91 294.257 li
cp
435.91 293.393 mo
436.883 293.393 li
436.883 294.041 li
436.703 294.041 li
436.703 293.717 li
436.126 293.717 li
436.126 294.041 li
435.91 294.041 li
435.91 293.393 li
cp
435.91 292.701 mo
436.883 292.701 li
436.883 293.176 li
435.91 293.176 li
435.91 292.701 li
cp
436.703 295.194 mo
436.703 294.257 li
436.883 294.257 li
436.883 295.194 li
436.703 295.194 li
cp
437.063 297.138 mo
437.063 297.931 li
435.694 297.931 li
435.694 297.138 li
437.063 297.138 li
cp
436.955 294.257 mo
437.927 294.257 li
437.927 295.194 li
436.955 295.194 li
436.955 294.257 li
cp
436.955 293.393 mo
437.927 293.393 li
437.927 294.041 li
436.955 294.041 li
436.955 293.393 li
cp
436.955 292.701 mo
437.927 292.701 li
437.927 293.176 li
436.955 293.176 li
436.955 292.701 li
cp
437.999 296.562 mo
438.972 296.562 li
438.972 296.966 li
437.999 296.966 li
437.999 296.562 li
cp
437.999 296.022 mo
438.071 296.022 li
438.071 295.446 li
437.999 295.446 li
437.999 295.41 li
438.972 295.41 li
438.972 296.346 li
437.999 296.346 li
437.999 296.022 li
cp
437.999 294.257 mo
438.972 294.257 li
438.972 295.194 li
437.999 295.194 li
437.999 294.257 li
cp
437.999 293.393 mo
438.972 293.393 li
438.972 294.041 li
437.999 294.041 li
437.999 293.393 li
cp
437.999 292.701 mo
438.972 292.701 li
438.972 293.176 li
437.999 293.176 li
437.999 292.701 li
cp
439.044 296.562 mo
440.016 296.562 li
440.016 296.899 li
439.854 296.939 439.687 296.966 439.512 296.966 cv
439.044 296.966 li
439.044 296.562 li
cp
439.044 295.41 mo
440.016 295.41 li
440.016 296.346 li
439.044 296.346 li
439.044 295.41 li
cp
439.044 294.257 mo
440.016 294.257 li
440.016 295.194 li
439.044 295.194 li
439.044 294.257 li
cp
439.044 293.393 mo
440.016 293.393 li
440.016 294.041 li
439.044 294.041 li
439.044 293.393 li
cp
439.044 292.701 mo
439.512 292.701 li
439.687 292.701 439.854 292.728 440.016 292.768 cv
440.016 293.176 li
439.044 293.176 li
439.044 292.701 li
cp
440.088 296.562 mo
440.75 296.562 li
440.552 296.704 440.329 296.809 440.088 296.877 cv
440.088 296.562 li
cp
440.088 295.41 mo
440.989 295.41 li
440.989 296.346 li
440.088 296.346 li
440.088 295.41 li
cp
440.088 294.257 mo
440.989 294.257 li
440.989 295.194 li
440.088 295.194 li
440.088 294.257 li
cp
440.088 293.393 mo
440.989 293.393 li
440.989 294.041 li
440.088 294.041 li
440.088 293.393 li
cp
440.088 292.79 mo
440.366 292.869 440.618 293.001 440.838 293.176 cv
440.088 293.176 li
440.088 292.79 li
cp
437.927 296.346 mo
437.423 296.346 li
437.423 296.022 li
437.927 296.022 li
437.927 296.346 li
cp
437.927 296.966 mo
437.423 296.966 li
437.423 296.562 li
437.927 296.562 li
437.927 296.966 li
cp
434.552 308.037 mo
432.251 308.037 li
431.835 303.721 li
436.368 303.721 li
434.552 308.037 li
cp
432.68 312.489 mo
432.297 308.523 li
434.348 308.523 li
432.68 312.489 li
cp
432.752 318.58 mo
432.992 321.071 li
429.672 319.735 li
432.752 318.58 li
cp
432.309 313.98 mo
432.627 317.284 li
428.735 315.422 li
432.309 313.98 li
cp
431.9 313.659 mo
428.184 315.158 li
425.05 313.659 li
431.9 313.659 li
cp
432.23 313.168 mo
432.231 313.173 li
424.424 313.173 li
428.295 310.953 li
432.23 313.168 li
cp
431.822 308.93 mo
432.181 312.654 li
428.723 310.708 li
431.822 308.93 li
cp
431.685 308.523 mo
428.295 310.467 li
424.842 308.523 li
431.685 308.523 li
cp
431.732 307.996 mo
431.736 308.037 li
424.588 308.037 li
427.967 306 li
431.732 307.996 li
cp
430.943 303.721 mo
427.967 305.515 li
424.582 303.721 li
430.943 303.721 li
cp
430.918 303.235 mo
424.871 303.235 li
427.87 301.5 li
430.918 303.235 li
cp
430.673 299.393 mo
427.87 301.014 li
425.021 299.393 li
430.673 299.393 li
cp
424.738 295.151 mo
430.307 295.151 li
427.629 296.751 li
424.738 295.151 li
cp
430.648 298.907 mo
424.833 298.907 li
427.629 297.237 li
430.648 298.907 li
cp
425.808 318.179 mo
432.527 318.179 li
429.048 319.483 li
425.808 318.179 li
cp
432.704 293.176 mo
432.207 293.176 li
432.359 293.054 432.522 292.946 432.704 292.869 cv
432.704 293.176 li
cp
432.704 294.041 mo
431.732 294.041 li
431.732 293.753 li
431.705 293.753 li
431.782 293.623 431.869 293.503 431.971 293.393 cv
432.704 293.393 li
432.704 294.041 li
cp
432.704 295.194 mo
431.732 295.194 li
431.732 294.257 li
432.704 294.257 li
432.704 295.194 li
cp
432.704 296.346 mo
432.033 296.346 li
431.904 296.219 431.798 296.071 431.705 295.914 cv
431.732 295.914 li
431.732 295.41 li
432.704 295.41 li
432.704 296.346 li
cp
432.704 296.798 mo
432.558 296.736 432.422 296.654 432.294 296.562 cv
432.704 296.562 li
432.704 296.798 li
cp
431.66 295.194 mo
431.444 295.194 li
431.444 295.262 li
431.415 295.123 431.4 294.98 431.4 294.833 cv
431.4 294.632 431.437 294.442 431.49 294.257 cv
431.66 294.257 li
431.66 295.194 li
cp
441.061 295.41 mo
441.555 295.41 li
441.461 295.743 441.292 296.044 441.061 296.29 cv
441.061 295.41 li
cp
441.061 294.257 mo
441.555 294.257 li
441.607 294.442 441.644 294.632 441.644 294.833 cv
441.644 294.98 441.629 295.123 441.601 295.262 cv
441.601 295.194 li
441.061 295.194 li
441.061 294.257 li
cp
441.061 293.393 mo
441.074 293.393 li
441.248 293.581 441.391 293.799 441.488 294.041 cv
441.061 294.041 li
441.061 293.393 li
cp
556.846 336.231 mo
556.846 335.174 li
558.374 335.174 li
558.374 334.31 li
556.846 334.31 li
556.846 331.401 li
553.388 331.401 li
553.388 334.31 li
551.03 334.31 li
551.03 331.401 li
547.573 331.401 li
547.573 334.31 li
542.405 334.31 li
542.397 334.181 542.405 334.058 542.376 333.924 cv
542.354 333.819 542.33 333.721 542.307 333.62 cv
543.548 333.62 li
543.548 333.186 li
546.933 333.186 li
546.933 332.925 li
543.548 332.925 li
543.548 332.405 li
541.928 332.405 li
541.616 331.724 541.135 331.276 540.239 331.276 cv
537.515 331.276 li
536.053 331.276 535.12 332.461 535.432 333.924 cv
535.46 334.058 535.521 334.181 535.568 334.31 cv
533.016 334.31 li
533.016 329.988 li
503.266 329.988 li
503.266 327.186 li
468.116 327.186 li
468.116 317.576 li
466.765 317.576 li
463.861 307.944 li
458.962 307.944 li
458.962 303.91 li
457.954 303.91 li
457.954 307.944 li
454.264 307.944 li
454.264 304.342 li
452.965 304.342 li
452.965 299.876 li
451.632 299.876 li
451.632 304.342 li
450.333 304.342 li
450.333 306.938 li
448.116 306.938 li
448.116 312.772 li
447.419 312.772 li
447.419 306.938 li
444.852 306.938 li
444.852 312.772 li
444.19 312.772 li
444.19 311.69 li
440.376 311.69 li
440.376 317.576 li
435.496 317.576 li
435.496 321.875 li
424.116 321.875 li
424.116 321.818 li
424.23 321.775 li
424.353 321.775 li
424.353 321.729 li
429.048 319.969 li
433.04 321.577 li
433.059 321.775 li
433.534 321.775 li
433.558 321.785 li
433.558 321.775 li
433.574 321.775 li
433.558 321.606 li
433.558 321.299 li
433.527 321.287 li
432.734 313.059 li
438.404 299.578 li
438.368 299.393 li
441.097 299.393 li
441.097 298.907 li
437.711 298.907 li
437.711 297.931 li
437.423 297.931 li
437.423 297.138 li
439.512 297.138 li
440.093 297.138 440.617 296.917 441.022 296.562 cv
441.097 296.562 li
441.097 296.501 li
441.539 296.081 441.817 295.491 441.817 294.833 cv
441.817 293.56 440.785 292.528 439.512 292.528 cv
433.533 292.528 li
433.259 292.528 432.999 292.584 432.755 292.672 cv
432.704 292.672 li
432.704 292.688 li
431.842 293.021 431.228 293.853 431.228 294.833 cv
431.228 295.491 431.506 296.081 431.948 296.501 cv
431.948 296.562 li
432.023 296.562 li
432.223 296.738 432.451 296.881 432.704 296.979 cv
432.704 296.994 li
432.755 296.994 li
432.999 297.082 433.259 297.138 433.533 297.138 cv
435.334 297.138 li
435.334 297.931 li
435.046 297.931 li
435.046 298.907 li
431.371 298.907 li
430.595 290.845 li
432.068 290.845 li
432.068 288.494 li
425.812 288.494 li
426.183 286.978 li
426.497 286.978 li
426.497 285.326 li
425.249 285.326 li
425.249 284.844 li
424.353 284.844 li
424.353 283.211 li
424.864 283.211 li
424.864 282.059 li
424.353 282.059 li
424.353 278.985 li
425.777 278.985 li
425.777 278.491 li
424.353 278.491 li
424.353 278.066 li
425.393 278.066 li
425.393 277.407 li
422.991 277.407 li
422.991 278.066 li
423.839 278.066 li
423.839 278.491 li
422.415 278.491 li
422.415 278.985 li
423.839 278.985 li
423.839 282.059 li
423.52 282.059 li
423.52 283.211 li
423.839 283.211 li
423.839 285.326 li
419.005 285.326 li
419.005 286.978 li
420.826 286.978 li
422.536 288.494 li
418.717 288.494 li
418.717 290.359 li
418.525 290.359 li
418.525 290.845 li
420.738 290.845 li
420.738 291.126 li
422.103 292.768 li
405.151 312.597 li
405.151 309.232 li
404.646 309.232 li
404.646 302.181 li
401.62 302.181 li
401.62 309.232 li
400.819 309.232 li
400.819 302.181 li
399.459 302.181 li
399.459 292.816 li
399.171 292.816 li
399.171 302.181 li
397.307 302.181 li
397.307 309.232 li
396.353 309.232 li
396.353 302.181 li
395.137 302.181 li
395.137 292.816 li
394.849 292.816 li
394.849 302.181 li
392.841 302.181 li
392.841 309.232 li
391.496 309.232 li
390.949 315.791 li
393.824 315.791 li
393.824 315.782 li
394.1 315.782 li
394.1 315.791 li
397.053 315.791 li
397.053 315.782 li
397.33 315.782 li
397.33 315.791 li
400.282 315.791 li
400.282 315.782 li
400.559 315.782 li
400.559 315.791 li
403.511 315.791 li
403.511 315.782 li
403.788 315.782 li
403.788 315.791 li
405.151 315.791 li
405.151 312.818 li
422.197 292.881 li
422.427 293.158 li
407.091 315.791 li
407.265 315.791 li
422.523 293.274 li
423.808 294.819 li
423.808 294.973 li
423.839 294.955 li
423.839 312.772 li
414.779 312.772 li
414.779 309.337 li
413.05 309.337 li
413.05 312.772 li
410.461 312.772 li
410.21 315.782 li
410.247 315.782 li
410.247 315.791 li
411.354 315.791 li
411.354 316.252 li
410.247 316.252 li
410.247 317.555 li
410.063 317.555 li
410.061 317.576 li
406.055 317.576 li
406.741 316.565 li
406.741 316.308 li
405.881 317.576 li
405.151 317.576 li
405.151 316.252 li
403.788 316.252 li
403.788 317.555 li
403.511 317.555 li
403.511 316.252 li
400.559 316.252 li
400.559 317.555 li
400.282 317.555 li
400.282 316.252 li
397.33 316.252 li
397.33 317.555 li
397.053 317.555 li
397.053 316.252 li
394.1 316.252 li
394.1 317.555 li
393.824 317.555 li
393.824 316.252 li
390.911 316.252 li
390.871 316.724 li
390.871 317.555 li
390.802 317.555 li
390.8 317.576 li
389.08 317.576 li
389.08 316.252 li
387.642 316.252 li
387.642 317.555 li
387.365 317.555 li
387.365 316.252 li
383.861 316.252 li
383.861 315.791 li
387.365 315.791 li
387.365 315.782 li
387.642 315.782 li
387.642 315.791 li
389.08 315.791 li
389.08 312.123 li
388.942 312.123 li
388.942 305.506 li
390.238 305.506 li
390.238 303.91 li
388.942 303.91 li
388.942 300.947 li
390.094 300.947 li
390.094 298.732 li
388.942 298.732 li
388.942 295.698 li
388.077 295.698 li
388.077 298.732 li
383.467 298.732 li
383.467 300.914 li
383.372 300.9 383.277 300.884 383.179 300.884 cv
382.065 300.884 381.162 301.788 381.162 302.902 cv
381.162 303.271 381.268 303.612 381.442 303.91 cv
380.729 303.91 li
380.729 305.506 li
383.292 305.506 li
382.607 308.473 li
375.606 308.473 li
367.713 301.858 li
367.435 302.189 li
374.933 308.473 li
368.99 308.473 li
368.632 312.772 li
365.955 312.772 li
363.932 323.392 li
363.932 331.418 li
389.489 331.418 li
389.489 331.325 li
389.858 331.325 li
389.858 331.418 li
392.164 331.418 li
392.164 331.325 li
392.533 331.325 li
392.533 331.418 li
425.249 331.418 li
425.249 331.428 li
331.312 331.428 li
330.989 331.066 li
331.394 331.066 li
332.298 330.613 333.033 329.759 333.244 328.766 cv
333.556 327.304 332.623 326.119 331.161 326.119 cv
328.437 326.119 li
327.541 326.119 327.06 326.567 326.748 327.247 cv
325.128 327.247 li
325.128 327.768 li
314.129 327.768 li
314.129 328.029 li
325.128 328.029 li
325.128 328.463 li
326.369 328.463 li
326.346 328.564 326.322 328.662 326.3 328.766 cv
326.286 328.834 326.295 328.894 326.285 328.96 cv
279.157 326.818 li
292.775 342.07 li
557.624 342.07 li
558.192 337.72 li
558.386 336.231 li
556.846 336.231 li
cp
444.373 311.685 mo
443.211 311.685 li
443.211 310.221 li
444.373 310.221 li
444.373 311.685 li
cp
441.352 310.221 mo
442.514 310.221 li
442.514 311.685 li
441.352 311.685 li
441.352 310.221 li
cp
387.365 315.791 mo
387.642 315.791 li
387.642 316.252 li
387.365 316.252 li
387.365 315.791 li
cp
397.053 316.252 mo
397.053 315.791 li
397.33 315.791 li
397.33 316.252 li
397.053 316.252 li
cp
406.952 316.252 mo
406.778 316.252 li
407.017 315.899 li
407.017 316.156 li
406.952 316.252 li
cp
400.282 316.252 mo
400.282 315.791 li
400.559 315.791 li
400.559 316.252 li
400.282 316.252 li
cp
394.1 316.252 mo
393.824 316.252 li
393.824 315.791 li
394.1 315.791 li
394.1 316.252 li
cp
410.21 315.791 mo
410.247 315.791 li
410.247 316.252 li
410.171 316.252 li
410.21 315.791 li
cp
403.511 316.252 mo
403.511 315.791 li
403.788 315.791 li
403.788 316.252 li
403.511 316.252 li
cp
476.179 327.178 mo
475.963 327.178 li
475.963 325.305 li
476.179 325.305 li
478.664 325.305 li
478.88 325.305 li
481.366 325.305 li
481.582 325.305 li
484.067 325.305 li
484.283 325.305 li
486.768 325.305 li
486.985 325.305 li
489.47 325.305 li
489.686 325.305 li
492.171 325.305 li
492.387 325.305 li
494.873 325.305 li
495.089 325.305 li
497.574 325.305 li
497.79 325.305 li
500.275 325.305 li
500.492 325.305 li
502.977 325.305 li
503.193 325.305 li
503.193 325.521 li
503.193 327.178 li
502.977 327.178 li
502.977 325.521 li
500.492 325.521 li
500.492 327.178 li
500.275 327.178 li
500.275 325.521 li
497.79 325.521 li
497.79 327.178 li
497.574 327.178 li
497.574 325.521 li
495.089 325.521 li
495.089 327.178 li
494.873 327.178 li
494.873 325.521 li
494.621 325.521 li
494.621 327.106 li
493.972 327.106 li
493.972 325.521 li
492.387 325.521 li
492.387 327.178 li
492.171 327.178 li
492.171 325.521 li
489.686 325.521 li
489.686 327.178 li
489.47 327.178 li
489.47 325.521 li
488.786 325.521 li
488.786 327.106 li
488.137 327.106 li
488.137 325.521 li
486.985 325.521 li
486.985 327.178 li
486.768 327.178 li
486.768 325.521 li
484.283 325.521 li
484.283 327.178 li
484.067 327.178 li
484.067 325.521 li
481.582 325.521 li
481.582 327.178 li
481.366 327.178 li
481.366 325.521 li
478.88 325.521 li
478.88 327.178 li
478.664 327.178 li
478.664 325.521 li
476.179 325.521 li
476.179 327.178 li
cp
537.404 349.124 mo
537.404 351.188 li
510.039 351.188 li
519.518 350.455 529.222 349.716 537.404 349.124 cv
cp
296.921 354.981 mo
294.389 359.538 295.404 359.28 305.519 359.28 cv
312.952 359.28 319.745 354.728 324.99 354.728 cv
386.091 354.728 483.794 354.728 483.794 354.728 cv
483.794 354.728 485.676 353.586 495.508 352.452 cv
543.726 352.452 li
543.726 351.188 li
540.185 351.188 li
540.185 348.925 li
543.529 348.687 546.556 348.48 549.129 348.315 cv
550.553 355.234 li
555.105 355.234 li
556.612 347.914 li
556.907 347.906 557.174 347.901 557.381 347.901 cv
557.634 343.602 li
293.634 343.602 li
293.634 343.602 299.45 350.429 296.921 354.981 cv
cp
.313726 .313726 .313726 rgb
f
540.548 94.0006 mo
533.269 94.0006 li
532.596 94.0006 531.938 93.9737 531.293 93.9299 cv
531.293 93.0124 li
540.548 93.0124 li
540.548 94.0006 li
cp
519.155 91.615 mo
515.506 91.615 li
515.506 90.3674 li
519.154 90.3674 li
519.155 91.615 li
cp
513.64 91.615 mo
509.992 91.615 li
509.992 90.3674 li
513.64 90.3674 li
513.64 91.615 li
cp
508.126 91.615 mo
504.478 91.615 li
504.478 90.3674 li
508.126 90.3674 li
508.126 91.615 li
cp
502.612 91.615 mo
498.964 91.6151 li
498.964 90.3674 li
502.612 90.3674 li
502.612 91.615 li
cp
497.098 91.6151 mo
493.45 91.6151 li
493.45 90.3674 li
497.098 90.3674 li
497.098 91.6151 li
cp
493.242 72.4173 mo
482.504 72.4173 li
482.504 69.8054 li
483.955 69.8054 li
483.955 67.551 li
486.277 67.551 li
486.277 69.8054 li
493.242 69.8054 li
493.242 72.4173 li
cp
491.584 91.6151 mo
489.315 91.6151 li
489.315 91.9131 li
487.438 91.9131 li
487.438 95.4941 li
474.668 95.4941 li
474.668 91.9131 li
473.063 91.9131 li
473.063 91.3326 li
487.935 91.3326 li
487.935 90.3674 li
491.584 90.3674 li
491.584 91.6151 li
cp
470.896 74.1586 mo
477.28 74.1586 li
477.28 75.3195 li
470.896 75.3195 li
470.896 74.1586 li
cp
470.16 91.9131 mo
468.284 91.9131 li
468.284 95.4941 li
455.514 95.4941 li
455.514 91.9131 li
453.908 91.9131 li
453.908 91.3326 li
470.16 91.3326 li
470.16 91.9131 li
cp
452.322 76.1901 mo
465.381 76.1901 li
465.381 77.351 li
452.322 77.351 li
452.322 76.1901 li
cp
449.688 62.2597 mo
450.893 58.0413 li
453.215 58.0413 li
452.009 62.2597 li
449.688 62.2597 li
cp
450.268 67.2711 mo
447.946 67.2711 li
449.152 63.0527 li
451.473 63.0527 li
450.268 67.2711 li
cp
468.284 71.8369 mo
468.284 73.5782 li
460.158 73.5782 li
460.158 71.8369 li
468.284 71.8369 li
cp
458.126 64.1461 mo
458.126 63.9057 458.321 63.7108 458.561 63.7108 cv
479.747 63.7108 li
479.988 63.7108 480.182 63.9057 480.182 64.1461 cv
480.182 69.5151 li
480.182 69.7556 479.988 69.9505 479.747 69.9505 cv
458.561 69.9505 li
458.321 69.9505 458.126 69.7556 458.126 69.5151 cv
458.126 64.1461 li
cp
458.126 58.632 mo
458.126 58.3916 458.321 58.1967 458.561 58.1967 cv
479.747 58.1967 li
479.988 58.1967 480.182 58.3916 480.182 58.632 cv
480.182 61.8244 li
480.182 62.0648 479.988 62.2597 479.747 62.2597 cv
458.561 62.2597 li
458.321 62.2597 458.126 62.0648 458.126 61.8244 cv
458.126 58.632 li
cp
482.214 63.4206 mo
486.277 63.4206 li
486.277 66.613 li
482.214 66.613 li
482.214 63.4206 li
cp
482.214 58.7771 mo
486.277 58.7771 li
486.277 61.9695 li
482.214 61.9695 li
482.214 58.7771 li
cp
441.874 72.4173 mo
423.881 72.4173 li
423.881 71.5467 li
441.874 71.5467 li
441.874 72.4173 li
cp
559.607 93.0124 mo
559.779 92.2039 li
558.251 92.2039 li
558.251 91.1363 li
540.548 91.1363 li
540.548 92.2039 li
531.293 92.2039 li
531.293 88.1613 li
529.996 88.1613 li
529.971 88.0716 529.937 87.9794 529.866 87.8816 cv
527.866 85.1248 li
527.684 84.8741 527.21 84.6815 526.797 84.6815 cv
522.493 84.6815 li
522.08 84.6815 521.745 84.8741 521.745 85.1248 cv
521.745 87.8816 li
521.745 87.9794 521.779 88.0716 521.819 88.1613 cv
517.258 88.1613 li
512.61 80.784 li
512.799 80.6882 512.932 80.4974 512.932 80.2712 cv
512.932 79.9507 512.672 79.6908 512.352 79.6908 cv
511.43 79.6908 li
511.43 78.888 li
511.94 78.888 li
511.984 78.888 512.02 78.8521 512.02 78.8079 cv
512.02 77.821 li
512.02 77.7767 511.984 77.7409 511.94 77.7409 cv
509.218 77.7409 li
509.174 77.7409 509.138 77.7767 509.138 77.821 cv
509.138 78.8079 li
509.138 78.8521 509.174 78.888 509.218 78.888 cv
509.773 78.888 li
509.773 79.6908 li
501.071 79.6908 li
486.286 56.0152 li
486.25 55.9658 486.178 55.9191 486.087 55.875 cv
487.728 55.875 li
488.049 55.875 488.308 55.6151 488.308 55.2945 cv
488.308 54.974 488.049 54.7141 487.728 54.7141 cv
483.085 54.7141 li
483.085 53.4215 li
484.245 53.4215 li
484.345 53.4215 484.427 53.3399 484.427 53.2393 cv
484.427 50.9927 li
484.427 50.8921 484.345 50.8105 484.245 50.8105 cv
478.05 50.8105 li
477.949 50.8105 477.868 50.8921 477.868 50.9927 cv
477.868 53.2393 li
477.868 53.3399 477.949 53.4215 478.05 53.4215 cv
479.312 53.4215 li
479.312 54.7141 li
472.594 54.7141 li
470.985 48.8543 li
469.659 48.8543 li
469.659 54.7141 li
469.191 54.7141 li
469.191 48.8543 li
467.865 48.8543 li
466.256 54.7141 li
457.255 54.7141 li
457.255 53.4215 li
458.415 53.4215 li
458.516 53.4215 458.598 53.3399 458.598 53.2393 cv
458.598 50.9927 li
458.598 50.8921 458.516 50.8105 458.415 50.8105 cv
452.221 50.8105 li
452.12 50.8105 452.039 50.8921 452.039 50.9927 cv
452.039 53.2393 li
452.039 53.3399 452.12 53.4215 452.221 53.4215 cv
453.483 53.4215 li
453.483 54.7141 li
450.29 54.7141 li
449.97 54.7141 449.71 54.974 449.71 55.2945 cv
449.71 55.6151 449.97 55.875 450.29 55.875 cv
451.024 55.875 li
450.933 55.9191 450.861 55.9658 450.825 56.0152 cv
444.724 68.5539 li
431.886 68.5539 li
430.867 64.8429 li
429.92 64.8429 li
429.92 68.5539 li
429.586 68.5539 li
429.586 64.8429 li
428.638 64.8429 li
427.62 68.5539 li
422.248 68.5539 li
421.927 68.5539 421.667 68.8138 421.667 69.1343 cv
421.667 69.4549 421.927 69.7148 422.248 69.7148 cv
422.47 69.7148 li
418.258 79.6908 li
403.658 79.6908 li
403.658 77.9936 li
404.613 77.9936 li
404.695 77.9936 404.763 77.9266 404.763 77.8438 cv
404.763 75.9947 li
404.763 75.9119 404.695 75.8448 404.613 75.8448 cv
399.514 75.8448 li
399.432 75.8448 399.364 75.9119 399.364 75.9947 cv
399.364 77.8438 li
399.364 77.9266 399.432 77.9936 399.514 77.9936 cv
400.553 77.9936 li
400.553 79.6908 li
397.698 79.6908 li
397.377 79.6908 397.117 79.9507 397.117 80.2712 cv
397.117 80.5265 397.285 80.7366 397.514 80.8144 cv
392.885 88.1613 li
384.548 88.1613 li
382.372 83.0299 li
383.267 82.7307 383.917 81.8947 383.917 80.8983 cv
383.917 80.2939 383.678 79.7463 383.291 79.3412 cv
383.356 79.5668 383.392 79.8075 383.392 80.0586 cv
383.392 81.3051 382.53 82.3155 381.467 82.3155 cv
380.79 82.3155 li
382.092 82.0708 383.077 80.9323 383.077 79.5599 cv
383.077 78.0091 381.82 76.7518 380.269 76.7518 cv
378.718 76.7518 377.461 78.0091 377.461 79.5599 cv
377.461 80.9323 378.447 82.0708 379.748 82.3155 cv
379.229 82.3155 li
378.166 82.3155 377.304 81.3051 377.304 80.0586 cv
377.304 79.8075 377.34 79.5668 377.405 79.3412 cv
377.018 79.7463 376.779 80.294 376.779 80.8983 cv
376.779 81.9061 377.444 82.7496 378.355 83.0395 cv
376.183 88.1613 li
370.364 88.1613 li
370.335 87.3314 370.009 86.4084 369.663 85.4618 cv
368.958 83.534 368.281 82.1489 366.636 82.1489 cv
363.852 82.1489 li
363.347 82.1489 362.939 82.2786 362.58 82.5184 cv
360.359 80.8306 li
360.064 81.2186 li
356.367 78.4079 li
356.219 78.6018 li
359.917 81.4124 li
359.672 81.7354 li
361.767 83.3285 li
361.495 83.6854 361.228 84.1078 360.936 84.5996 cv
360.261 85.7341 360.074 87.0423 360.451 88.1613 cv
347.795 88.1613 li
347.795 89.5089 li
346.252 89.5089 li
346.118 88.9752 345.927 88.4212 345.72 87.8561 cv
345.015 85.9283 344.338 84.5431 342.693 84.5431 cv
339.91 84.5431 li
339.404 84.5431 338.996 84.6728 338.637 84.9126 cv
336.417 83.2249 li
336.122 83.6128 li
332.424 80.8022 li
332.277 80.9961 li
335.974 83.8067 li
335.729 84.1297 li
337.824 85.7227 li
337.552 86.0797 337.285 86.502 336.993 86.9938 cv
336.962 87.046 336.939 87.1007 336.91 87.1535 cv
293.86 85.1967 li
294.933 86.3982 li
306.138 98.9481 li
557.711 98.9481 li
559.409 94.0006 li
558.251 94.0006 li
558.251 93.0124 li
559.607 93.0124 li
cp
535.396 105.133 mo
535.396 107.063 li
509.802 107.063 li
518.668 106.377 527.744 105.686 535.396 105.133 cv
cp
310.475 110.611 mo
308.107 114.873 309.056 114.631 318.517 114.631 cv
325.469 114.631 331.822 110.374 336.728 110.374 cv
393.875 110.374 485.256 110.374 485.256 110.374 cv
485.256 110.374 487.016 109.306 496.212 108.246 cv
541.309 108.246 li
541.309 107.063 li
537.998 107.063 li
537.998 104.946 li
541.125 104.724 543.957 104.53 546.363 104.376 cv
547.695 110.847 li
551.952 110.847 li
553.362 104.001 li
553.638 103.994 556.151 103.988 556.344 103.988 cv
557.436 99.9678 li
307.401 99.9678 li
307.401 99.9678 312.84 106.354 310.475 110.611 cv
cp
f
459.798 226.681 mo
459.748 226.681 li
459.748 229.164 li
459.798 229.164 li
459.798 226.681 li
cp
f
456.553 226.681 mo
456.503 226.681 li
456.503 229.164 li
456.553 229.164 li
456.553 226.681 li
cp
f
558.904 233.978 mo
558.373 234.656 557.462 235.078 556.361 235.078 cv
473.874 235.078 li
449.707 235.078 428.839 232.23 413.525 226.842 cv
412.441 226.46 411.893 225.767 411.693 225.062 cv
411.468 224.986 411.239 224.911 411.012 224.835 cv
407.743 225.687 405.326 228.65 405.326 232.186 cv
405.326 236.387 408.731 239.792 412.931 239.792 cv
442.229 239.792 li
462.618 239.792 li
555.603 239.792 li
557.731 239.792 559.456 238.066 559.456 235.938 cv
559.456 235.219 559.246 234.554 558.904 233.978 cv
cp
f
423.781 222.144 mo
458.376 222.144 li
458.181 221.928 458.055 221.65 458.055 221.337 cv
458.055 220.665 458.6 220.12 459.272 220.12 cv
470.02 220.12 li
470.692 220.12 471.237 220.665 471.237 221.337 cv
471.237 221.65 471.111 221.928 470.916 222.144 cv
499.24 222.144 li
499.046 221.928 498.92 221.65 498.92 221.337 cv
498.92 220.665 499.464 220.12 500.136 220.12 cv
510.885 220.12 li
511.557 220.12 512.102 220.664 512.102 221.337 cv
512.102 221.65 511.975 221.928 511.781 222.144 cv
549.924 222.144 li
551.425 224.274 li
422.748 224.274 li
420.535 224.274 417.616 224.674 415.419 225.186 cv
415.028 225.054 414.637 224.921 414.249 224.784 cv
411.838 223.936 419.32 222.144 423.781 222.144 cv
cp
468.398 192.944 mo
471.241 192.944 li
471.241 195.378 li
468.398 195.378 li
468.398 192.944 li
cp
471.639 192.944 mo
475.702 192.944 li
475.702 195.378 li
471.639 195.378 li
471.639 192.944 li
cp
476.101 192.944 mo
481.381 192.944 li
481.381 195.378 li
476.101 195.378 li
476.101 192.944 li
cp
481.779 192.944 mo
487.258 192.944 li
487.258 195.378 li
481.779 195.378 li
481.779 192.944 li
cp
489.018 196.4 mo
496.737 196.4 li
496.737 197.172 li
489.018 197.172 li
489.018 196.4 li
cp
491.112 193.35 mo
501.86 193.35 li
501.86 194.769 li
491.112 194.769 li
491.112 193.35 li
cp
482.359 199.564 mo
482.359 198.157 li
486.123 198.157 li
486.123 199.564 li
482.359 199.564 li
cp
477.245 199.274 mo
477.245 197.868 li
481.008 197.868 li
481.008 199.274 li
477.245 199.274 li
cp
491.923 212.717 mo
491.923 218.599 li
491.923 219.439 491.242 220.12 490.402 220.12 cv
479.451 220.12 li
478.611 220.12 477.929 219.439 477.929 218.599 cv
477.93 212.717 li
477.93 211.877 478.611 211.196 479.451 211.196 cv
490.402 211.196 li
491.242 211.196 491.923 211.877 491.923 212.717 cv
cp
504.699 201.563 mo
504.699 202.179 504.2 202.679 503.584 202.679 cv
509.364 202.679 li
509.364 204.301 li
481.377 204.301 li
481.377 202.679 li
476.206 202.679 li
475.59 202.679 475.09 202.179 475.09 201.563 cv
475.09 200.947 475.59 200.448 476.206 200.448 cv
503.584 200.448 li
504.2 200.448 504.699 200.947 504.699 201.563 cv
cp
548.094 230.254 mo
545.863 230.254 li
545.863 225.59 li
548.094 225.59 li
548.094 230.254 li
cp
544.849 230.254 mo
542.618 230.254 li
542.618 225.59 li
544.849 225.59 li
544.849 230.254 li
cp
460.889 230.255 mo
458.658 230.255 li
458.658 225.59 li
460.889 225.59 li
460.889 230.255 li
cp
457.644 230.255 mo
455.413 230.255 li
455.413 225.59 li
457.644 225.59 li
457.644 230.255 li
cp
413.887 225.813 mo
429.086 231.16 449.829 233.987 473.874 233.987 cv
556.361 233.987 li
557.512 233.987 558.316 233.377 558.316 232.503 cv
558.316 232.157 li
550.49 221.053 li
549.924 221.053 li
549.924 214.895 li
549.924 213.983 549.38 213.224 548.708 213.224 cv
548.099 213.224 li
548.099 203.287 li
549.215 203.287 li
550.055 203.287 550.736 202.606 550.736 201.766 cv
550.736 200.346 li
550.736 199.506 550.055 198.825 549.215 198.825 cv
546.071 198.825 li
546.071 192.234 li
546.071 191.394 545.446 190.661 544.663 190.595 cv
537.978 190.033 li
537.078 189.958 536.337 190.641 536.337 191.561 cv
536.337 209.328 li
536.337 210.248 537.078 210.916 537.978 210.823 cv
544.652 210.127 li
544.652 213.224 li
532.737 213.224 li
532.737 209.422 li
532.433 209.422 li
532.433 213.224 li
529.391 213.224 li
529.391 209.726 li
529.086 209.726 li
529.086 213.224 li
528.326 213.224 li
528.326 210.182 li
526.501 210.182 li
526.501 213.224 li
523.56 213.224 li
523.56 212.515 li
523.56 211.675 522.879 210.994 522.039 210.994 cv
513.974 210.994 li
513.368 207.118 li
512.788 202.638 li
512.763 202.447 512.685 202.272 512.586 202.108 cv
511.168 193.034 li
511.156 192.958 511.112 192.892 511.087 192.819 cv
509.647 183.604 li
509.62 183.432 509.554 183.27 509.464 183.12 cv
509.827 183.002 510.095 182.672 510.095 182.269 cv
510.095 181.769 509.689 181.363 509.189 181.363 cv
501.543 181.363 li
502.223 180.908 502.672 180.134 502.672 179.255 cv
502.672 177.855 501.537 176.72 500.136 176.72 cv
498.736 176.72 497.601 177.855 497.601 179.255 cv
497.601 180.134 498.05 180.908 498.73 181.363 cv
496.277 181.363 li
495.776 181.363 495.371 181.769 495.371 182.269 cv
495.371 182.769 495.776 183.175 496.277 183.175 cv
496.823 183.175 li
496.787 183.263 496.738 183.347 496.728 183.442 cv
495.863 191.727 li
468.606 191.727 li
467.807 191.727 467.159 192.311 467.159 193.034 cv
467.159 201.259 li
462.821 201.259 li
461.981 201.259 461.22 201.874 461.121 202.638 cv
461.041 203.258 li
460.629 202.874 460.17 202.68 459.576 202.798 cv
457.699 203.17 li
457.364 203.236 457.124 203.397 456.916 203.601 cv
455.168 202.747 li
455.021 203.048 li
452.152 201.647 li
452.078 201.797 li
454.947 203.199 li
454.825 203.449 li
456.46 204.248 li
456.322 204.527 456.193 204.837 456.06 205.212 cv
455.83 205.861 455.799 206.542 455.973 207.14 cv
453.695 207.14 li
452.855 207.14 452.174 207.821 452.174 208.661 cv
452.174 213.224 li
446.951 213.224 li
446.951 206.228 li
446.647 206.228 li
446.647 213.224 li
444.67 213.224 li
444.483 213.224 444.111 213.238 443.605 213.263 cv
443.605 209.726 li
443.301 209.726 li
443.301 213.278 li
442.352 213.326 441.002 213.405 439.346 213.509 cv
439.346 210.943 li
439.042 210.943 li
439.042 213.528 li
437.978 213.594 436.807 213.67 435.544 213.752 cv
435.544 211.095 li
433.719 211.095 li
433.719 213.873 li
433.271 213.902 432.812 213.933 432.35 213.964 cv
432.35 210.03 li
432.045 210.03 li
432.045 213.984 li
429.686 214.143 427.157 214.316 424.592 214.494 cv
424.592 212.768 li
416.055 212.768 li
416.055 215.096 li
415.391 215.144 414.74 215.19 414.097 215.237 cv
414.097 212.768 li
413.793 212.768 li
413.793 215.259 li
413.278 215.296 412.77 215.333 412.272 215.369 cv
412.272 210.639 li
411.968 210.639 li
411.968 215.391 li
411.399 215.433 410.845 215.473 410.305 215.513 cv
410.305 213.659 li
406.634 213.659 li
406.634 215.787 li
403.311 216.038 401.088 216.22 400.865 216.266 cv
392.351 218.052 403.574 221.152 412.702 224.251 cv
412.664 224.579 412.698 225.395 413.887 225.813 cv
cp
f
252.231 114.882 mo
243.694 114.882 li
245.409 114.436 248.337 113.54 252.231 113.259 cv
252.231 114.882 li
cp
61.7093 112.964 mo
57.942 114.585 58.2799 117.36 62.1825 117.36 cv
110.253 117.36 242.949 117.605 242.949 117.605 cv
242.949 117.605 244.429 116.706 252.165 115.814 cv
260.39 115.877 li
260.39 114.882 li
257.604 114.882 li
257.604 113.102 li
260.235 112.915 258.754 112.752 260.778 112.622 cv
261.899 118.066 li
265.48 118.066 li
266.665 112.307 li
266.898 112.301 267.108 112.296 267.27 112.296 cv
267.469 108.914 li
59.7703 108.914 li
59.7703 108.914 62.9832 112.416 61.7093 112.964 cv
cp
f
110.439 87.865 mo
119.875 87.865 li
119.875 88.7228 li
110.439 88.7228 li
110.439 87.865 li
cp
125.557 88.7228 mo
125.557 89.5806 li
116.336 95.156 li
116.336 94.2983 li
125.557 88.7228 li
cp
131.382 91.1909 mo
133.515 91.1909 li
133.515 91.8628 li
131.382 91.8628 li
131.382 91.1909 li
cp
134.367 91.1909 mo
136.5 91.1909 li
136.5 91.8628 li
134.367 91.8628 li
134.367 91.1909 li
cp
137.353 91.1909 mo
137.679 91.1909 li
139.486 91.1909 li
139.486 91.8628 li
137.449 91.8628 li
137.353 91.8628 li
137.353 91.1909 li
cp
140.338 91.1909 mo
142.472 91.1909 li
142.472 91.8628 li
140.338 91.8628 li
140.338 91.1909 li
cp
142.779 84.9626 mo
144.9 84.9626 li
145.517 84.9626 146.017 85.4624 146.017 86.0791 cv
146.017 86.6956 145.517 87.1954 144.9 87.1954 cv
142.779 87.1954 li
142.163 87.1954 141.663 86.6956 141.663 86.0791 cv
141.663 85.4624 142.163 84.9626 142.779 84.9626 cv
cp
146.31 91.1909 mo
148.443 91.1909 li
148.443 91.8628 li
146.31 91.8628 li
146.31 91.1909 li
cp
147.926 84.9626 mo
150.047 84.9626 li
150.663 84.9626 151.163 85.4624 151.163 86.0791 cv
151.163 86.6956 150.663 87.1954 150.047 87.1954 cv
147.926 87.1954 li
147.309 87.1954 146.809 86.6956 146.809 86.0791 cv
146.809 85.4624 147.309 84.9626 147.926 84.9626 cv
cp
151.428 91.8628 mo
149.295 91.8628 li
149.295 91.1909 li
151.428 91.1909 li
151.428 91.8628 li
cp
153.072 84.9626 mo
155.193 84.9626 li
155.81 84.9626 156.31 85.4624 156.31 86.0791 cv
156.31 86.6956 155.81 87.1954 155.193 87.1954 cv
153.072 87.1954 li
152.456 87.1954 151.956 86.6956 151.956 86.0791 cv
151.956 85.4624 152.456 84.9626 153.072 84.9626 cv
cp
156.222 79.2874 mo
162.589 79.2874 li
162.589 82.7184 li
156.222 82.7184 li
156.222 79.2874 li
cp
163.365 84.9626 mo
165.487 84.9626 li
166.103 84.9626 166.603 85.4624 166.603 86.0791 cv
166.603 86.6956 166.103 87.1954 165.487 87.1954 cv
163.365 87.1954 li
162.749 87.1954 162.249 86.6956 162.249 86.0791 cv
162.249 85.4624 162.749 84.9626 163.365 84.9626 cv
cp
163.151 79.2874 mo
169.237 79.2874 li
169.237 82.7184 li
163.151 82.7184 li
163.151 79.2874 li
cp
169.342 91.8628 mo
167.209 91.8628 li
167.209 91.1909 li
169.342 91.1909 li
169.342 91.8628 li
cp
169.799 79.2874 mo
177.171 79.2874 li
177.171 82.7184 li
169.799 82.7184 li
169.799 79.2874 li
cp
178.298 91.1909 mo
178.298 91.8628 li
176.165 91.8628 li
176.165 91.1909 li
178.298 91.1909 li
cp
178.773 84.9626 mo
180.894 84.9626 li
181.51 84.9626 182.01 85.4624 182.01 86.0791 cv
182.01 86.6956 181.51 87.1954 180.894 87.1954 cv
178.773 87.1954 li
178.156 87.1954 177.656 86.6956 177.656 86.0791 cv
177.656 85.4624 178.156 84.9626 178.773 84.9626 cv
cp
177.733 79.2874 mo
185.106 79.2874 li
185.106 82.7184 li
177.733 82.7184 li
177.733 79.2874 li
cp
185.667 79.2874 mo
192.397 79.2874 li
192.397 82.7184 li
185.667 82.7184 li
185.667 79.2874 li
cp
188.524 67.7638 mo
192.679 66.4425 li
197.416 68.0727 li
197.566 69.1345 li
188.331 69.1345 li
188.524 67.7638 li
cp
188.919 64.9673 mo
196.749 64.9673 li
192.671 66.2642 li
189.082 65.0293 li
189.042 65.1911 li
192.406 66.3486 li
188.551 67.5745 li
188.919 64.9673 li
cp
189.309 62.2121 mo
192.631 63.3554 li
188.953 64.7266 li
189.309 62.2121 li
cp
189.355 61.8827 mo
196.541 61.8827 li
196.543 61.897 li
192.876 63.2642 li
189.332 62.0447 li
189.355 61.8827 li
cp
189.717 59.3236 mo
192.974 60.5117 li
189.403 61.5423 li
189.717 59.3236 li
cp
189.756 59.0483 mo
189.98 59.0483 li
189.922 59.0709 li
189.962 59.2328 li
190.438 59.0483 li
195.926 59.0483 li
196.153 59.1364 li
196.215 59.5759 li
193.244 60.4337 li
189.741 59.1558 li
189.756 59.0483 li
cp
190.121 56.4639 mo
195.776 56.4639 li
195.821 56.7822 li
193.182 57.8061 li
190.239 56.6644 li
190.199 56.8263 li
192.953 57.8948 li
190.41 58.8815 li
189.779 58.8815 li
190.121 56.4639 li
cp
190.465 54.0267 mo
195.431 54.0267 li
195.752 56.2971 li
190.145 56.2971 li
190.465 54.0267 li
cp
195.496 58.8815 mo
190.867 58.8815 li
193.182 57.9835 li
195.496 58.8815 li
cp
196.117 58.8815 mo
195.954 58.8815 li
193.41 57.8948 li
195.844 56.9504 li
196.117 58.8815 li
cp
196.275 61.716 mo
189.433 61.716 li
193.253 60.6134 li
196.275 61.716 li
cp
196.505 61.6233 mo
193.523 60.5354 li
196.24 59.751 li
196.505 61.6233 li
cp
196.831 64.8006 mo
189.233 64.8006 li
192.88 63.4409 li
196.831 64.8006 li
cp
196.934 64.6603 mo
193.125 63.3496 li
196.567 62.0662 li
196.934 64.6603 li
cp
197.39 67.888 mo
192.944 66.3582 li
196.992 65.0709 li
197.39 67.888 li
cp
201.684 79.2874 mo
201.684 82.7184 li
192.958 82.7184 li
192.958 79.2874 li
201.684 79.2874 li
cp
202.597 86.0791 mo
202.597 86.6956 202.097 87.1954 201.48 87.1954 cv
199.359 87.1954 li
198.743 87.1954 198.243 86.6956 198.243 86.0791 cv
198.243 85.4624 198.743 84.9626 199.359 84.9626 cv
201.48 84.9626 li
202.097 84.9626 202.597 85.4624 202.597 86.0791 cv
cp
203.035 91.1909 mo
205.169 91.1909 li
205.169 91.8628 li
203.035 91.8628 li
203.035 91.1909 li
cp
204.506 84.9626 mo
206.627 84.9626 li
207.243 84.9626 207.743 85.4624 207.743 86.0791 cv
207.743 86.6956 207.243 87.1954 206.627 87.1954 cv
204.506 87.1954 li
203.889 87.1954 203.389 86.6956 203.389 86.0791 cv
203.389 85.4624 203.889 84.9626 204.506 84.9626 cv
cp
208.154 91.8628 mo
206.021 91.8628 li
206.021 91.1909 li
208.154 91.1909 li
208.154 91.8628 li
cp
209.652 84.9626 mo
211.773 84.9626 li
212.39 84.9626 212.89 85.4624 212.89 86.0791 cv
212.89 86.6956 212.39 87.1954 211.773 87.1954 cv
209.652 87.1954 li
209.036 87.1954 208.536 86.6956 208.536 86.0791 cv
208.536 85.4624 209.036 84.9626 209.652 84.9626 cv
cp
214.799 84.9626 mo
216.92 84.9626 li
217.537 84.9626 218.036 85.4624 218.036 86.0791 cv
218.036 86.6956 217.537 87.1954 216.92 87.1954 cv
214.799 87.1954 li
214.182 87.1954 213.682 86.6956 213.682 86.0791 cv
213.682 85.4624 214.182 84.9626 214.799 84.9626 cv
cp
200.05 91.8628 mo
200.05 91.1909 li
202.183 91.1909 li
202.183 91.8628 li
200.05 91.8628 li
cp
190.241 91.1909 mo
190.241 91.8628 li
188.108 91.8628 li
188.108 91.1909 li
190.241 91.1909 li
cp
191.187 87.1954 mo
189.066 87.1954 li
188.449 87.1954 187.95 86.6956 187.95 86.0791 cv
187.95 85.4624 188.449 84.9626 189.066 84.9626 cv
191.187 84.9626 li
191.804 84.9626 192.303 85.4624 192.303 86.0791 cv
192.303 86.6956 191.804 87.1954 191.187 87.1954 cv
cp
193.226 91.1909 mo
193.226 91.8628 li
191.093 91.8628 li
191.093 91.1909 li
193.226 91.1909 li
cp
196.212 91.1909 mo
196.212 91.8628 li
194.079 91.8628 li
194.079 91.1909 li
196.212 91.1909 li
cp
199.197 91.1909 mo
199.197 91.8628 li
197.064 91.8628 li
197.064 91.1909 li
199.197 91.1909 li
cp
196.334 87.1954 mo
194.213 87.1954 li
193.596 87.1954 193.096 86.6956 193.096 86.0791 cv
193.096 85.4624 193.596 84.9626 194.213 84.9626 cv
196.334 84.9626 li
196.95 84.9626 197.45 85.4624 197.45 86.0791 cv
197.45 86.6956 196.95 87.1954 196.334 87.1954 cv
cp
184.27 91.1909 mo
184.27 91.8628 li
182.136 91.8628 li
182.136 91.1909 li
184.27 91.1909 li
cp
187.255 91.1909 mo
187.255 91.8628 li
185.122 91.8628 li
185.122 91.1909 li
187.255 91.1909 li
cp
186.04 87.1954 mo
183.919 87.1954 li
183.303 87.1954 182.803 86.6956 182.803 86.0791 cv
182.803 85.4624 183.303 84.9626 183.919 84.9626 cv
186.04 84.9626 li
186.657 84.9626 187.157 85.4624 187.157 86.0791 cv
187.157 86.6956 186.657 87.1954 186.04 87.1954 cv
cp
179.151 91.8628 mo
179.151 91.1909 li
181.284 91.1909 li
181.284 91.8628 li
179.151 91.8628 li
cp
173.18 91.8628 mo
173.18 91.1909 li
175.313 91.1909 li
175.313 91.8628 li
173.18 91.8628 li
cp
170.194 91.8628 mo
170.194 91.1909 li
172.327 91.1909 li
172.327 91.8628 li
170.194 91.8628 li
cp
164.223 91.8628 mo
164.223 91.1909 li
166.356 91.1909 li
166.356 91.8628 li
164.223 91.8628 li
cp
157.399 91.1909 mo
157.399 91.8628 li
155.266 91.8628 li
155.266 91.1909 li
157.399 91.1909 li
cp
160.385 91.1909 mo
160.385 91.8628 li
158.252 91.8628 li
158.252 91.1909 li
160.385 91.1909 li
cp
163.371 91.1909 mo
163.371 91.8628 li
161.237 91.8628 li
161.237 91.1909 li
163.371 91.1909 li
cp
160.34 87.1954 mo
158.219 87.1954 li
157.602 87.1954 157.103 86.6956 157.103 86.0791 cv
157.103 85.4624 157.602 84.9626 158.219 84.9626 cv
160.34 84.9626 li
160.957 84.9626 161.456 85.4624 161.456 86.0791 cv
161.456 86.6956 160.957 87.1954 160.34 87.1954 cv
cp
152.281 91.8628 mo
152.281 91.1909 li
154.414 91.1909 li
154.414 91.8628 li
152.281 91.8628 li
cp
143.324 91.8628 mo
143.324 91.1909 li
145.457 91.1909 li
145.457 91.8628 li
143.324 91.8628 li
cp
264.393 93.7213 mo
264.393 96.2122 li
263.951 96.2122 263.459 96.2122 262.932 96.2122 cv
264.393 93.7213 li
cp
71.3007 104.318 mo
68.0316 101.785 li
71.8782 97.288 li
75.1473 99.8211 li
71.3007 104.318 li
cp
198.665 51.0243 mo
199.612 49.8148 li
200.698 51.3283 li
200.872 53.4871 li
198.467 53.4871 li
198.665 51.0243 li
cp
198.858 48.617 mo
200.435 48.617 li
199.61 49.6621 li
198.889 48.6645 li
198.875 48.7895 li
199.554 49.734 li
198.679 50.8421 li
198.858 48.617 li
cp
199.01 46.7244 mo
199.609 47.4617 li
198.873 48.4349 li
199.01 46.7244 li
cp
199.026 46.5233 mo
200.313 46.5233 li
200.313 46.5319 li
199.656 47.4005 li
199.018 46.6216 li
199.026 46.5233 li
cp
199.139 45.109 mo
199.674 45.7347 li
199.042 46.3202 li
199.139 45.109 li
cp
199.151 44.9709 mo
199.187 44.9709 li
199.177 44.9822 li
199.181 45.0632 li
199.261 44.9709 li
200.153 44.9709 li
200.192 45.0149 li
200.21 45.2377 li
199.72 45.6921 li
199.146 45.0245 li
199.151 44.9709 li
cp
199.304 43.0555 mo
200.034 43.0555 li
200.104 43.9221 li
199.706 44.3776 li
199.261 43.8716 li
199.253 43.9412 li
199.67 44.4184 li
199.259 44.8885 li
199.157 44.8885 li
199.304 43.0555 li
cp
200.081 44.8885 mo
199.333 44.8885 li
199.706 44.4595 li
200.081 44.8885 li
cp
200.182 44.8885 mo
200.155 44.8885 li
199.742 44.4184 li
200.11 43.9949 li
200.182 44.8885 li
cp
200.262 46.4232 mo
199.044 46.4232 li
199.721 45.7907 li
200.262 46.4232 li
cp
200.3 46.3682 mo
199.767 45.7477 li
200.217 45.3283 li
200.3 46.3682 li
cp
200.446 48.4906 mo
198.926 48.4906 li
199.656 47.5195 li
200.446 48.4906 li
cp
200.462 48.3856 mo
199.703 47.4578 li
200.322 46.6347 li
200.462 48.3856 li
cp
200.684 51.1456 mo
199.668 49.7423 li
200.487 48.6965 li
200.684 51.1456 li
cp
267.625 96.2122 mo
267.625 96.2122 267.166 96.2122 266.33 96.2122 cv
266.33 88.8699 li
266.33 88.335 265.897 87.9015 265.362 87.9015 cv
264.827 87.9015 264.393 88.335 264.393 88.8699 cv
264.393 91.8528 li
261.837 96.2122 li
261.731 96.2122 261.611 96.2122 261.502 96.2122 cv
261.502 93.1998 li
261.502 92.7909 261.171 92.4594 260.762 92.4594 cv
260.353 92.4594 260.021 92.7909 260.021 93.1998 cv
260.021 96.2122 li
259.636 96.2122 259.25 96.2122 258.839 96.2122 cv
258.839 93.1998 li
258.839 92.7909 258.508 92.4594 258.099 92.4594 cv
257.69 92.4594 257.358 92.7909 257.358 93.1998 cv
257.358 96.2122 li
255.436 96.2122 253.283 96.2122 250.92 96.2122 cv
246.733 91.6615 li
238.354 91.6615 li
238.354 85.2917 li
239.426 85.2917 li
239.426 84.2195 li
238.354 84.2195 li
238.354 81.8606 li
238.354 81.6238 238.161 81.4317 237.925 81.4317 cv
232.564 81.4317 li
232.327 81.4317 232.135 81.6238 232.135 81.8606 cv
232.135 84.2195 li
230.634 84.2195 li
230.634 85.2917 li
231.706 85.2917 li
231.706 91.6615 li
231.24 91.6615 li
228.626 79.3159 li
228.547 78.9442 228.28 78.644 228.029 78.644 cv
227.631 78.644 li
227.631 75.8563 li
231.277 75.8563 li
231.277 73.2829 li
227.631 73.2829 li
227.631 71.5674 li
225.701 71.5674 li
225.701 70.9241 li
226.881 70.9241 li
227.769 70.9241 228.489 70.204 228.489 69.3158 cv
228.489 68.4276 227.769 67.7075 226.881 67.7075 cv
224.522 67.7075 li
223.634 67.7075 222.914 68.4276 222.914 69.3158 cv
222.914 70.1673 223.578 70.8571 224.415 70.9133 cv
224.415 71.5674 li
221.198 71.5674 li
221.198 78.644 li
215.184 78.644 li
215.185 78.6167 215.194 78.5905 215.194 78.5631 cv
215.194 70.7587 li
215.194 69.9961 214.234 69.423 213.049 69.423 cv
208.546 69.423 li
207.362 69.423 206.105 69.9961 205.711 70.7587 cv
201.674 78.5631 li
201.66 78.5905 201.655 78.6167 201.642 78.644 cv
200.473 78.644 li
200.473 73.8571 li
200.473 73.6202 200.281 73.4282 200.045 73.4282 cv
199.157 73.4282 li
199.157 69.1345 li
198.645 69.1345 li
196.51 54.0267 li
202.395 54.0267 li
202.395 53.4871 li
201.145 53.4871 li
200.188 43.0555 li
205.812 43.0555 li
205.812 42.6958 li
200.207 42.6958 li
199.877 40.7174 li
198.888 42.6958 li
197.539 42.6958 li
197.539 43.0555 li
199.151 43.0555 li
198.194 53.4871 li
196.46 53.4871 li
196.46 52.0483 li
196.46 50.0616 194.849 48.4511 192.862 48.4511 cv
190.876 48.4511 189.265 50.0616 189.265 52.0483 cv
189.265 53.4871 li
188.007 53.4871 li
188.007 54.0267 li
189.386 54.0267 li
188.827 57.9835 li
184.702 57.9835 li
184.702 58.7581 li
185.039 58.8828 li
188.504 60.2689 li
188.344 61.4008 li
183.416 61.4008 li
183.416 62.2925 li
183.441 62.3 li
188.007 63.7842 li
187.251 69.1345 li
184.949 69.1345 li
184.949 73.4282 li
182.599 73.4282 li
182.599 72.4252 li
183.456 72.4252 li
183.456 68.9941 li
181.526 68.9941 li
181.526 70.2808 li
181.526 72.4252 li
181.526 73.4282 li
180.022 73.4282 li
180.022 71.2761 li
180.585 71.2761 li
180.585 69.0228 li
179.318 69.0228 li
179.318 69.8678 li
179.318 71.2761 li
179.318 73.4282 li
177.613 73.4282 li
177.613 70.9241 li
178.427 70.9241 li
178.427 67.6655 li
176.594 67.6655 li
176.594 68.8875 li
176.594 70.9241 li
176.594 73.4282 li
173.107 73.4282 li
173.107 60.1156 li
172.793 60.1156 li
172.793 73.4282 li
168.96 73.4282 li
168.96 55.9415 li
168.646 55.9415 li
168.646 73.4282 li
165.014 73.4282 li
165.014 58.4865 li
164.371 58.4865 li
162.895 73.4282 li
159.301 73.4282 li
159.064 73.4282 158.872 73.6203 158.872 73.8571 cv
158.872 78.644 li
146.594 78.644 li
146.343 78.644 146.076 78.9442 145.998 79.3159 cv
145.05 83.7906 li
140.64 83.7906 li
140.403 83.7906 140.151 83.9661 140.076 84.1834 cv
137.974 90.3279 li
129.632 90.3279 li
129.632 88.7942 li
129.632 87.6099 128.672 86.6498 127.487 86.6498 cv
122.873 86.6498 li
122.734 86.0737 122.386 85.4746 122.014 84.8613 cv
121.242 83.5901 120.565 82.7008 119.396 82.9324 cv
117.417 83.3243 li
117.058 83.3955 116.786 83.5451 116.564 83.7661 cv
114.748 82.879 li
114.593 83.1963 li
111.569 81.7189 li
111.492 81.8774 li
114.516 83.3548 li
114.387 83.619 li
116.101 84.4563 li
115.957 84.7485 115.827 85.0863 115.689 85.477 cv
115.551 85.866 115.494 86.2627 115.497 86.6498 cv
111.476 86.6498 li
110.291 86.6498 109.331 87.6099 109.331 88.7942 cv
109.331 95.0845 li
109.331 95.4997 109.454 95.8839 109.659 96.2122 cv
108.707 96.2122 107.821 96.2122 107.031 96.2122 cv
106.657 96.2122 106.243 96.2005 105.799 96.1798 cv
105.642 93.5972 103.518 91.5451 100.896 91.5451 cv
85.0278 91.5451 li
83.828 91.5451 82.7387 91.9833 81.8863 92.6972 cv
62.291 89.1482 39.7334 84.3303 41.1206 85.3911 cv
45.3015 88.5883 52.1876 97.4419 59.3196 108.035 cv
77.2728 108.035 267.376 107.409 267.376 107.409 cv
268.071 102.083 li
268.071 102.083 268.167 95.6709 267.625 96.2122 cv
cp
f
360.297 205.725 mo
360.389 205.704 360.463 205.634 360.463 205.536 cv
360.463 205.291 li
361.042 205.245 362.065 205.034 362.6 204.918 cv
363.489 204.815 364.456 204.684 365.318 204.559 cv
365.318 205.381 li
365.395 205.381 li
365.395 205.536 li
365.395 205.634 365.469 205.704 365.561 205.725 cv
360.297 205.725 li
cp
360.296 216.489 mo
355.51 216.489 li
355.51 209.888 li
360.296 209.888 li
360.296 216.489 li
cp
355.145 205.536 mo
355.145 205.381 li
355.222 205.381 li
355.222 204.551 li
356.051 204.671 356.983 204.797 357.851 204.899 cv
358.346 205.009 359.441 205.241 360.052 205.291 cv
360.052 205.536 li
360.052 205.634 360.126 205.704 360.218 205.725 cv
354.979 205.725 li
355.071 205.704 355.145 205.634 355.145 205.536 cv
cp
353.914 216.489 mo
349.128 216.489 li
349.128 209.888 li
353.914 209.888 li
353.914 216.489 li
cp
343.769 205.725 mo
343.861 205.704 343.935 205.634 343.935 205.536 cv
343.935 205.291 li
344.514 205.245 345.537 205.034 346.072 204.918 cv
346.961 204.815 347.928 204.684 348.79 204.559 cv
348.79 205.381 li
348.867 205.381 li
348.867 205.536 li
348.867 205.634 348.941 205.704 349.033 205.725 cv
343.769 205.725 li
cp
347.532 216.489 mo
342.746 216.489 li
342.746 209.888 li
347.532 209.888 li
347.532 216.489 li
cp
341.151 216.489 mo
336.364 216.489 li
336.364 209.888 li
341.151 209.888 li
341.151 216.489 li
cp
334.769 216.489 mo
329.983 216.489 li
329.983 209.888 li
334.769 209.888 li
334.769 216.489 li
cp
327.557 205.536 mo
327.557 205.291 li
328.137 205.245 329.159 205.034 329.694 204.918 cv
330.583 204.815 331.55 204.684 332.412 204.559 cv
332.412 205.381 li
332.49 205.381 li
332.49 205.536 li
332.49 205.634 332.564 205.704 332.656 205.725 cv
327.391 205.725 li
327.483 205.704 327.557 205.634 327.557 205.536 cv
cp
338.617 205.536 mo
338.617 205.381 li
338.694 205.381 li
338.694 204.551 li
339.523 204.671 340.455 204.797 341.323 204.899 cv
341.818 205.009 342.914 205.241 343.524 205.291 cv
343.524 205.536 li
343.524 205.634 343.598 205.704 343.69 205.725 cv
338.451 205.725 li
338.543 205.704 338.617 205.634 338.617 205.536 cv
cp
322.073 205.725 mo
322.165 205.704 322.239 205.634 322.239 205.536 cv
322.239 205.381 li
322.317 205.381 li
322.317 204.551 li
323.145 204.671 324.077 204.797 324.946 204.899 cv
325.44 205.009 326.536 205.241 327.146 205.291 cv
327.146 205.536 li
327.146 205.634 327.22 205.704 327.312 205.725 cv
322.073 205.725 li
cp
326.408 220.412 mo
326.239 220.526 326.1 220.681 325.994 220.857 cv
325.994 208.473 li
326.408 208.473 li
326.408 220.412 li
cp
324.399 215.77 mo
322.405 215.77 li
322.405 210.186 li
324.399 210.186 li
324.399 215.77 li
cp
320.61 215.77 mo
318.615 215.77 li
318.615 210.186 li
320.61 210.186 li
320.61 215.77 li
cp
316.82 215.77 mo
314.826 215.77 li
314.826 210.186 li
316.82 210.186 li
316.82 215.77 li
cp
313.031 215.77 mo
311.037 215.77 li
311.037 210.186 li
313.031 210.186 li
313.031 215.77 li
cp
309.242 215.77 mo
307.248 215.77 li
307.248 210.186 li
309.242 210.186 li
309.242 215.77 li
cp
305.652 218.275 mo
305.652 219.055 305.02 219.687 304.24 219.687 cv
270.236 219.687 li
269.456 219.687 268.824 219.055 268.824 218.275 cv
268.824 218.04 li
268.824 217.26 269.456 216.627 270.236 216.627 cv
304.24 216.627 li
305.02 216.627 305.652 217.26 305.652 218.04 cv
305.652 218.275 li
cp
266.395 218.158 mo
265.869 218.158 265.443 217.732 265.443 217.206 cv
265.443 216.681 265.869 216.255 266.395 216.255 cv
266.92 216.255 267.346 216.681 267.346 217.206 cv
267.346 217.732 266.92 218.158 266.395 218.158 cv
cp
262.071 218.158 mo
261.546 218.158 261.119 217.732 261.119 217.206 cv
261.119 216.681 261.546 216.255 262.071 216.255 cv
262.597 216.255 263.023 216.681 263.023 217.206 cv
263.023 217.732 262.597 218.158 262.071 218.158 cv
cp
257.747 218.158 mo
257.222 218.158 256.796 217.732 256.796 217.206 cv
256.796 216.681 257.222 216.255 257.747 216.255 cv
258.273 216.255 258.699 216.681 258.699 217.206 cv
258.699 217.732 258.273 218.158 257.747 218.158 cv
cp
253.423 218.158 mo
252.898 218.158 252.472 217.732 252.472 217.206 cv
252.472 216.681 252.898 216.255 253.423 216.255 cv
253.949 216.255 254.375 216.681 254.375 217.206 cv
254.375 217.732 253.949 218.158 253.423 218.158 cv
cp
249.1 218.158 mo
248.574 218.158 248.148 217.732 248.148 217.206 cv
248.148 216.681 248.574 216.255 249.1 216.255 cv
249.625 216.255 250.051 216.681 250.051 217.206 cv
250.051 217.732 249.625 218.158 249.1 218.158 cv
cp
244.776 218.158 mo
244.25 218.158 243.824 217.732 243.824 217.206 cv
243.824 216.681 244.25 216.255 244.776 216.255 cv
245.301 216.255 245.727 216.681 245.727 217.206 cv
245.727 217.732 245.301 218.158 244.776 218.158 cv
cp
240.452 218.158 mo
239.926 218.158 239.5 217.732 239.5 217.206 cv
239.5 216.681 239.926 216.255 240.452 216.255 cv
240.978 216.255 241.404 216.681 241.404 217.206 cv
241.404 217.732 240.978 218.158 240.452 218.158 cv
cp
236.128 218.158 mo
235.603 218.158 235.177 217.732 235.177 217.206 cv
235.177 216.681 235.603 216.255 236.128 216.255 cv
236.654 216.255 237.08 216.681 237.08 217.206 cv
237.08 217.732 236.654 218.158 236.128 218.158 cv
cp
231.804 218.158 mo
231.279 218.158 230.853 217.732 230.853 217.206 cv
230.853 216.681 231.279 216.255 231.804 216.255 cv
232.33 216.255 232.756 216.681 232.756 217.206 cv
232.756 217.732 232.33 218.158 231.804 218.158 cv
cp
227.481 218.158 mo
226.955 218.158 226.529 217.732 226.529 217.206 cv
226.529 216.681 226.955 216.255 227.481 216.255 cv
228.006 216.255 228.432 216.681 228.432 217.206 cv
228.432 217.732 228.006 218.158 227.481 218.158 cv
cp
223.157 218.158 mo
222.631 218.158 222.205 217.732 222.205 217.206 cv
222.205 216.681 222.631 216.255 223.157 216.255 cv
223.682 216.255 224.108 216.681 224.108 217.206 cv
224.108 217.732 223.682 218.158 223.157 218.158 cv
cp
217.306 213.177 mo
217.306 210.186 li
269.026 210.186 li
269.026 213.177 li
217.306 213.177 li
cp
209.917 205.725 mo
210.124 205.711 210.29 205.543 210.29 205.332 cv
210.29 205.284 210.278 205.239 210.262 205.197 cv
211.526 204.827 li
212.114 204.841 212.732 204.856 213.358 204.87 cv
213.201 204.944 li
213.118 204.944 213.05 205.012 213.05 205.095 cv
213.05 205.178 213.118 205.246 213.201 205.246 cv
217.547 205.246 li
217.541 205.275 217.53 205.301 217.53 205.332 cv
217.53 205.543 217.695 205.711 217.903 205.725 cv
209.917 205.725 li
cp
214.822 213.23 mo
204.92 213.23 li
204.92 210.755 li
214.822 210.755 li
214.822 213.23 li
cp
213.279 218.117 mo
212.754 218.117 212.328 217.691 212.328 217.166 cv
212.328 216.64 212.754 216.214 213.279 216.214 cv
213.805 216.214 214.231 216.64 214.231 217.166 cv
214.231 217.691 213.805 218.117 213.279 218.117 cv
cp
213.279 222.106 mo
212.754 222.106 212.328 221.68 212.328 221.154 cv
212.328 220.629 212.754 220.203 213.279 220.203 cv
213.805 220.203 214.231 220.629 214.231 221.154 cv
214.231 221.68 213.805 222.106 213.279 222.106 cv
cp
208.956 218.117 mo
208.43 218.117 208.004 217.691 208.004 217.166 cv
208.004 216.64 208.43 216.214 208.956 216.214 cv
209.481 216.214 209.907 216.64 209.907 217.166 cv
209.907 217.691 209.481 218.117 208.956 218.117 cv
cp
208.956 222.106 mo
208.43 222.106 208.004 221.68 208.004 221.154 cv
208.004 220.629 208.43 220.203 208.956 220.203 cv
209.481 220.203 209.907 220.629 209.907 221.154 cv
209.907 221.68 209.481 222.106 208.956 222.106 cv
cp
204.632 218.117 mo
204.106 218.117 203.68 217.691 203.68 217.166 cv
203.68 216.64 204.106 216.214 204.632 216.214 cv
205.157 216.214 205.583 216.64 205.583 217.166 cv
205.583 217.691 205.157 218.117 204.632 218.117 cv
cp
204.632 222.106 mo
204.106 222.106 203.68 221.68 203.68 221.154 cv
203.68 220.629 204.106 220.203 204.632 220.203 cv
205.157 220.203 205.583 220.629 205.583 221.154 cv
205.583 221.68 205.157 222.106 204.632 222.106 cv
cp
200.308 218.117 mo
199.782 218.117 199.356 217.691 199.356 217.166 cv
199.356 216.64 199.782 216.214 200.308 216.214 cv
200.833 216.214 201.26 216.64 201.26 217.166 cv
201.26 217.691 200.833 218.117 200.308 218.117 cv
cp
200.308 222.106 mo
199.782 222.106 199.356 221.68 199.356 221.154 cv
199.356 220.629 199.782 220.203 200.308 220.203 cv
200.833 220.203 201.26 220.629 201.26 221.154 cv
201.26 221.68 200.833 222.106 200.308 222.106 cv
cp
195.984 218.117 mo
195.459 218.117 195.033 217.691 195.033 217.166 cv
195.033 216.64 195.459 216.214 195.984 216.214 cv
196.51 216.214 196.936 216.64 196.936 217.166 cv
196.936 217.691 196.51 218.117 195.984 218.117 cv
cp
195.984 222.106 mo
195.459 222.106 195.033 221.68 195.033 221.154 cv
195.033 220.629 195.459 220.203 195.984 220.203 cv
196.51 220.203 196.936 220.629 196.936 221.154 cv
196.936 221.68 196.51 222.106 195.984 222.106 cv
cp
194.194 210.755 mo
204.095 210.755 li
204.095 213.23 li
194.194 213.23 li
194.194 210.755 li
cp
193.368 213.23 mo
183.467 213.23 li
183.467 210.755 li
193.368 210.755 li
193.368 213.23 li
cp
191.66 218.117 mo
191.135 218.117 190.709 217.691 190.709 217.166 cv
190.709 216.64 191.135 216.214 191.66 216.214 cv
192.186 216.214 192.612 216.64 192.612 217.166 cv
192.612 217.691 192.186 218.117 191.66 218.117 cv
cp
191.66 222.106 mo
191.135 222.106 190.709 221.68 190.709 221.154 cv
190.709 220.629 191.135 220.203 191.66 220.203 cv
192.186 220.203 192.612 220.629 192.612 221.154 cv
192.612 221.68 192.186 222.106 191.66 222.106 cv
cp
187.337 218.117 mo
186.811 218.117 186.385 217.691 186.385 217.166 cv
186.385 216.64 186.811 216.214 187.337 216.214 cv
187.862 216.214 188.288 216.64 188.288 217.166 cv
188.288 217.691 187.862 218.117 187.337 218.117 cv
cp
187.337 222.106 mo
186.811 222.106 186.385 221.68 186.385 221.154 cv
186.385 220.629 186.811 220.203 187.337 220.203 cv
187.862 220.203 188.288 220.629 188.288 221.154 cv
188.288 221.68 187.862 222.106 187.337 222.106 cv
cp
183.013 218.117 mo
182.487 218.117 182.061 217.691 182.061 217.166 cv
182.061 216.64 182.487 216.214 183.013 216.214 cv
183.538 216.214 183.964 216.64 183.964 217.166 cv
183.964 217.691 183.538 218.117 183.013 218.117 cv
cp
183.013 222.106 mo
182.487 222.106 182.061 221.68 182.061 221.154 cv
182.061 220.629 182.487 220.203 183.013 220.203 cv
183.538 220.203 183.964 220.629 183.964 221.154 cv
183.964 221.68 183.538 222.106 183.013 222.106 cv
cp
178.689 218.117 mo
178.163 218.117 177.737 217.691 177.737 217.166 cv
177.737 216.64 178.163 216.214 178.689 216.214 cv
179.215 216.214 179.641 216.64 179.641 217.166 cv
179.641 217.691 179.215 218.117 178.689 218.117 cv
cp
178.689 222.106 mo
178.163 222.106 177.737 221.68 177.737 221.154 cv
177.737 220.629 178.163 220.203 178.689 220.203 cv
179.215 220.203 179.641 220.629 179.641 221.154 cv
179.641 221.68 179.215 222.106 178.689 222.106 cv
cp
174.365 218.117 mo
173.84 218.117 173.414 217.691 173.414 217.166 cv
173.414 216.64 173.84 216.214 174.365 216.214 cv
174.891 216.214 175.317 216.64 175.317 217.166 cv
175.317 217.691 174.891 218.117 174.365 218.117 cv
cp
174.365 222.106 mo
173.84 222.106 173.414 221.68 173.414 221.154 cv
173.414 220.629 173.84 220.203 174.365 220.203 cv
174.891 220.203 175.317 220.629 175.317 221.154 cv
175.317 221.68 174.891 222.106 174.365 222.106 cv
cp
172.74 210.755 mo
182.642 210.755 li
182.642 213.23 li
172.74 213.23 li
172.74 210.755 li
cp
172.328 213.23 mo
162.426 213.23 li
162.426 210.755 li
172.328 210.755 li
172.328 213.23 li
cp
170.041 218.117 mo
169.516 218.117 169.09 217.691 169.09 217.166 cv
169.09 216.64 169.516 216.214 170.041 216.214 cv
170.567 216.214 170.993 216.64 170.993 217.166 cv
170.993 217.691 170.567 218.117 170.041 218.117 cv
cp
170.041 222.106 mo
169.516 222.106 169.09 221.68 169.09 221.154 cv
169.09 220.629 169.516 220.203 170.041 220.203 cv
170.567 220.203 170.993 220.629 170.993 221.154 cv
170.993 221.68 170.567 222.106 170.041 222.106 cv
cp
166.551 219.714 mo
166.551 220.753 165.709 221.595 164.67 221.595 cv
82.0936 221.595 li
81.0548 221.595 80.2126 220.753 80.2126 219.714 cv
80.2126 219.4 li
80.2126 218.361 81.0548 217.519 82.0936 217.519 cv
164.67 217.519 li
165.709 217.519 166.551 218.361 166.551 219.4 cv
166.551 219.714 li
cp
63.7906 211.964 mo
63.7906 211.769 li
63.7906 211.123 64.3144 210.599 64.9605 210.599 cv
116.322 210.599 li
116.968 210.599 117.492 211.123 117.492 211.769 cv
117.492 211.964 li
117.492 212.61 116.968 213.134 116.322 213.134 cv
64.9605 213.134 li
64.3144 213.134 63.7906 212.61 63.7906 211.964 cv
cp
64.0276 205.7 mo
64.0651 205.715 64.1064 205.722 64.1485 205.725 cv
63.9067 205.725 li
63.9487 205.722 63.99 205.715 64.0276 205.7 cv
cp
64.7571 205.332 mo
64.7571 205.284 64.7454 205.239 64.7299 205.197 cv
65.9929 204.827 li
66.5812 204.841 67.1989 204.856 67.8252 204.87 cv
67.6687 204.944 li
67.5852 204.944 67.5176 205.012 67.5176 205.095 cv
67.5176 205.179 67.5852 205.246 67.6687 205.246 cv
72.0144 205.246 li
72.0079 205.275 71.9971 205.301 71.9971 205.332 cv
71.9971 205.543 72.1625 205.711 72.37 205.725 cv
64.3842 205.725 li
64.5917 205.711 64.7571 205.543 64.7571 205.332 cv
cp
72.7267 205.7 mo
72.7642 205.715 72.8055 205.722 72.8476 205.725 cv
72.6058 205.725 li
72.6479 205.722 72.6891 205.715 72.7267 205.7 cv
cp
105.608 205.7 mo
105.646 205.715 105.687 205.722 105.729 205.725 cv
105.487 205.725 li
105.529 205.722 105.571 205.715 105.608 205.7 cv
cp
106.338 205.332 mo
106.338 205.284 106.326 205.239 106.311 205.197 cv
107.574 204.827 li
108.162 204.841 108.78 204.856 109.406 204.87 cv
109.249 204.944 li
109.166 204.944 109.098 205.012 109.098 205.095 cv
109.098 205.179 109.166 205.246 109.249 205.246 cv
113.595 205.246 li
113.589 205.275 113.578 205.301 113.578 205.332 cv
113.578 205.543 113.743 205.711 113.951 205.725 cv
105.965 205.725 li
106.172 205.711 106.338 205.543 106.338 205.332 cv
cp
114.307 205.7 mo
114.345 205.715 114.386 205.722 114.428 205.725 cv
114.187 205.725 li
114.229 205.722 114.27 205.715 114.307 205.7 cv
cp
126.399 205.7 mo
126.436 205.715 126.478 205.722 126.52 205.725 cv
126.278 205.725 li
126.32 205.722 126.361 205.715 126.399 205.7 cv
cp
127.128 205.332 mo
127.128 205.284 127.116 205.239 127.101 205.197 cv
128.364 204.827 li
128.952 204.841 129.57 204.856 130.196 204.87 cv
130.04 204.944 li
129.956 204.944 129.889 205.012 129.889 205.095 cv
129.889 205.179 129.956 205.246 130.04 205.246 cv
134.386 205.246 li
134.379 205.275 134.368 205.301 134.368 205.332 cv
134.368 205.543 134.534 205.711 134.741 205.725 cv
126.755 205.725 li
126.963 205.711 127.128 205.543 127.128 205.332 cv
cp
135.098 205.7 mo
135.135 205.715 135.177 205.722 135.219 205.725 cv
134.977 205.725 li
135.019 205.722 135.06 205.715 135.098 205.7 cv
cp
140.56 210.755 mo
150.462 210.755 li
150.462 213.23 li
140.56 213.23 li
140.56 210.755 li
cp
151.7 210.755 mo
161.601 210.755 li
161.601 213.23 li
151.7 213.23 li
151.7 210.755 li
cp
167.979 205.7 mo
168.017 205.715 168.058 205.722 168.1 205.725 cv
167.859 205.725 li
167.901 205.722 167.942 205.715 167.979 205.7 cv
cp
168.709 205.332 mo
168.709 205.284 168.697 205.239 168.682 205.197 cv
169.945 204.827 li
170.533 204.841 171.151 204.856 171.777 204.87 cv
171.621 204.944 li
171.537 204.944 171.469 205.012 171.469 205.095 cv
171.469 205.179 171.537 205.246 171.621 205.246 cv
175.966 205.246 li
175.96 205.275 175.949 205.301 175.949 205.332 cv
175.949 205.543 176.114 205.711 176.322 205.725 cv
168.336 205.725 li
168.544 205.711 168.709 205.543 168.709 205.332 cv
cp
176.679 205.7 mo
176.716 205.715 176.757 205.722 176.799 205.725 cv
176.558 205.725 li
176.6 205.722 176.641 205.715 176.679 205.7 cv
cp
188.77 205.7 mo
188.807 205.715 188.849 205.722 188.891 205.725 cv
188.649 205.725 li
188.691 205.722 188.732 205.715 188.77 205.7 cv
cp
189.499 205.332 mo
189.499 205.284 189.488 205.239 189.472 205.197 cv
190.735 204.827 li
191.323 204.841 191.941 204.856 192.567 204.87 cv
192.411 204.944 li
192.327 204.944 192.26 205.012 192.26 205.095 cv
192.26 205.179 192.327 205.246 192.411 205.246 cv
196.757 205.246 li
196.75 205.275 196.739 205.301 196.739 205.332 cv
196.739 205.543 196.905 205.711 197.112 205.725 cv
189.126 205.725 li
189.334 205.711 189.499 205.543 189.499 205.332 cv
cp
197.469 205.7 mo
197.506 205.715 197.548 205.722 197.59 205.725 cv
197.348 205.725 li
197.39 205.722 197.431 205.715 197.469 205.7 cv
cp
209.56 205.7 mo
209.598 205.715 209.639 205.722 209.681 205.725 cv
209.439 205.725 li
209.481 205.722 209.523 205.715 209.56 205.7 cv
cp
218.259 205.7 mo
218.297 205.715 218.338 205.722 218.38 205.725 cv
218.138 205.725 li
218.18 205.722 218.222 205.715 218.259 205.7 cv
cp
230.351 205.7 mo
230.388 205.715 230.429 205.722 230.471 205.725 cv
230.23 205.725 li
230.272 205.722 230.313 205.715 230.351 205.7 cv
cp
231.08 205.332 mo
231.08 205.284 231.068 205.239 231.053 205.197 cv
232.316 204.827 li
232.904 204.841 233.522 204.856 234.148 204.87 cv
233.992 204.944 li
233.908 204.944 233.841 205.012 233.841 205.095 cv
233.841 205.178 233.908 205.246 233.992 205.246 cv
238.337 205.246 li
238.331 205.275 238.32 205.301 238.32 205.332 cv
238.32 205.543 238.486 205.711 238.693 205.725 cv
230.707 205.725 li
230.915 205.711 231.08 205.543 231.08 205.332 cv
cp
239.05 205.7 mo
239.087 205.715 239.128 205.722 239.171 205.725 cv
238.929 205.725 li
238.971 205.722 239.012 205.715 239.05 205.7 cv
cp
269.288 211.158 mo
305.141 211.158 li
305.141 212.354 li
269.288 212.354 li
269.288 211.158 li
cp
269.288 209.863 mo
288.549 209.863 li
288.549 209.587 li
305.141 209.587 li
305.141 210.784 li
269.288 210.784 li
269.288 209.863 li
cp
371.354 222.381 mo
371.411 222.127 371.447 221.865 371.447 221.593 cv
371.447 208.473 li
371.404 208.449 371.365 208.434 371.324 208.413 cv
370.923 206.869 369.527 205.725 367.857 205.725 cv
365.64 205.725 li
365.732 205.704 365.806 205.634 365.806 205.536 cv
365.806 204.97 li
365.806 204.857 365.714 204.765 365.601 204.765 cv
365.561 204.765 365.53 204.788 365.498 204.808 cv
365.498 204.533 li
366.814 204.341 367.836 204.174 367.836 204.174 cv
367.892 204.174 367.938 204.128 367.938 204.071 cv
367.938 204.026 367.906 203.994 367.865 203.981 cv
367.865 203.031 li
367.695 203.031 li
367.395 203.969 li
362.542 203.969 li
362.131 203.423 361.46 203.035 360.67 202.935 cv
360.529 202.072 360.387 201.67 360.267 201.67 cv
360.147 201.67 360.005 202.072 359.864 202.935 cv
359.074 203.035 358.403 203.423 357.992 203.969 cv
353.309 203.969 li
353.009 203.031 li
352.839 203.031 li
352.839 203.969 li
352.756 203.969 li
352.699 203.969 352.653 204.015 352.653 204.071 cv
352.653 204.128 352.699 204.174 352.756 204.174 cv
352.756 204.174 353.751 204.336 355.042 204.525 cv
355.042 204.808 li
355.011 204.788 354.98 204.765 354.94 204.765 cv
354.826 204.765 354.734 204.857 354.734 204.97 cv
354.734 205.536 li
354.734 205.634 354.808 205.704 354.9 205.725 cv
349.112 205.725 li
349.204 205.704 349.278 205.634 349.278 205.536 cv
349.278 204.97 li
349.278 204.857 349.186 204.765 349.073 204.765 cv
349.033 204.765 349.002 204.788 348.97 204.808 cv
348.97 204.533 li
350.286 204.341 351.308 204.174 351.308 204.174 cv
351.365 204.174 351.411 204.128 351.411 204.071 cv
351.411 204.026 351.378 203.994 351.337 203.981 cv
351.337 203.031 li
351.167 203.031 li
350.867 203.969 li
346.014 203.969 li
345.603 203.423 344.933 203.035 344.142 202.935 cv
344.002 202.072 343.859 201.67 343.739 201.67 cv
343.619 201.67 343.477 202.072 343.336 202.935 cv
342.546 203.035 341.875 203.423 341.464 203.969 cv
336.781 203.969 li
336.481 203.031 li
336.311 203.031 li
336.311 203.969 li
336.228 203.969 li
336.171 203.969 336.125 204.015 336.125 204.071 cv
336.125 204.128 336.171 204.174 336.228 204.174 cv
336.228 204.174 337.224 204.336 338.515 204.525 cv
338.515 204.808 li
338.483 204.788 338.452 204.765 338.412 204.765 cv
338.298 204.765 338.206 204.857 338.206 204.97 cv
338.206 205.536 li
338.206 205.634 338.28 205.704 338.372 205.725 cv
332.734 205.725 li
332.826 205.704 332.901 205.634 332.901 205.536 cv
332.901 204.97 li
332.901 204.857 332.809 204.765 332.695 204.765 cv
332.655 204.765 332.624 204.788 332.592 204.808 cv
332.592 204.533 li
333.908 204.341 334.93 204.174 334.93 204.174 cv
334.987 204.174 335.033 204.128 335.033 204.071 cv
335.033 204.026 335 203.994 334.959 203.981 cv
334.959 203.031 li
334.789 203.031 li
334.489 203.969 li
329.637 203.969 li
329.225 203.423 328.555 203.035 327.765 202.935 cv
327.624 202.072 327.482 201.67 327.361 201.67 cv
327.241 201.67 327.099 202.072 326.958 202.935 cv
326.168 203.035 325.497 203.423 325.086 203.969 cv
320.403 203.969 li
320.103 203.031 li
319.933 203.031 li
319.933 203.969 li
319.85 203.969 li
319.794 203.969 319.748 204.015 319.748 204.071 cv
319.748 204.128 319.794 204.174 319.85 204.174 cv
319.85 204.174 320.846 204.336 322.137 204.525 cv
322.137 204.808 li
322.105 204.788 322.074 204.765 322.034 204.765 cv
321.92 204.765 321.828 204.857 321.828 204.97 cv
321.828 205.536 li
321.828 205.634 321.903 205.704 321.995 205.725 cv
287.951 205.725 li
287.951 200.093 li
264.701 200.093 li
264.701 193.917 li
256.404 193.917 li
256.404 194.28 li
252.048 194.28 li
252.048 194.734 li
256.404 194.734 li
256.404 195.292 li
251.173 195.292 li
251.173 196.541 li
256.404 200.754 li
256.404 205.725 li
239.406 205.725 li
239.614 205.711 239.779 205.543 239.779 205.332 cv
239.779 205.301 239.768 205.275 239.762 205.246 cv
243.022 205.246 li
243.106 205.246 243.174 205.178 243.174 205.095 cv
243.174 205.012 243.106 204.944 243.022 204.944 cv
243.022 204.944 242.911 204.91 242.731 204.856 cv
244.389 204.782 246.339 204.695 246.339 204.695 cv
246.348 204.653 246.342 204.603 246.313 204.548 cv
246.462 204.393 246.627 204.135 246.744 203.868 cv
247.768 201.422 li
247.794 201.362 247.801 201.31 247.791 201.273 cv
247.733 201.387 li
247.753 201.343 li
247.804 201.226 247.782 201.139 247.709 201.139 cv
246.793 201.139 li
246.72 201.139 246.583 201.226 246.48 201.343 cv
244.56 203.516 li
243.94 203.516 239.924 203.019 239.487 202.952 cv
237.431 202.637 234.742 202.245 232.685 202.643 cv
232.345 202.709 232.022 202.773 231.71 202.836 cv
231.615 202.855 231.522 202.874 231.431 202.893 cv
231.194 202.941 230.968 202.989 230.75 203.036 cv
230.667 203.054 230.581 203.073 230.502 203.091 cv
230.228 203.152 229.969 203.213 229.729 203.274 cv
229.677 203.287 229.631 203.301 229.581 203.314 cv
229.395 203.363 229.22 203.413 229.058 203.463 cv
228.991 203.484 228.926 203.504 228.863 203.525 cv
228.712 203.575 228.574 203.626 228.447 203.678 cv
228.41 203.693 228.366 203.708 228.331 203.724 cv
228.198 203.782 228.08 203.841 227.98 203.902 cv
227.993 203.902 li
227.711 204.075 227.548 204.26 227.548 204.47 cv
227.548 204.47 227.584 204.471 227.611 204.472 cv
227.571 204.544 227.548 204.618 227.548 204.695 cv
227.548 204.695 228.306 204.719 229.474 204.752 cv
229.725 205.069 li
229.662 205.139 229.621 205.23 229.621 205.332 cv
229.621 205.543 229.786 205.711 229.994 205.725 cv
218.616 205.725 li
218.823 205.711 218.989 205.543 218.989 205.332 cv
218.989 205.301 218.978 205.275 218.972 205.246 cv
222.232 205.246 li
222.316 205.246 222.383 205.178 222.383 205.095 cv
222.383 205.012 222.316 204.944 222.232 204.944 cv
222.232 204.944 222.12 204.91 221.941 204.856 cv
223.599 204.782 225.549 204.695 225.549 204.695 cv
225.558 204.653 225.551 204.603 225.523 204.548 cv
225.671 204.393 225.837 204.135 225.954 203.868 cv
226.977 201.422 li
227.004 201.362 227.011 201.31 227.001 201.273 cv
226.943 201.387 li
226.962 201.343 li
227.013 201.226 226.992 201.139 226.918 201.139 cv
226.003 201.139 li
225.929 201.139 225.792 201.226 225.689 201.343 cv
223.77 203.516 li
223.149 203.516 219.133 203.019 218.697 202.952 cv
216.64 202.637 213.952 202.245 211.895 202.643 cv
211.554 202.709 211.232 202.773 210.919 202.836 cv
210.824 202.855 210.732 202.874 210.64 202.893 cv
210.404 202.941 210.178 202.989 209.96 203.036 cv
209.877 203.054 209.791 203.073 209.711 203.091 cv
209.438 203.152 209.179 203.213 208.939 203.274 cv
208.887 203.287 208.841 203.301 208.79 203.314 cv
208.604 203.364 208.43 203.413 208.267 203.463 cv
208.2 203.484 208.136 203.504 208.073 203.525 cv
207.922 203.575 207.784 203.626 207.657 203.678 cv
207.619 203.693 207.576 203.708 207.54 203.724 cv
207.408 203.782 207.289 203.841 207.189 203.902 cv
207.202 203.902 li
206.92 204.075 206.758 204.26 206.758 204.47 cv
206.758 204.47 206.793 204.471 206.821 204.472 cv
206.78 204.544 206.758 204.618 206.758 204.695 cv
206.758 204.695 207.515 204.719 208.683 204.752 cv
208.935 205.069 li
208.872 205.139 208.831 205.23 208.831 205.332 cv
208.831 205.543 208.996 205.711 209.204 205.725 cv
197.826 205.725 li
198.033 205.711 198.198 205.543 198.198 205.332 cv
198.198 205.301 198.188 205.275 198.181 205.246 cv
201.442 205.246 li
201.525 205.246 201.593 205.178 201.593 205.095 cv
201.593 205.012 201.525 204.944 201.442 204.944 cv
201.442 204.944 201.33 204.91 201.151 204.856 cv
202.809 204.782 204.758 204.695 204.758 204.695 cv
204.768 204.653 204.761 204.603 204.733 204.548 cv
204.881 204.393 205.046 204.135 205.164 203.868 cv
206.187 201.422 li
206.214 201.362 206.22 201.31 206.211 201.273 cv
206.152 201.388 li
206.172 201.343 li
206.223 201.226 206.202 201.139 206.128 201.139 cv
205.213 201.139 li
205.139 201.139 205.002 201.226 204.899 201.343 cv
202.979 203.516 li
202.359 203.516 198.343 203.019 197.907 202.952 cv
195.85 202.637 193.162 202.245 191.104 202.643 cv
190.764 202.709 190.442 202.773 190.129 202.836 cv
190.034 202.855 189.942 202.874 189.85 202.893 cv
189.614 202.941 189.387 202.989 189.17 203.036 cv
189.087 203.054 189.001 203.073 188.921 203.091 cv
188.648 203.152 188.388 203.213 188.149 203.274 cv
188.096 203.287 188.05 203.301 187.999 203.315 cv
187.814 203.364 187.639 203.413 187.477 203.463 cv
187.41 203.484 187.345 203.504 187.282 203.525 cv
187.131 203.575 186.993 203.626 186.867 203.678 cv
186.829 203.693 186.785 203.708 186.75 203.724 cv
186.618 203.782 186.499 203.841 186.399 203.902 cv
186.412 203.902 li
186.13 204.075 185.968 204.26 185.968 204.47 cv
185.968 204.47 186.003 204.471 186.03 204.472 cv
185.99 204.544 185.968 204.618 185.968 204.695 cv
185.968 204.695 186.725 204.719 187.893 204.752 cv
188.144 205.069 li
188.081 205.139 188.04 205.23 188.04 205.332 cv
188.04 205.543 188.206 205.711 188.413 205.725 cv
177.035 205.725 li
177.243 205.711 177.408 205.543 177.408 205.332 cv
177.408 205.301 177.397 205.275 177.391 205.246 cv
180.651 205.246 li
180.735 205.246 180.802 205.179 180.802 205.095 cv
180.802 205.012 180.735 204.944 180.651 204.944 cv
180.651 204.944 180.539 204.91 180.36 204.856 cv
182.018 204.782 183.968 204.695 183.968 204.695 cv
183.977 204.653 183.971 204.603 183.942 204.548 cv
184.09 204.393 184.256 204.135 184.373 203.868 cv
185.397 201.422 li
185.423 201.362 185.43 201.31 185.42 201.273 cv
185.362 201.387 li
185.381 201.343 li
185.433 201.226 185.411 201.139 185.338 201.139 cv
184.422 201.139 li
184.349 201.139 184.212 201.226 184.109 201.343 cv
182.189 203.516 li
181.569 203.516 177.553 203.019 177.116 202.952 cv
175.059 202.637 172.371 202.245 170.314 202.643 cv
169.973 202.709 169.651 202.773 169.338 202.836 cv
169.244 202.855 169.151 202.874 169.059 202.893 cv
168.823 202.941 168.597 202.989 168.379 203.036 cv
168.297 203.054 168.21 203.073 168.131 203.091 cv
167.857 203.152 167.598 203.213 167.358 203.274 cv
167.306 203.287 167.26 203.301 167.209 203.314 cv
167.023 203.364 166.849 203.413 166.686 203.463 cv
166.62 203.484 166.555 203.504 166.492 203.525 cv
166.341 203.575 166.203 203.626 166.077 203.677 cv
166.039 203.693 165.995 203.708 165.959 203.724 cv
165.827 203.782 165.708 203.841 165.609 203.902 cv
165.622 203.902 li
165.34 204.075 165.177 204.26 165.177 204.47 cv
165.177 204.47 165.212 204.471 165.24 204.472 cv
165.2 204.544 165.177 204.618 165.177 204.695 cv
165.177 204.695 165.935 204.719 167.102 204.752 cv
167.354 205.069 li
167.291 205.139 167.25 205.23 167.25 205.332 cv
167.25 205.543 167.415 205.711 167.623 205.725 cv
135.454 205.725 li
135.662 205.711 135.827 205.543 135.827 205.332 cv
135.827 205.301 135.816 205.275 135.81 205.246 cv
139.071 205.246 li
139.154 205.246 139.222 205.179 139.222 205.095 cv
139.222 205.012 139.154 204.944 139.071 204.944 cv
139.071 204.944 138.959 204.91 138.779 204.856 cv
140.437 204.782 142.387 204.695 142.387 204.695 cv
142.397 204.653 142.39 204.603 142.361 204.548 cv
142.51 204.393 142.675 204.135 142.793 203.868 cv
143.816 201.422 li
143.842 201.362 143.849 201.31 143.839 201.273 cv
143.781 201.387 li
143.801 201.343 li
143.852 201.226 143.831 201.139 143.757 201.139 cv
142.842 201.139 li
142.768 201.139 142.631 201.226 142.528 201.343 cv
140.608 203.516 li
139.988 203.516 135.972 203.019 135.536 202.952 cv
133.479 202.637 130.791 202.245 128.733 202.643 cv
128.393 202.709 128.07 202.773 127.758 202.836 cv
127.663 202.855 127.571 202.874 127.479 202.893 cv
127.243 202.941 127.016 202.989 126.798 203.036 cv
126.715 203.054 126.63 203.073 126.55 203.091 cv
126.276 203.152 126.017 203.213 125.777 203.274 cv
125.725 203.287 125.68 203.301 125.629 203.314 cv
125.443 203.363 125.268 203.413 125.106 203.463 cv
125.039 203.484 124.974 203.504 124.911 203.525 cv
124.76 203.575 124.622 203.626 124.496 203.678 cv
124.458 203.693 124.414 203.708 124.379 203.724 cv
124.247 203.782 124.128 203.841 124.028 203.902 cv
124.041 203.902 li
123.759 204.075 123.597 204.26 123.597 204.47 cv
123.597 204.47 123.632 204.471 123.659 204.472 cv
123.619 204.544 123.597 204.618 123.597 204.695 cv
123.597 204.695 124.354 204.719 125.522 204.752 cv
125.773 205.069 li
125.71 205.139 125.669 205.23 125.669 205.332 cv
125.669 205.543 125.835 205.711 126.042 205.725 cv
114.664 205.725 li
114.872 205.711 115.037 205.543 115.037 205.332 cv
115.037 205.301 115.026 205.275 115.02 205.246 cv
118.28 205.246 li
118.364 205.246 118.431 205.179 118.431 205.095 cv
118.431 205.012 118.364 204.944 118.28 204.944 cv
118.28 204.944 118.168 204.91 117.989 204.856 cv
119.647 204.782 121.597 204.695 121.597 204.695 cv
121.606 204.653 121.599 204.603 121.571 204.548 cv
121.719 204.393 121.885 204.135 122.002 203.868 cv
123.026 201.422 li
123.052 201.362 123.059 201.31 123.049 201.273 cv
122.991 201.387 li
123.01 201.343 li
123.061 201.226 123.04 201.139 122.967 201.139 cv
122.051 201.139 li
121.978 201.139 121.84 201.226 121.738 201.343 cv
119.818 203.516 li
119.198 203.516 115.182 203.019 114.745 202.952 cv
112.688 202.637 110 202.245 107.943 202.643 cv
107.602 202.709 107.28 202.773 106.967 202.836 cv
106.873 202.855 106.78 202.874 106.688 202.893 cv
106.452 202.941 106.226 202.989 106.008 203.036 cv
105.925 203.054 105.839 203.073 105.759 203.091 cv
105.486 203.152 105.227 203.213 104.987 203.274 cv
104.935 203.287 104.889 203.301 104.838 203.314 cv
104.652 203.364 104.478 203.413 104.315 203.463 cv
104.249 203.484 104.184 203.504 104.121 203.525 cv
103.97 203.575 103.832 203.626 103.705 203.678 cv
103.667 203.693 103.624 203.708 103.588 203.724 cv
103.456 203.782 103.337 203.841 103.238 203.902 cv
103.251 203.902 li
102.969 204.075 102.806 204.26 102.806 204.47 cv
102.806 204.47 102.841 204.471 102.869 204.472 cv
102.829 204.544 102.806 204.618 102.806 204.695 cv
102.806 204.695 103.564 204.719 104.731 204.752 cv
104.983 205.069 li
104.92 205.139 104.879 205.23 104.879 205.332 cv
104.879 205.543 105.044 205.711 105.252 205.725 cv
73.0833 205.725 li
73.2908 205.711 73.4563 205.543 73.4563 205.332 cv
73.4563 205.301 73.4454 205.275 73.4389 205.246 cv
76.6995 205.246 li
76.7829 205.246 76.8506 205.179 76.8506 205.095 cv
76.8506 205.012 76.7829 204.944 76.6995 204.944 cv
76.6995 204.944 76.5876 204.91 76.4083 204.856 cv
78.0663 204.782 80.0159 204.695 80.0159 204.695 cv
80.0255 204.653 80.0187 204.603 79.9903 204.548 cv
80.1386 204.393 80.3041 204.135 80.4214 203.868 cv
81.4448 201.422 li
81.4713 201.362 81.478 201.31 81.4683 201.273 cv
81.4102 201.387 li
81.4296 201.343 li
81.4806 201.226 81.4594 201.139 81.3858 201.139 cv
80.4705 201.139 li
80.3969 201.139 80.2597 201.226 80.1569 201.343 cv
78.237 203.516 li
77.6169 203.516 73.6008 203.019 73.1645 202.952 cv
71.1075 202.637 68.4195 202.245 66.3619 202.643 cv
66.0216 202.709 65.6994 202.773 65.3866 202.836 cv
65.2918 202.855 65.1995 202.874 65.1074 202.893 cv
64.8714 202.941 64.6451 202.989 64.4274 203.036 cv
64.3447 203.054 64.2586 203.073 64.1787 203.091 cv
63.9052 203.152 63.6459 203.213 63.4061 203.274 cv
63.3542 203.287 63.3086 203.301 63.2582 203.314 cv
63.0721 203.363 62.8971 203.413 62.7343 203.463 cv
62.6677 203.484 62.603 203.504 62.5404 203.525 cv
62.3892 203.575 62.2509 203.626 62.1243 203.678 cv
62.0867 203.693 62.0431 203.708 62.0076 203.724 cv
61.8755 203.782 61.7567 203.841 61.6569 203.902 cv
61.6699 203.902 li
61.3879 204.075 61.2254 204.26 61.2254 204.47 cv
61.2254 204.47 61.2606 204.471 61.2882 204.472 cv
61.2479 204.544 61.2254 204.618 61.2254 204.695 cv
61.2254 204.695 61.9828 204.719 63.1506 204.752 cv
63.4022 205.069 li
63.3392 205.139 63.298 205.23 63.298 205.332 cv
63.298 205.543 63.4634 205.711 63.6709 205.725 cv
40.9655 205.725 li
40.7375 205.725 40.4913 206.965 40.8179 208.292 cv
40.5496 208.918 40.4549 211.138 41.7962 212.583 cv
43.7208 214.655 45.6692 214.519 50.8736 219.118 cv
54.9899 222.756 53.5379 225.113 55.4007 225.177 cv
54.9354 225.458 54.6213 225.964 54.6213 226.547 cv
54.6213 227.433 55.3398 228.152 56.2261 228.152 cv
369.822 228.151 li
370.708 228.151 371.426 227.433 371.426 226.547 cv
371.426 225.66 370.708 224.942 369.822 224.942 cv
217.251 224.942 li
216.672 224.622 216.275 224.012 216.275 223.304 cv
216.275 222.99 li
216.275 221.951 217.117 221.109 218.156 221.109 cv
325.878 221.109 li
325.825 221.258 325.787 221.414 325.787 221.582 cv
325.787 221.817 li
325.787 222.597 326.419 223.229 327.199 223.229 cv
361.203 223.229 li
361.983 223.229 362.615 222.597 362.615 221.817 cv
362.615 221.582 li
362.615 221.415 362.581 221.257 362.528 221.109 cv
369.583 221.109 li
370.407 221.109 371.1 221.643 371.354 222.381 cv
cp
370.625 234.38 mo
364.264 234.38 li
364.264 235.976 li
364.264 237.297 363.193 238.369 361.871 238.369 cv
359.079 238.369 li
357.757 238.369 356.686 237.297 356.686 235.976 cv
356.686 234.38 li
337.147 234.38 li
335.825 234.38 333.682 235.452 332.359 236.773 cv
328.367 240.762 li
49.5665 240.762 li
46.2623 240.762 43.5837 238.083 43.5837 234.779 cv
43.5837 231.475 46.2623 228.796 49.5665 228.796 cv
364.663 228.796 li
367.832 228.796 370.419 231.263 370.625 234.38 cv
cp
286.632 177.18 mo
288.957 177.18 li
287.009 179.169 li
286.588 179.169 li
286.462 177.11 li
286.51 177.149 286.566 177.18 286.632 177.18 cv
cp
284.525 179.169 mo
284.41 179.169 li
282.191 176.903 li
284.664 176.903 li
284.525 179.169 li
cp
284.139 176.57 mo
284.684 176.57 li
284.671 176.792 li
281.872 176.792 li
284.309 179.28 li
284.518 179.28 li
284.089 186.276 li
253.203 186.276 li
253.203 186.936 li
252.048 186.936 li
252.048 188.072 li
253.203 188.072 li
253.203 188.626 li
256.404 188.626 li
256.404 189.132 li
252.048 189.132 li
252.048 189.51 li
252.048 189.586 li
252.048 190.646 li
256.404 190.646 li
256.404 191.706 li
252.048 191.706 li
252.048 192.085 li
252.048 192.16 li
252.048 193.22 li
256.404 193.22 li
256.404 193.469 li
265.299 193.469 li
265.299 199.644 li
288.549 199.644 li
288.549 193.669 li
291.892 192.181 li
291.892 191.725 li
289.332 191.725 li
291.892 190.585 li
291.892 190.13 li
289.332 190.13 li
291.892 188.99 li
291.892 188.534 li
288.181 188.534 li
288.181 188.539 li
287.163 188.539 li
286.595 179.28 li
287.11 179.28 li
289.167 177.18 li
289.424 177.18 li
289.575 177.18 289.698 177.058 289.698 176.906 cv
289.698 176.755 289.575 176.632 289.424 176.632 cv
286.632 176.632 li
286.556 176.632 286.487 176.663 286.438 176.713 cv
286.429 176.57 li
286.632 176.57 li
286.88 176.57 287.081 176.369 287.081 176.121 cv
287.081 175.873 286.88 175.672 286.632 175.672 cv
285.76 175.672 li
285.76 173.491 li
285.76 173.243 285.559 173.042 285.311 173.042 cv
285.063 173.042 284.862 173.243 284.862 173.491 cv
284.862 175.672 li
284.139 175.672 li
283.891 175.672 283.69 175.873 283.69 176.121 cv
283.69 176.369 283.891 176.57 284.139 176.57 cv
cp
253.203 185.47 mo
251.513 185.47 li
251.513 183.927 li
281.023 183.927 li
281.023 185.452 li
253.203 185.452 li
253.203 185.47 li
cp
276.902 175.135 mo
282.677 175.135 li
278.227 178.469 li
277.308 178.469 li
276.902 175.135 li
cp
276.199 169.358 mo
280.883 169.358 li
277.402 171.965 li
276.516 171.965 li
276.199 169.358 li
cp
275.315 162.099 mo
273.635 162.099 li
273.591 162.463 li
273.406 162.463 li
273.207 162.463 273.045 162.302 273.045 162.102 cv
273.045 161.218 li
273.045 161.018 273.207 160.857 273.406 160.857 cv
276.693 160.857 li
276.893 160.857 277.054 161.018 277.054 161.218 cv
277.054 162.102 li
277.054 162.302 276.893 162.463 276.693 162.463 cv
275.359 162.463 li
275.315 162.099 li
cp
272.434 171.965 mo
271.482 171.965 li
268.001 169.358 li
272.751 169.358 li
272.434 171.965 li
cp
271.642 178.469 mo
270.658 178.469 li
266.207 175.135 li
272.048 175.135 li
271.642 178.469 li
cp
281.023 182.598 mo
281.023 182.542 li
281.023 182.288 li
277.773 182.288 li
277.336 178.698 li
278.303 178.698 li
283.324 174.937 li
283.43 174.937 li
283.43 173.917 li
276.754 173.917 li
276.538 172.145 li
277.462 172.145 li
281.389 169.203 li
281.472 169.203 li
281.472 168.406 li
276.083 168.406 li
275.579 164.267 li
278.78 164.267 li
278.78 161.75 li
278.181 161.75 li
278.181 163.669 li
275.506 163.669 li
275.381 162.643 li
276.693 162.643 li
276.991 162.643 277.234 162.4 277.234 162.102 cv
277.234 161.218 li
277.234 160.92 276.991 160.677 276.693 160.677 cv
273.406 160.677 li
273.108 160.677 272.866 160.92 272.866 161.218 cv
272.866 162.102 li
272.866 162.4 273.108 162.643 273.406 162.643 cv
273.569 162.643 li
273.444 163.669 li
271.675 163.669 li
271.675 163.391 li
272.609 163.391 li
272.751 163.391 272.866 163.275 272.866 163.133 cv
272.866 162.501 li
272.866 162.359 272.751 162.243 272.609 162.243 cv
270.261 162.243 li
270.119 162.243 270.003 162.359 270.003 162.501 cv
270.003 163.133 li
270.003 163.275 270.119 163.391 270.261 163.391 cv
271.301 163.391 li
271.301 163.669 li
271.151 163.669 li
271.151 164.267 li
273.371 164.267 li
272.867 168.406 li
267.412 168.406 li
267.412 169.203 li
267.495 169.203 li
271.422 172.145 li
272.412 172.145 li
272.196 173.917 li
265.454 173.917 li
265.454 174.937 li
265.56 174.937 li
270.581 178.698 li
271.614 178.698 li
271.177 182.288 li
262.476 182.288 li
262.476 181.211 li
263.001 181.195 263.424 180.77 263.424 180.241 cv
263.424 179.895 li
263.915 179.731 264.271 179.272 264.271 178.726 cv
264.271 172.535 li
264.271 171.852 263.717 171.297 263.033 171.297 cv
258.7 171.297 li
258.016 171.297 257.462 171.852 257.462 172.535 cv
257.462 178.726 li
257.462 179.174 257.702 179.563 258.059 179.78 cv
258.059 180.241 li
258.059 180.78 258.495 181.216 259.034 181.216 cv
260.482 181.216 li
260.482 182.288 li
255.214 182.288 li
255.214 173.68 li
255.214 173.533 255.094 173.413 254.946 173.413 cv
254.798 173.413 254.679 173.533 254.679 173.68 cv
254.679 182.288 li
253.402 182.288 li
253.402 175.888 li
253.402 175.776 253.283 175.685 253.135 175.685 cv
252.987 175.685 252.867 175.776 252.867 175.888 cv
252.867 182.288 li
249.718 182.288 li
249.718 182.542 li
249.718 182.598 li
249.718 183.266 li
281.023 183.266 li
281.023 182.598 li
cp
f
240.907 344.289 mo
240.907 344.44 240.785 344.563 240.634 344.563 cv
237.901 344.563 li
237.75 344.563 237.628 344.44 237.628 344.289 cv
237.628 343.606 li
237.628 343.455 237.75 343.333 237.901 343.333 cv
240.634 343.333 li
240.785 343.333 240.907 343.455 240.907 343.606 cv
240.907 344.289 li
cp
237.099 344.289 mo
237.099 344.44 236.977 344.563 236.826 344.563 cv
234.093 344.563 li
233.942 344.563 233.819 344.44 233.819 344.289 cv
233.819 343.606 li
233.819 343.455 233.942 343.333 234.093 343.333 cv
236.826 343.333 li
236.977 343.333 237.099 343.455 237.099 343.606 cv
237.099 344.289 li
cp
233.291 344.289 mo
233.291 344.44 233.168 344.563 233.017 344.563 cv
230.284 344.563 li
230.133 344.563 230.011 344.44 230.011 344.289 cv
230.011 343.606 li
230.011 343.455 230.133 343.333 230.284 343.333 cv
233.017 343.333 li
233.168 343.333 233.291 343.455 233.291 343.606 cv
233.291 344.289 li
cp
229.482 344.289 mo
229.482 344.44 229.36 344.563 229.209 344.563 cv
226.476 344.563 li
226.325 344.563 226.203 344.44 226.203 344.289 cv
226.203 343.606 li
226.203 343.455 226.325 343.333 226.476 343.333 cv
229.209 343.333 li
229.36 343.333 229.482 343.455 229.482 343.606 cv
229.482 344.289 li
cp
225.674 344.289 mo
225.674 344.44 225.552 344.563 225.401 344.563 cv
222.668 344.563 li
222.517 344.563 222.394 344.44 222.394 344.289 cv
222.394 343.606 li
222.394 343.455 222.517 343.333 222.668 343.333 cv
225.401 343.333 li
225.552 343.333 225.674 343.455 225.674 343.606 cv
225.674 344.289 li
cp
221.866 344.289 mo
221.866 344.44 221.743 344.563 221.592 344.563 cv
218.859 344.563 li
218.708 344.563 218.586 344.44 218.586 344.289 cv
218.586 343.606 li
218.586 343.455 218.708 343.333 218.859 343.333 cv
221.592 343.333 li
221.743 343.333 221.866 343.455 221.866 343.606 cv
221.866 344.289 li
cp
212.953 344.289 mo
212.953 344.44 212.831 344.563 212.68 344.563 cv
209.947 344.563 li
209.796 344.563 209.674 344.44 209.674 344.289 cv
209.674 343.606 li
209.674 343.455 209.796 343.333 209.947 343.333 cv
212.68 343.333 li
212.831 343.333 212.953 343.455 212.953 343.606 cv
212.953 344.289 li
cp
209.145 344.289 mo
209.145 344.44 209.023 344.563 208.872 344.563 cv
206.139 344.563 li
205.988 344.563 205.865 344.44 205.865 344.289 cv
205.865 343.606 li
205.865 343.455 205.988 343.333 206.139 343.333 cv
208.872 343.333 li
209.023 343.333 209.145 343.455 209.145 343.606 cv
209.145 344.289 li
cp
205.337 344.289 mo
205.337 344.44 205.214 344.563 205.063 344.563 cv
202.33 344.563 li
202.179 344.563 202.057 344.44 202.057 344.289 cv
202.057 343.606 li
202.057 343.455 202.179 343.333 202.33 343.333 cv
205.063 343.333 li
205.214 343.333 205.337 343.455 205.337 343.606 cv
205.337 344.289 li
cp
201.849 334.106 mo
201.849 333.9 li
201.849 333.677 202.03 333.497 202.252 333.497 cv
203.74 333.497 li
203.962 333.497 204.143 333.677 204.143 333.9 cv
204.143 334.106 li
204.143 334.329 203.962 334.509 203.74 334.509 cv
202.252 334.509 li
202.03 334.509 201.849 334.329 201.849 334.106 cv
cp
201.528 344.289 mo
201.528 344.44 201.406 344.563 201.255 344.563 cv
198.522 344.563 li
198.371 344.563 198.249 344.44 198.249 344.289 cv
198.249 343.606 li
198.249 343.455 198.371 343.333 198.522 343.333 cv
201.255 343.333 li
201.406 343.333 201.528 343.455 201.528 343.606 cv
201.528 344.289 li
cp
197.72 344.289 mo
197.72 344.44 197.598 344.563 197.447 344.563 cv
194.714 344.563 li
194.563 344.563 194.44 344.44 194.44 344.289 cv
194.44 343.606 li
194.44 343.455 194.563 343.333 194.714 343.333 cv
197.447 343.333 li
197.598 343.333 197.72 343.455 197.72 343.606 cv
197.72 344.289 li
cp
195.569 333.866 mo
195.569 333.643 195.75 333.463 195.973 333.463 cv
201.108 333.463 li
201.33 333.463 201.511 333.643 201.511 333.866 cv
201.511 334.072 li
201.511 334.295 201.33 334.476 201.108 334.476 cv
195.973 334.476 li
195.75 334.476 195.569 334.295 195.569 334.072 cv
195.569 333.866 li
cp
193.912 344.289 mo
193.912 344.44 193.789 344.563 193.638 344.563 cv
190.905 344.563 li
190.754 344.563 190.632 344.44 190.632 344.289 cv
190.632 343.606 li
190.632 343.455 190.754 343.333 190.905 343.333 cv
193.638 343.333 li
193.789 343.333 193.912 343.455 193.912 343.606 cv
193.912 344.289 li
cp
185.851 344.289 mo
185.851 344.44 185.729 344.563 185.578 344.563 cv
182.845 344.563 li
182.694 344.563 182.571 344.44 182.571 344.289 cv
182.571 343.606 li
182.571 343.455 182.694 343.333 182.845 343.333 cv
185.578 343.333 li
185.729 343.333 185.851 343.455 185.851 343.606 cv
185.851 344.289 li
cp
182.043 344.289 mo
182.043 344.44 181.92 344.563 181.769 344.563 cv
179.036 344.563 li
178.885 344.563 178.763 344.44 178.763 344.289 cv
178.763 343.606 li
178.763 343.455 178.885 343.333 179.036 343.333 cv
181.769 343.333 li
181.92 343.333 182.043 343.455 182.043 343.606 cv
182.043 344.289 li
cp
178.234 344.289 mo
178.234 344.44 178.112 344.563 177.961 344.563 cv
175.228 344.563 li
175.077 344.563 174.955 344.44 174.955 344.289 cv
174.955 343.606 li
174.955 343.455 175.077 343.333 175.228 343.333 cv
177.961 343.333 li
178.112 343.333 178.234 343.455 178.234 343.606 cv
178.234 344.289 li
cp
174.426 344.289 mo
174.426 344.44 174.304 344.563 174.153 344.563 cv
171.42 344.563 li
171.269 344.563 171.146 344.44 171.146 344.289 cv
171.146 343.606 li
171.146 343.455 171.269 343.333 171.42 343.333 cv
174.153 343.333 li
174.304 343.333 174.426 343.455 174.426 343.606 cv
174.426 344.289 li
cp
170.618 344.289 mo
170.618 344.44 170.495 344.563 170.344 344.563 cv
167.611 344.563 li
167.46 344.563 167.338 344.44 167.338 344.289 cv
167.338 343.606 li
167.338 343.455 167.46 343.333 167.611 343.333 cv
170.344 343.333 li
170.495 343.333 170.618 343.455 170.618 343.606 cv
170.618 344.289 li
cp
166.809 344.289 mo
166.809 344.44 166.687 344.563 166.536 344.563 cv
163.803 344.563 li
163.652 344.563 163.53 344.44 163.53 344.289 cv
163.53 343.606 li
163.53 343.455 163.652 343.333 163.803 343.333 cv
166.536 343.333 li
166.687 343.333 166.809 343.455 166.809 343.606 cv
166.809 344.289 li
cp
160.535 340.862 mo
160.535 341.013 160.413 341.136 160.262 341.136 cv
157.529 341.136 li
157.378 341.136 157.255 341.013 157.255 340.862 cv
157.255 340.179 li
157.255 340.028 157.378 339.906 157.529 339.906 cv
160.262 339.906 li
160.413 339.906 160.535 340.028 160.535 340.179 cv
160.535 340.862 li
cp
157.359 344.289 mo
157.359 344.44 157.237 344.563 157.086 344.563 cv
154.353 344.563 li
154.202 344.563 154.08 344.44 154.08 344.289 cv
154.08 343.606 li
154.08 343.455 154.202 343.333 154.353 343.333 cv
157.086 343.333 li
157.237 343.333 157.359 343.455 157.359 343.606 cv
157.359 344.289 li
cp
153.447 340.862 mo
153.447 340.179 li
153.447 340.028 153.569 339.906 153.72 339.906 cv
156.453 339.906 li
156.604 339.906 156.727 340.028 156.727 340.179 cv
156.727 340.862 li
156.727 341.013 156.604 341.136 156.453 341.136 cv
153.72 341.136 li
153.569 341.136 153.447 341.013 153.447 340.862 cv
cp
153.551 344.289 mo
153.551 344.44 153.429 344.563 153.278 344.563 cv
150.545 344.563 li
150.394 344.563 150.271 344.44 150.271 344.289 cv
150.271 343.606 li
150.271 343.455 150.394 343.333 150.545 343.333 cv
153.278 343.333 li
153.429 343.333 153.551 343.455 153.551 343.606 cv
153.551 344.289 li
cp
149.639 340.862 mo
149.639 340.179 li
149.639 340.028 149.761 339.906 149.912 339.906 cv
152.645 339.906 li
152.796 339.906 152.918 340.028 152.918 340.179 cv
152.918 340.862 li
152.918 341.013 152.796 341.136 152.645 341.136 cv
149.912 341.136 li
149.761 341.136 149.639 341.013 149.639 340.862 cv
cp
149.743 344.289 mo
149.743 344.44 149.62 344.563 149.469 344.563 cv
146.736 344.563 li
146.585 344.563 146.463 344.44 146.463 344.289 cv
146.463 343.606 li
146.463 343.455 146.585 343.333 146.736 343.333 cv
149.469 343.333 li
149.62 343.333 149.743 343.455 149.743 343.606 cv
149.743 344.289 li
cp
145.83 340.862 mo
145.83 340.179 li
145.83 340.028 145.953 339.906 146.104 339.906 cv
148.837 339.906 li
148.988 339.906 149.11 340.028 149.11 340.179 cv
149.11 340.862 li
149.11 341.013 148.988 341.136 148.837 341.136 cv
146.104 341.136 li
145.953 341.136 145.83 341.013 145.83 340.862 cv
cp
145.934 344.289 mo
145.934 344.44 145.812 344.563 145.661 344.563 cv
142.928 344.563 li
142.777 344.563 142.655 344.44 142.655 344.289 cv
142.655 343.606 li
142.655 343.455 142.777 343.333 142.928 343.333 cv
145.661 343.333 li
145.812 343.333 145.934 343.455 145.934 343.606 cv
145.934 344.289 li
cp
142.022 340.862 mo
142.022 340.179 li
142.022 340.028 142.144 339.906 142.295 339.906 cv
145.028 339.906 li
145.179 339.906 145.302 340.028 145.302 340.179 cv
145.302 340.862 li
145.302 341.013 145.179 341.136 145.028 341.136 cv
142.295 341.136 li
142.144 341.136 142.022 341.013 142.022 340.862 cv
cp
142.126 344.289 mo
142.126 344.44 142.004 344.563 141.853 344.563 cv
139.12 344.563 li
138.969 344.563 138.846 344.44 138.846 344.289 cv
138.846 343.606 li
138.846 343.455 138.969 343.333 139.12 343.333 cv
141.853 343.333 li
142.004 343.333 142.126 343.455 142.126 343.606 cv
142.126 344.289 li
cp
138.214 340.862 mo
138.214 340.179 li
138.214 340.028 138.336 339.906 138.487 339.906 cv
141.22 339.906 li
141.371 339.906 141.493 340.028 141.493 340.179 cv
141.493 340.862 li
141.493 341.013 141.371 341.136 141.22 341.136 cv
138.487 341.136 li
138.336 341.136 138.214 341.013 138.214 340.862 cv
cp
138.318 344.289 mo
138.318 344.44 138.195 344.563 138.044 344.563 cv
135.311 344.563 li
135.16 344.563 135.038 344.44 135.038 344.289 cv
135.038 343.606 li
135.038 343.455 135.16 343.333 135.311 343.333 cv
138.044 343.333 li
138.195 343.333 138.318 343.455 138.318 343.606 cv
138.318 344.289 li
cp
133.308 334.509 mo
133.085 334.509 132.905 334.329 132.905 334.106 cv
132.905 333.9 li
132.905 333.677 133.085 333.497 133.308 333.497 cv
134.795 333.497 li
135.018 333.497 135.198 333.677 135.198 333.9 cv
135.198 334.106 li
135.198 334.329 135.018 334.509 134.795 334.509 cv
133.308 334.509 li
cp
132.566 334.072 mo
132.566 334.295 132.386 334.476 132.163 334.476 cv
127.028 334.476 li
126.805 334.476 126.625 334.295 126.625 334.072 cv
126.625 333.866 li
126.625 333.643 126.805 333.463 127.028 333.463 cv
132.163 333.463 li
132.386 333.463 132.566 333.643 132.566 333.866 cv
132.566 334.072 li
cp
128.868 344.289 mo
128.868 344.44 128.745 344.563 128.594 344.563 cv
125.861 344.563 li
125.71 344.563 125.588 344.44 125.588 344.289 cv
125.588 343.606 li
125.588 343.455 125.71 343.333 125.861 343.333 cv
128.594 343.333 li
128.745 343.333 128.868 343.455 128.868 343.606 cv
128.868 344.289 li
cp
125.06 344.289 mo
125.06 344.44 124.937 344.563 124.786 344.563 cv
122.053 344.563 li
121.902 344.563 121.78 344.44 121.78 344.289 cv
121.78 343.606 li
121.78 343.455 121.902 343.333 122.053 343.333 cv
124.786 343.333 li
124.937 343.333 125.06 343.455 125.06 343.606 cv
125.06 344.289 li
cp
121.251 344.289 mo
121.251 344.44 121.129 344.563 120.978 344.563 cv
118.245 344.563 li
118.094 344.563 117.971 344.44 117.971 344.289 cv
117.971 343.606 li
117.971 343.455 118.094 343.333 118.245 343.333 cv
120.978 343.333 li
121.129 343.333 121.251 343.455 121.251 343.606 cv
121.251 344.289 li
cp
117.443 344.289 mo
117.443 344.44 117.321 344.563 117.17 344.563 cv
114.437 344.563 li
114.286 344.563 114.163 344.44 114.163 344.289 cv
114.163 343.606 li
114.163 343.455 114.286 343.333 114.437 343.333 cv
117.17 343.333 li
117.321 343.333 117.443 343.455 117.443 343.606 cv
117.443 344.289 li
cp
113.635 344.289 mo
113.635 344.44 113.512 344.563 113.361 344.563 cv
110.628 344.563 li
110.477 344.563 110.355 344.44 110.355 344.289 cv
110.355 343.606 li
110.355 343.455 110.477 343.333 110.628 343.333 cv
113.361 343.333 li
113.512 343.333 113.635 343.455 113.635 343.606 cv
113.635 344.289 li
cp
109.826 344.289 mo
109.826 344.44 109.704 344.563 109.553 344.563 cv
106.82 344.563 li
106.669 344.563 106.547 344.44 106.547 344.289 cv
106.547 343.606 li
106.547 343.455 106.669 343.333 106.82 343.333 cv
109.553 343.333 li
109.704 343.333 109.826 343.455 109.826 343.606 cv
109.826 344.289 li
cp
103.768 340.862 mo
103.768 340.179 li
103.768 340.028 103.89 339.906 104.041 339.906 cv
106.774 339.906 li
106.925 339.906 107.048 340.028 107.048 340.179 cv
107.048 340.862 li
107.048 341.013 106.925 341.136 106.774 341.136 cv
104.041 341.136 li
103.89 341.136 103.768 341.013 103.768 340.862 cv
cp
91.6438 340.862 mo
91.6438 341.013 91.5214 341.136 91.3705 341.136 cv
88.6374 341.136 li
88.4864 341.136 88.3641 341.013 88.3641 340.862 cv
88.3641 340.179 li
88.3641 340.028 88.4864 339.906 88.6374 339.906 cv
91.3705 339.906 li
91.5214 339.906 91.6438 340.028 91.6438 340.179 cv
91.6438 340.862 li
cp
87.8354 340.862 mo
87.8354 341.013 87.7131 341.136 87.5622 341.136 cv
84.8291 341.136 li
84.6782 341.136 84.5558 341.013 84.5558 340.862 cv
84.5558 340.179 li
84.5558 340.028 84.6782 339.906 84.8291 339.906 cv
87.5622 339.906 li
87.7131 339.906 87.8354 340.028 87.8354 340.179 cv
87.8354 340.862 li
cp
84.0271 340.862 mo
84.0271 341.013 83.9048 341.136 83.7538 341.136 cv
81.0208 341.136 li
80.8698 341.136 80.7474 341.013 80.7474 340.862 cv
80.7474 340.179 li
80.7474 340.028 80.8698 339.906 81.0208 339.906 cv
83.7538 339.906 li
83.9048 339.906 84.0271 340.028 84.0271 340.179 cv
84.0271 340.862 li
cp
80.2188 340.862 mo
80.2188 341.013 80.0965 341.136 79.9455 341.136 cv
77.2124 341.136 li
77.0615 341.136 76.9392 341.013 76.9392 340.862 cv
76.9392 340.179 li
76.9392 340.028 77.0615 339.906 77.2124 339.906 cv
79.9455 339.906 li
80.0965 339.906 80.2188 340.028 80.2188 340.179 cv
80.2188 340.862 li
cp
76.4105 340.862 mo
76.4105 341.013 76.2881 341.136 76.1372 341.136 cv
73.4041 341.136 li
73.2532 341.136 73.1308 341.013 73.1308 340.862 cv
73.1308 340.179 li
73.1308 340.028 73.2532 339.906 73.4041 339.906 cv
76.1372 339.906 li
76.2881 339.906 76.4105 340.028 76.4105 340.179 cv
76.4105 340.862 li
cp
72.6022 340.862 mo
72.6022 341.013 72.4798 341.136 72.3289 341.136 cv
69.5958 341.136 li
69.4449 341.136 69.3225 341.013 69.3225 340.862 cv
69.3225 340.179 li
69.3225 340.028 69.4449 339.906 69.5958 339.906 cv
72.3289 339.906 li
72.4798 339.906 72.6022 340.028 72.6022 340.179 cv
72.6022 340.862 li
cp
68.9367 338.105 mo
59.6275 338.105 li
59.6275 338.137 li
59.6275 338.359 59.4469 338.54 59.2243 338.54 cv
52.0715 338.54 li
51.8488 338.54 51.6683 338.359 51.6683 338.137 cv
51.6683 338.105 li
49.9976 338.105 li
49.7749 338.105 49.5944 337.924 49.5944 337.701 cv
49.5944 337.203 li
49.5944 336.981 49.7749 336.8 49.9976 336.8 cv
51.6683 336.8 li
51.6683 336.757 li
51.6683 336.534 51.8488 336.354 52.0715 336.354 cv
59.2243 336.354 li
59.4469 336.354 59.6275 336.534 59.6275 336.757 cv
59.6275 336.8 li
68.9367 336.8 li
69.1594 336.8 69.3399 336.981 69.3399 337.203 cv
69.3399 337.701 li
69.3399 337.924 69.1594 338.105 68.9367 338.105 cv
cp
107.576 340.179 mo
107.576 340.028 107.699 339.906 107.85 339.906 cv
110.583 339.906 li
110.734 339.906 110.856 340.028 110.856 340.179 cv
110.856 340.862 li
110.856 341.013 110.734 341.136 110.583 341.136 cv
107.85 341.136 li
107.699 341.136 107.576 341.013 107.576 340.862 cv
107.576 340.179 li
cp
108.078 333.866 mo
108.078 333.643 108.259 333.463 108.481 333.463 cv
113.616 333.463 li
113.839 333.463 114.02 333.643 114.02 333.866 cv
114.02 334.072 li
114.02 334.295 113.839 334.476 113.616 334.476 cv
108.481 334.476 li
108.259 334.476 108.078 334.295 108.078 334.072 cv
108.078 333.866 li
cp
114.664 340.179 mo
114.664 340.862 li
114.664 341.013 114.542 341.136 114.391 341.136 cv
111.658 341.136 li
111.507 341.136 111.385 341.013 111.385 340.862 cv
111.385 340.179 li
111.385 340.028 111.507 339.906 111.658 339.906 cv
114.391 339.906 li
114.542 339.906 114.664 340.028 114.664 340.179 cv
cp
114.358 333.9 mo
114.358 333.677 114.539 333.497 114.761 333.497 cv
116.249 333.497 li
116.471 333.497 116.652 333.677 116.652 333.9 cv
116.652 334.106 li
116.652 334.329 116.471 334.509 116.249 334.509 cv
114.761 334.509 li
114.539 334.509 114.358 334.329 114.358 334.106 cv
114.358 333.9 li
cp
118.473 340.179 mo
118.473 340.862 li
118.473 341.013 118.35 341.136 118.199 341.136 cv
115.466 341.136 li
115.315 341.136 115.193 341.013 115.193 340.862 cv
115.193 340.179 li
115.193 340.028 115.315 339.906 115.466 339.906 cv
118.199 339.906 li
118.35 339.906 118.473 340.028 118.473 340.179 cv
cp
122.281 340.179 mo
122.281 340.862 li
122.281 341.013 122.159 341.136 122.008 341.136 cv
119.275 341.136 li
119.124 341.136 119.001 341.013 119.001 340.862 cv
119.001 340.179 li
119.001 340.028 119.124 339.906 119.275 339.906 cv
122.008 339.906 li
122.159 339.906 122.281 340.028 122.281 340.179 cv
cp
117.352 333.866 mo
117.352 333.643 117.532 333.463 117.755 333.463 cv
122.89 333.463 li
123.112 333.463 123.293 333.643 123.293 333.866 cv
123.293 334.072 li
123.293 334.295 123.112 334.476 122.89 334.476 cv
117.755 334.476 li
117.532 334.476 117.352 334.295 117.352 334.072 cv
117.352 333.866 li
cp
123.632 333.9 mo
123.632 333.677 123.812 333.497 124.035 333.497 cv
125.522 333.497 li
125.745 333.497 125.925 333.677 125.925 333.9 cv
125.925 334.106 li
125.925 334.329 125.745 334.509 125.522 334.509 cv
124.035 334.509 li
123.812 334.509 123.632 334.329 123.632 334.106 cv
123.632 333.9 li
cp
126.089 340.179 mo
126.089 340.862 li
126.089 341.013 125.967 341.136 125.816 341.136 cv
123.083 341.136 li
122.932 341.136 122.81 341.013 122.81 340.862 cv
122.81 340.179 li
122.81 340.028 122.932 339.906 123.083 339.906 cv
125.816 339.906 li
125.967 339.906 126.089 340.028 126.089 340.179 cv
cp
135.898 333.866 mo
135.898 333.643 136.079 333.463 136.301 333.463 cv
141.436 333.463 li
141.659 333.463 141.84 333.643 141.84 333.866 cv
141.84 334.072 li
141.84 334.295 141.659 334.476 141.436 334.476 cv
136.301 334.476 li
136.079 334.476 135.898 334.295 135.898 334.072 cv
135.898 333.866 li
cp
142.178 333.9 mo
142.178 333.677 142.359 333.497 142.581 333.497 cv
144.069 333.497 li
144.291 333.497 144.472 333.677 144.472 333.9 cv
144.472 334.106 li
144.472 334.329 144.291 334.509 144.069 334.509 cv
142.581 334.509 li
142.359 334.509 142.178 334.329 142.178 334.106 cv
142.178 333.9 li
cp
148.885 333.085 mo
150.809 334.489 153.171 335.327 155.737 335.327 cv
185.181 335.327 li
187.746 335.327 190.109 334.489 192.032 333.085 cv
192.882 333.935 li
190.826 335.746 188.136 336.853 185.181 336.853 cv
155.737 336.853 li
152.782 336.853 150.091 335.746 148.035 333.935 cv
148.885 333.085 li
cp
151.169 329.308 mo
184.171 329.308 li
184.427 329.308 184.635 329.516 184.635 329.772 cv
184.635 330.029 184.427 330.237 184.171 330.237 cv
151.169 330.237 li
150.913 330.237 150.704 330.029 150.704 329.772 cv
150.704 329.516 150.913 329.308 151.169 329.308 cv
cp
262.758 343.678 mo
257.651 343.678 li
257.651 328.129 li
257.651 327.092 256.568 326.281 255.232 326.281 cv
247.974 326.281 li
246.638 326.281 245.364 327.092 245.12 328.129 cv
242.624 338.741 li
227.242 335.334 204.451 333.065 200.152 333.065 cv
195.692 333.065 li
194.389 333.065 li
191.958 331.995 189.203 331.064 186.32 330.32 cv
184.869 320.891 li
184.687 319.706 183.591 318.726 182.414 318.69 cv
177.854 318.55 li
177.854 313.782 li
177.854 313.337 177.493 312.976 177.048 312.976 cv
176.603 312.976 176.242 313.337 176.242 313.782 cv
176.242 318.501 li
173.789 318.426 li
173.789 315.798 li
173.789 315.353 173.428 314.991 172.982 314.991 cv
172.537 314.991 172.176 315.353 172.176 315.798 cv
172.176 318.377 li
170.832 318.336 li
170.832 315.126 li
170.832 314.681 170.471 314.319 170.026 314.319 cv
169.58 314.319 169.22 314.681 169.219 315.126 cv
169.219 318.287 li
156.431 317.896 li
156.431 313.025 li
156.431 312.833 156.275 312.676 156.082 312.676 cv
155.89 312.676 155.734 312.833 155.734 313.025 cv
155.734 317.875 li
154.415 317.835 li
154.415 312.723 li
154.415 312.53 154.259 312.374 154.067 312.374 cv
153.874 312.374 153.718 312.53 153.718 312.723 cv
153.718 317.813 li
151.772 317.754 li
150.426 317.713 149.329 318.7 149.329 319.971 cv
149.329 329.697 li
147.272 330.508 146.115 331.673 146.002 333.065 cv
144.988 333.065 li
52.1768 333.065 li
45.5737 333.065 40.2208 338.418 40.2208 345.021 cv
40.2208 351.624 45.5737 356.977 52.1768 356.977 cv
200.152 356.977 li
205.028 356.977 233.686 354.058 248.347 349.872 cv
250.771 356.065 li
250.833 356.224 251.051 356.351 251.258 356.351 cv
264.285 356.351 li
264.493 356.351 264.661 356.224 264.661 356.065 cv
264.661 346.599 li
266.675 346.338 269.482 345.823 269.482 345.23 cv
269.482 344.373 263.615 343.678 262.758 343.678 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 17.0.0
%%For: (\700\755\762\756\755) ()
%%Title: (1504.m00.i125.n046.S.c10.224868973 Silhouettes of naval ships.eps)
%%CreationDate: 4/23/2015 8:14 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KCKoOQoCqj&YA:m?HD#rn_3Q[r#20\&6>8f\5gKZROoQpk22CVnIe!I)c\s,RZJu(oS(p$Z\TTF\(MP^h7\e@%)D*Q.2LCF(
%[;iV/r-L52Ut0D#83-0Lr;"C]dYmB^V)'qsY$(&?.uit:]32.U3n\,Ig$W[RZG2<We7%kS^+#pC<bf&)?`DjbZ#g(n1'dG6?`d?!
%c$$eQ9fZp?K@W'/r3c^<J,k&\3'0@'"*@`2G(Bsmc-&9'hpmWQ`pgb)cX.MD^G+r#@5`\o2Z0FZ(c0-LME_;orjm\l1'`gfp9`6t
%[YrsVZN15HVG-c')88f+.[S+\XXj0<WDrAl]95JnX/Vj0+s!8u!@CM>T-=4JJ!k0Sq#@IcpqKGPrs:oRPa/OC3QK0#/;&`]NfgUr
%Hqe,UZ`a?sQ8t/]\n@:SX&eRfGW/f\Of#+#_LLg"pkb\oGf"Te(hq<I?M@RUEDfL.ao@H:PmC?<<@`Q9VI!5Zj[rbNFJdkWXo8QO
%'L`3o8&?Xe>,D2+;=-]V#st6ILr3i8;M/_am.jhIGIpmKri]"8<bu,C\fdoq=qCL=1Z\h;]^F;X`SVDp85g:Ee>b@NRdW52lR):&
%VN!0@'!.ThrJmVr8XZHRoq5(o$".qK0Z20r"pmG-=0JW`c#m\Nl8_acpY46(&m[t)Y5!e(+RNo.T)U#QKkbhDQ%mVq8^=Ytg)r)t
%LSn8F?DF$-f!508pucMuG^toRCL5,$eK=]N+OOuHWc6noFV?N0)bBbM5@09:h"0Q0&&-h;2g_ZZ`b"bf5F++ek!^ThY#=OCgX)_W
%eBu5GpgYVXr5Bl@Mrbd_//s$X;uBHZ?n`?J(lK.UpjGb^@5I_5WA<3&2[,_/1lMJ&TY,BOg02%@3G>aB,pg9Z]_kS#I>P_&jG2+m
%8kBWi@MqT'K7#C@nO?6SLb1+X^E!\G_[j(PK%=8g=/FJa@JToC<3]:q]e?fu8U*7u'cY,8MLY.L=h,'2Tq.St4%JTf`_rNen.3a]
%4"'6oqbV=,q?se^JqPCY)[8_=qM](HBn@hiRR$a";,P=#29[P87_/-Z)ouP6,B"Fs:&X]M)i15OE-D)iIaP5s4*Ai8.='=qT!MfT
%H$>&a4@[,m+9`k_:e>B]`"]<C4;>Oa;ejBnW^NYu9%joQ"u$]EQEYeLQ$22d+W@rJlWg@5Ra'R$Derl3%DZ18$D?8`>UiSPWM,c?
%nXb7;5qqrG;1g"]8@^[Uk%-qQ+;#$&Jd^umpXs#X<kW5a>M%ERBIc>)II$3(9:J4aah+a?9OAkPXkWo*'.L!q+">T@R_FGjRZ%3j
%7#c1U&N07sNpZ-_fd(V+B>/C1U(pK>obBJgN(VWag+-7@IMjgS%S_$@=0Yu@:)0cFm:*\2\RjbdTt[Td_!k*ip8Zr+0[%[ZZe59<
%/t58Q*k!DH;@8g,<$)G028Y4[H4K)6DEb5,heH8^LA:?3h*.n@]=:Pe#X5.EiNEcIL"EO5i1G)@&t8I3p?u5"g.Ess?*?-DbB7LI
%G4hT]Xaj9Q"pm*QFtoG_FBu#6gQ_t=5uJX,NNW*js69MP_[X=b2@X/1-+._"6lT4d7)+VeSkSfY[G8G:OK;<\Mc@KB9Xcq1Q+=%s
%YHGJDC?$\3<-=@'k3iHGpj9TQn2ioNIS[*R9th%c]L96\k`QI#^ALc'[nu?]eM;2b%^Wn.:Zau\g;^[KHYohF"I6nnCWS%[D(;jG
%CL?^AD,dOjhA.<eXfW0HT1F[WmIb/bl:7[gnQ.#n!:,Ih<@@./gT/l-FF(>?Wo$T30tiu5kj?p2.!@*9G3*?IKJSH#NMN1GjVlCm
%DA@!&gFLq8l-NY(6k2S`'.TJ;2)'g9i:[JMEd!r#ckmk]%oYT\Wf9<E,c(8keYHaC[+T5].f3]*R&!3..Q"^4$tN287'fm-(Lb:J
%TIMGUKZ?`o=`6/ZHsr@L\;Z7PDM[,o^dbJIRG(iGm&$p@Mj<+?<FN/<S)T^(]i`rn[YqA-WP*1M47fbd9@0_t[G@Y1FpXZgMl#6=
%Bt%3u/XCRB8h?9OMl#5ObLB)AEL14$5"VPX[Bp<_I/N,Oj>`Ck+/'nAEo5`8k<;Rb#/i_qiLe#-A=CII%6+7Nc!Lc.GS#C/1-)=.
%:-dNu<iqa"YGkVV=7IhMJf:VaPFL@MQ-3oPn15-VjBImY2qL\Xb@tZ<<OLT2XPRN;afft)DXY&RqFT5a1_S<?S>a3FPO,8<Z]Sd'
%PtJ`9&+:,VkohYK`4@=-D@n+);Y\j7_9WmEL>Q3[Y5e4lnrHB):I!g6lIfn%W_#7U<32ASSje5\WMC4!"sb$h(R;$hWu%1A;H50s
%r[RnB:n;d+dk/!A\nXXUM(W4oNG:V=2OMA35"jml.H`1qWr1^T,$0_pI'S\19W`GCS:d[<7;^uD3K"s(ACVRjWaoB6Mu@+ge#=*%
%]7XlVh)aK>Nj>X.r?W/^Bcm'/o_;.V67(O>GLRS-VuEMVRiP#]ZtY'o%`=c%^*LBJ0[[g>3XP)57![T^:j45MLI&P^TfUiTh%*PL
%3`n1J5u.BKGW4G?olFWJ?0ttM/);HdbKS7o$-(Bmlm+TL)\I;\gUdm28bVCWV0u@[`gl*"Y2EcoLV28,?L/hrH4N$PNNgACEZcum
%4ljR'nmW.*N\t).+V4"7.G.#MjoFfn'4WPdBeV@?`jfeh9].R1ll.VON>MK3K(m6unLQZA(Al)r=G\U&N<bkf#n49-j^kVoaYk*2
%E#VAZX=qW4/=lt_Y1LC@A^i0Qp.:3pE:QTNlSf>EI=('jGQeuuXHtUnEJ!IE1JDU2O]:?emC,pW.G'!s4sS2.4\(]6iYjC2A:ZCD
%i?;EMa@<n":G?)!JX_TNggj@M-54DLelB=[Bl(VM?.jfQ=1r?drMhbkQ0q\b;Vl/sMiE9,PmdWF_LK#`T-[].ca*Sp8`2k;eDRN`
%hD6bN`24k?6(No5WRcEQ,)QOQ-g[_P<Oj?KO=YM+g,Ku/$]T`pFCnG;c$Au^^r/FW/sSG:52b`f?m)nuG5GZ646HpiPcX[$*3oHF
%-F`,/?GX=i>HkEC;[$0eL#Zb'GZd"4mT?lNj(71oRCqQK\lj^H7=&CPs(1/6=ZB_'NgGI[A`7n0-]XP8=VUIKc=^l38>gLE1XdD@
%H+TAh-_J?,HW]D_@`?u*7[)=qZQ67o8W\L;%p4r>fY\n@`H9U<g&kA$5DV5rZf8X:DP,Zs't%fN\6'd8DdQ1u;ln?CI<&R\F./-2
%E?:i7h/Si?ob1kV]t9XN-f%:N-r0@K`T[m2\qo:OLu:*Ers50n#@8'DAnE*/>rUs)M:Z:'=?Q.89bG4?,6N?S,5;sD"JZHSC"jh2
%(e+S5M>3'm_5Ib]`WfT@s$J^b'0MjI_a,s<a4n$.HSL,g2_H=nk/1LNciW;S1O"+r;g4Bc,al0c':cVrjAJ>9o!23Yib3",apHBO
%b`(g"Q(&lWFYp0`e#g&2CX$Ho*7E]VW"hra>:BS1>K'LJqg6d_-aIZ>-bGWidS3@%&tVOaR;nIq5-m#'ngJ`=3K!fm[[r';KV\/r
%m??eiSNiTZl_&<)/3!UOcBiF<m;iAfR!uAdqu!Y`6oPKdpAXk3Uu)m4\VlPuF6i==k4#[@Q!b5l[EDG]Gb8PPk0qi8QC<SJ3t$CJ
%2XR%qYmfbOhG/Yg2:LN-mLW1XIkfa(_C1i^UM+'LNLZ-M%IufKm,A6F_Lk&r,A?'&*ht#?op=_T2oqoWP2,%$q/jl=o6.!RmVg3!
%-HGA>*#CQT(R*n=#5R6_q-n63Kg,@*SJu4hKDa%*OX;0'PO-r6h'AW$Sf*SeS=TWr.i0uj&XVloWEZI;DH;rPN((HbjWYg3$P)YT
%TDXmh=#PBt,O!*RM5%TIM'l<&ZX3O'=0"0@4G5FF)s:o[_(Ob:YuAcR.mJAWq'7m1,O$RU[motr>O@^\m>cp=:gprAC+YQ%L/Lfl
%._/P-Vd#A:Ma/m\G__^6iF^5os2BBnOP=P41QPhs73t_-UpU`D4%#%`c1K/]encE<)f*p)-K[D2a1PN&j1c0baY>XD0f%>C+\9V!
%!crMLUL]>0b;>@H*;u5l_bP7EcZ"u&J'pJ9YZGiMF)C24d+fYG_lX'+3*[TMT/)f$6Nh!^aVCUS1oKdhF]5IYo]d^39fQp`B]]ch
%H(':\eim>>gA,K1K)UgFleuaO,"_7KKQiTT&o>_[$GT7!ILN'EYVsVt)PrXc<$Uu[A8.>b;Y)MQq[5-J[$[9QYKV/;H8pR2EUZTi
%=hE>M>UF`I@1$TFc5-tfhWo/?4)O9-cFJ%E#cX;p-,"8G`:XU)ns69*(+Yo).^+aTQK'u73@56ulLC\MTk@e--D,pqjf:'0,YS9'
%GM[u0c/He%dYONs>9*DY=jN&KkrtLcMb/)?('f8C*qZ",.@bUihlbIu^ChrBR(rs[p5sX72WZ1RZJDT0W<l?Y\XK`*PAi>"'\o3`
%/_ZIjXdJ/PF0SuQG,k`,0GJ@U83/cW9"AtFD'Y"\#q\t&G&p6`@J.!kW`kQg9(+[Qo[g_o\+a/frM41"#L-*A8]O5)<h<i724BLM
%6`X2OeU+]5'#.<mnYE0bX#;HH"S#km`EMN1RD]Q.-(S#3MRC3V^CuDDfWs=B4/(1T;C44_`o@7P2QHF<U,>,)bcG1$R^W9VM6,uV
%?ZhENpLJG*)&BC(gEhP8'a[&MNB^)r(7Fj7Eens8g8=W^[3ZGFQ?[$\Ir+.-_7btV?\&+l/tbpZ^tnf7k$lPoH-@R:=O6l39@*g"
%0t/!@K?"rA-"_t<jqqPPNRD5$%17"I5;^:k1dS`UY4e#<bPd*X15=sD\88]:`#UVn#6&&;h7@LTRTBeRR2260jI4CtBYFUDYg@b*
%c*u&Ie$&R@gK;$m=T5=d'>9STdnNI.P?$bVP3gkq+Q9,rZVHZ_-V;[I8]D`A</Dm`AL;Xk7b@rR(Jl<9(,F\uTYbSSls.%Jr%FFc
%T&b.MS/Vion5HZ$2C*XBF4MsKbks'gH&+MHU^kipFD=S-Y>oSrkARHJE0.'g/'XOi++s!'Ij]U%>,7XPbg#I;h/f;'n.h>0F4LYN
%DXj7iN%?s>WF7&cU?Q#D-`Y19&ldmU'<HqVX;]2$!0acENgnS<X4<+qOoK;CSU-K-mc$ite]+#Q5+:kh&rQuT[5oi[j;`M2$p(U+
%We3/2C2*rb_g1!;?bFJU^H4I$iZe.MT&08O9/LKKZ?V4IN*IpZ""hAXh>'1Rii#>B=V>!*>TD:]\1,!KW\Ke1qr4Qoii'k!%/@fR
%@.V#n)p_H+Za23M[[nA3j(``uA[,:*KsfW^h;,<tlgBL!'3&Vuc_)P``0B08pttaX/7P4u\Z*10BM<fUZg_X%V((cVJO^qV*>T]U
%WEo,@g6c5l1_q-lC$V1@7q:N*Qkb[:0i&jM7$X/XO2`0XU6pR('`V\"$m+%7@r7Um1UWI&_f8(<0#e[S#le#phA.;@IoV0b]!XBs
%imYJZS%2%oY`n55VQGt=(@P`2gNTnLBgXQ1<TonQ-@';LR<k6H8'g1+KuJ@VZ//]dpD3).`HlGblb*F%kIe"mk3t+g"K.:s/&"TY
%p_%\s@_oNUn1>E'MZr!I_7*P97Ft)m4>$?j/DU.cS6/P9-&XY<e?&JELo6="4T''No(4^:]ss3<Co.jcih!EaG37o9o!i&\R7s-G
%3EiL2&[E#7O)\<sGC94"TuJE2<t"+IM1bA?UqDlc"W#8H^U'f)LH?c&TX-6`/-oj#Hr"-m1TgaB_b[J[iAOj`adVq.Sm[=tk4Sj0
%Or2$AU;)X4-N.C$E9L'Te4S]$9KY,FSXJEi67;#e=;-,l.u@(ss*j<>9Uut+`+in]R3\'.Mmf(u<_%`nWU+c4dAYPi/%%tuRD5R_
%bG=EIP$m2:me,nl1?$n5=7*A0`DWO=BljlDXdP]"l9uh^?peo\<]W^ms"Dpsd0tH9]u'\W&gP[t37SpelK>)K5.0(3UCpO<<\3Me
%^-I$)9M%peIS98,k:?i88gInF5O&o,F_5:90.nD!?a_JMs!7*'?<1jLAET+jPO$QuWoLD@X='tP:H#1u,`p2e1Pou#S6R)g'lIaC
%?B\j/>jYRA-*^HMdRht=_9AZUbqJuPYJfi$$`BVap^K!Qp$L0Q&J7I38QDP5Ca9V-;Q3ad%67#ml6%\KUoIFq2CcZKd0*+]>3W8Z
%,e0/+FCORO"<r%e\OpBSa`N`H9!S(knTTTMJG%AC[M.@d,3;3o(<&bNSnO@iNJiEL#fsS@(XYq>?m/I;VirN#.PiUCMoA8PC%BRs
%P,r@>lXg4]n]W"B.F$IAPXQFpffY1U6k!^>lC%1K-j`Sj)**V<8>rEc/BV3kSu$]nMiskkMmFgiZRGj5fk,4>A]iRb[i@Z$ca,$V
%1ud$2;=elF,tVZ[`M-\/7Hq.[VrB7"+rQmH;*Rih;3Fmj<_!$9GA1[Z9MM7q]Yis%A7*XU_c_gkGV+5Np*+Cu:.L8.Mb.qC=&BEP
%-o6d=d+(7;)-]3tFJio71DBXuN/oD_Uct(;?r]&Dd9H&VG%RH3rgfcVnC7<I/%PjXYY]EL7CQ*8T]h[s#GuLTf-gk2O(/lto@M7,
%0i7*9U%NPbn)D/grL6%OGhr5:Gs(V&VVOE&riT6^cqgh`c+b1p0C5e%cX3']^+eiJ^+dTZ%lXCf5Od?W05L_S;ttq$bkVT'a)h!f
%a%rc/<im!r1/^X;O1t^Gs*Z:>EWZ9:*KN46V;MHN7!u4Das_XFQ:InZ+&%S)MMOhtl>VDQgIlt9+;n+@rpUm,H3p3m!;9L:1fB+.
%cX2Z2q+peV"FCtX/d$aH7;*1t"hcu[CdtNmDK"4g@]e)G<^c&00<d@]*5pp'nJp0?*t1IAI..QnYpH=#\AT*KBbSn&2RFbd`G`Ls
%D$oZf(&[PCd3D4=rV=KR.B^p^^G*Q$%fOJQ?VNcX^Zu4mSM3@cOjYuL'!b<,;rQmar4I>j)MTMc]W4(Eka&i?JO6cnr<IB#00=d4
%59-&`'_n#m^Zu]\)NsrH]!@-bK1_5*b;DpUg`aoW]?kdqk8QU8_\2tX9g/Pj1K2NLK9\PE%b1E+Mp-uL))N?bSI_8fQd1p>2*0p8
%MXA^?Xj\aF`\25;HNJ(GiBLthW=n#6JonD4l)&L%Q-;8YPHIVK"YZl<=T.Vk?B>q5k-WQ2EiY1@UaI7\;#L2[)/:lXSL831C@NLa
%M+qM*8P`,e&FQ\82Ld#S$^c)u"<Ql3l?0\_q@omCZ&7aWVhjIdcClp%P=t1jA)*U2IbEbrc-LbHjj)sp;]ssRTZK:'C2&.H\76AT
%NKZu>2Pe?L?>8C]W-=[W?Sac0c&t6C`0nsnD45k.DQh`q#H:,U;c97\,b9(Ydu-$OHV1:@MIs?N**/\iAf$D`6KPM"e?1..Zd,!'
%cSRNQ"':GuS'7M3RLTE$k-_2HUL*1#b@"J4J/Rf_1\77jh'7be:.lVY5.e3pV2V_T:*WMj9jGeKk.jV)gYId"Z!C+in<@RCUorF:
%TIRDtD?h\!LJj$?:26XYm_FI@Q>#Nom:)j>.^njo+RiMcV`NB.<$F*E:XC1s;'f_G<o\JJX_QR^QQu\orJ['&[qMgE/ur"g$D_"p
%gdIE"Vq(-'dhQXuc.pG]Ub]W$1NcU^F=V3.M]d<-^beu=c_bRuc-f=mf7dBeH`c7@X.:TW2M"?!E*kk[C+n*e[OQ--4WXgH5K'"`
%'CX<*\f@,uj]XrZht`Tj2LZB&VkG`m.WjIKF=QZbQ./sumqumD>jW:[WjQTnT0b(d.3Sd`]l"2raDXm]XjfoG)Pa4\d%m@/LR$0X
%D-</h+'-P7?=!HjX#;XlYCSnO(*:.i.M&Z8XYc]-GpU$Nc"gc<am[PX-oS5S`N)Vr\Ch5cRJIolf:!Mpg.A-kX*#,+iUMAKG*"oG
%_dB#n>Pa]b#&e`E3j$n<'YD.kTiikrYSJ7N+F`_c;FCC4m=SXlXoA8:Y0jIe^P6XAj`.-QBiRbB+DMufpc5P(hVVV8hhECGAJ[t>
%%hU13)0ANVdB09R6l%j=U1\-G@E`/YSlDWBDVbM;[W+t*/kE&s4f4c.de[O=S'414=0)-[rsn;o4TOA/1_@g-'I:osVH61E:DG@o
%.^_I2B9Mjb:cdU7I^:$Oq7GECdJI:S2G9V7=tPif:?qe#'bna:Y=cE\rqp!SW9"Q>VOuhU<\;k%/Pm/FcM/?#aq`F`cbboE$"[iB
%6+[&R?i*I30IZK2^/D>2QDJ3*>Ud^LF_]rZZQ&o#DmocZbt,frOGb%k0q!YPh,(Q87L<6N*En,p%bK0P]!ZX\<N\\*e[0%<0MQu?
%k-H'S=KYmEHaPKQ]sV\8.T7dq8(/61.if#$ej1+KgKL`==MU/aKjiM/"M;oZU>kjW]=+.$#,Vg:r%4bs5Y7o=Z*b1GjH&4PQAJD4
%13)*hVW)l#r/K%!o&!Dr/i=pfnAKQ8a+W><,kTFK;#TZKZuf"pL=]VY8$"^g(Smpea`<j^8(7.=d#[;moQR3Ze^//g\<NL+\(W%W
%>a-5[)AdEs1:1G\Z?]TT<K\UYFtTfNHEf>da'(Q1<uNm/>EE6;\AlrG2&i1i]4h0QWs9s\FQGrn=LoB9\6ViggJsUiDJa5]GmTr4
%]%R(D1*'hfn`SD39Si\"YL;#o')DD*VD0bB%n@1-]/AQN>ADk@[;)Pq6e%8i<,-N0b</f*qP%#,kr"HseckYD\#5![)chO@<W+6R
%lSpSNb-r\_i*QCZl/]rO7(^ueP*A;FksHjnBWR61e=bLBVU9PV5ZUPFk-1Q!dp/OlEa,7R.(3mNZ?]Y8ZlQq=.u)8jd+<L^dK)Mt
%TL-*;gXZju3gn.^P0VY[MAVX6Gf:Zd^)fK+7E*[B\gY!K_h:BW+&m&e)S.N.RPJe;!`5dog;tf0Zb&"IH+hkEksX0!OBSo[+Rs;l
%`atp70%]A3lZPOf<r92U(oi3C?)Mno)/@fGdMGoj"8rsII%$L9OiL'b-]PPe>1US+3$`<>Y)5Mag`b`d%W'p`W+KM<7DFFT]Y]AU
%Sa0aqd]O!o/PK1/U,CeX>,Wd+V&)_#gamc_^K]rG41`pREUsp@%%I-A%3Lr'WfQ(gKQ<[8Q>(?pNsT5U]d8B&o(i-$GcAqgBp_5>
%'Y#^UX4#?O'2PZMCMDne&??1:FQ@K203mlJ!u:JV0uLFPW_<>ZVNbA%CBcLL1ddX[*i)l2gfk2dG.HF#0K8Q5Qb>k&Qo'[gEY00[
%A3=KeD6_K%%[2`IrH;\5'+-B93[ag:WIqmc@sX0A:=A9t=f2aQX)?b5FWD_o*FEXl1X\90YqBs<YCd-i5b7hKV>BYMTloD]=#%\L
%dZ%oq$fa<d<8KM`KbcNPk)N:7=Buslhs46^bn>5XKUf@'m>,Cq1OdW6k,,`71GF(@i-Rt&.<K_08cu1;4_7lHe.SYpo`djKF`+32
%=Cj=DXYMS9)s4DKVh,Xuhi\\U,<pYNmJQdfO)O<Mc&2ZXp%3tsF^K9dW>nR1C4lDCE;:,_Qe^ku-)o,):nMRV9o-N/oFGQNRTOcG
%EJdok@V)APlQkQ1l:ZIL4bKX7rJ7.XB52&,*F_-jE*$tj':uGanC/:HHPH.o-#mPc*M;2^[4q8jbp@$MCbLqGp'(o&)pi%<;8OZD
%'VfNB(J9t5rj_fKV06*X?WNEHlFRFu#PRZh&LK.hb&Y*;WX_B8)'W,_X-@=V>^ZQ]peHQSrQ^+RCe772o<*euC8]$XPs\ZC<2&J2
%&R>t?I+4L4g?<V47$D0Va(+>X5SluGKa9I;Q[I"PA]i7*?nRed7<5`b'nR7Q&>4_T8)c%)esU.^I8&nI[%47Wh5W[iA59H9#;49;
%bY[HR:mUJ27uoj;DSL\tGcUUJmA9L>BRP*&]jJP2]P?5KRD65>r&@n4VE5<Z[kIHF#FdenpR`J[cSl5=*ZsgWHR5!8,DY]MC"j.,
%UQbS;]37!3mVI;E5M=^rCNXe]YK-n^Za3ZAfCi.Vm-\2nGZ38J[O\9/lI0CB>WViYWirKjq'-TpEquP+p1_:2qseg\rj9D*WAb2*
%kdU!Ql8.Th0;#Qm^>JldHi+qBa^#f<04LnDADSVZpZD(6bZQk&DK)S$]$7E?gGer34.Dd_I5SLBeB9N6QS5$LhHp$Hk=<5@jk'6C
%\$f64Y^*d+h9B94:M-Oo^-Bc*beh\smH9Pf$UVXN-i<;r>8'1`qO'Dn+5GUVGCMa!S?>(i#UV_Lb<78nqm!e;g+1Q0bLp\.HttgM
%A3F,PID,?&FXR(]D*D1g4aHbhjb)m$;Q4nnT;nr=Q\B3PZtX=j=hFP"qe#NUbOTOfl1sB4p?IuNVJuCq-WXVdBC"Ze"iWH*n%S4#
%)PtLIeYe1,)m'&#BpGr_cD?e?QO_6iRnY[]=j"GE]RuM[O"9S1AX#-Sfo71tZ?c4eH$ug#>@Y]r;2:3dV4Hthp4N*dCECHa6Fh`p
%c@]a\g\eLkrN?'DP?^6Fb3;**/4#Pm3DU]([sWAU4)Z%i<6o`+<h+:]T^U#,_u0Ah0Xjp7I[%UVqPfIn3;CHO:5('H@Z66B#<)Tl
%oiZ`JIbK7cpI_7-Y3gWReAt.#!##4G=FKmZDiNhL?Tj[-hETiQ.fXblNV@&#1!i#9V1(.\CA2;T_H4^.\bu(&;cRXod<iL9F5G]_
%9'<bPHua\#12"->X1?E5=$QG:`Q&L5SVssq[U8+@T4Q<N9ARh^_pVuUN*%J0)><a`"3=I@[.iPVo3Td96?klGqX$aLF)1%6$bt.S
%2KP4_HY)'05e"8/qWu&LHdPJW)2d*/2cno(g)jY`GM;HM\+\tCqrbVY>Ztu+d">-F<d1%i[qKQ3X0+Cphc-=kOVAM9[JI8>SBoa0
%?/m6eKR`]TWZ^rX\S1DISTXC6c<b[@rN-t%9s*[YhZ(s:LY*L0[%HSt-JDG4'<dR+IahQC?99O,p+D<k-b2j]]k16(T5Fh&L_^;c
%UTg@NIq`qkgKsoOa!(=0SNHV_MGah<??K%nemE!K^?m!(Z^3=N_gHT(c=b>nO'ImgoY^ZGc$B.l&U1g?Vk8->S3;*8@02;e4t9(5
%rL9VjPkAW-Q&T?[DSC&_o,CD*Jkp1<rRUoTcWf52?Urg\lN!4ufkRGME7MMuq3\6G3-_.^[8kn-</32VZ@YDd\GGjZVjDk3='n4j
%=n(fViQ6QC]NidQIXdd?W'4M4$NcZU?T=I[_rfLp]<d-!Ia<H6!K,Q:2>4`e/^i?WCVD.k8'^6%kkLaY=1\5'a=i)TPZgq_ksq?f
%(I2%cI@N<s[@ZUHh@s=I.XZ'=PNsU\bc?f&%4F]pk^J-TSMU!'-sQIlAqm1E-]`;7RE+2O;o2*iJ%fslRTBV+E2*J%MdAfcogJio
%gk98\/c-3K<qi)1CM0KAd#`2&_[uk;E:qm_a5Yug:=jY-fkU1S)(TnAPFU`@]m?rThqk+Yr**KsX!\@=rp4T:Bt*fa87R-t<WdL1
%L%Aa-hKa=M_2_lM4McO(JlFs_Aj*a"0S?!h)jQ?ZF%4cBccF8H+$'<Ps2ShYm@QWu#\WrTONGSESE@f"ii\r?g%P+[f;-IVVs3/)
%>C`j=S^RX#`dchFQ#BfH5?l2o[^Wm2g2[sehF&i31JeMLG'Jc2(+0uI'#eeo"^@mYB5b^)CWf408G<uT&?.hQe<&0/0-U+6RjWbr
%0Yqg0ld,NQ0_RpK5hhf;0rJ-92nTuJrqUOTR/S5N`r\&aGR$l$;QUWij:4t;o*p/hWU[Ej5B#,5JsLcGQ^)nL.KUo,G_)lB/:(*W
%_"m%OJo'1<9LAG/aMa!5HTceS\rW2.s7!\A.Z#e[OnoNg*;4K*Ik,%9)<2uBeN!ZG<aLKVmhC\r5=Cb<.HH/0c3;=\TGWf^F3/.c
%FM8#EI3&s@Wk(MOaR:iZWlbZ[(S[a@'-lanI3k`9eBmc%_rX?,:=pec>69r#dhkpa6oD:bJUFtiTCY)K+tKZ2l$Z94,Yt^c_`:+0
%p]<&$&d9bH_SJr#W;\/H_sK]+Foo)C>`+&>+\o%h_=fFUac*l5#OHk'LMUC0p6`<4Ddh$PKcU.53WIUOn_0pNPQV.&nVjdVHD?[&
%D)b)-Kie\Q-5u\RagmMk5_<kq_0]VDeF`iW+b+_He&F-VmloT7S8Mk:nNVFRYk!Z3n'[OV]DSo.]Ssgs?D`iF\\*4l-Le':A4Fb4
%]mJ90.d#"Tdf)6t"C61-"02*-Bfgh$4aXK@AK9T3h0\nTKg4+j5?&s?/j(uF-+^>0PO`:DYd(u7=OkucV?cFf=1caf0Mtn8a0#?6
%(sWoOqGbOKXIFtuq77kWV,b7&ELSTj[^WtoC$/ecs(Uf<m%.96-]QTaRFCRiI;cNtYoNbO#0#YI]VUq/$9D<e$V""1_<8.sRA9-:
%EF8q#6Yuq+Ai(:@Fk$mE[T.X#_H-kI?Cp4a[\%r.UQM6'^)gfk]moWFo(I7kB"rCdBhK,Ii9Z&,nKf3WFOG.Z*OKVa$U3fI#H9HO
%p1rbimda*8FJF0[)5MBCB3))C/9:c3AF[YKW6kAmdGiCe<)G[7(\j(Pb3+5d5L3A[3#c(goqa1C`1NFD-I9Edn73p.-8N*6$or$C
%T@UaM;u7s.+=JT$;X!#>K6Z9!>712l+Ql>Sa*<o^>$lP-8pFi/q[W>\dGsTdlGr6\p"@egfjE*$\0t<N'j<`U^]6pgebVGYElThX
%(I4tN"*Ai'K]#K(eMn.6+=O+:(%g^XOE`VsNaL;mWRXUcWM4O7G>idPKdr?hoA@ldH+Em7luMi4AWNKZ,Q%1CPjY#f.pq::<IUq)
%hrHEIY&^WRZU&k4$q7nA`nA]P)XQ5PUDod,LM-VuA,1%MT013`21"0%P#lk<#]-\-h"^6A;W6a*S)YNfc,]Zrl'LU^>fs^)IJPRg
%>:KGV.%,!;1/OW^H5FUkiRL@iXmMnO'(Y;L62(/u^!5)?qrd.VI!n^V+/WE4hAi]83op'6%Gjg$&q/NJ+]%Rs078<\>StIm\R%(2
%Wd0S@rb8U7jt9*GAQ6&/Tgei'\<VNLqYXXhVdI:YgY$oGnNO%!YO@22KsPFSFMI_UqW;L]m(C$pWIB*'g`mOJ]M%e6oBT/4pU'Z!
%oICUX'5h[OXL!--1,!gZhEF\M5!D;KpU;c%a$2=lDi5]W,1tc,X;Uge3u2f-@Qi)g;<Nj=b;V'Zl")YA(CXfE'JA%%NFY],MRO"(
%iaa+l0'p`[)TH%8`/\Af)'$b"TCXSR[B4h:INki=5(7q.:ND84!e$Wf5G?IVBHqf3E.715l-!BcI8XD/fmNbY-CD-bSGW+O<]W0*
%"P6jBS(6<6LTMT38KVHHRuQaV\*qtL*Qd5gm\s0`n"3LJr5ijTkSXi_,-UCiURq,bgA7VO\,+%ReGPA"qG<WNLC\jFkjI;Ts0K:Z
%q;UCKBCeK>8Y[W0"Q=Il0)--p^%Tj!_22rk\P-Wen!.Rq"F^&Z.p$F*'tAhR4=K]=K.tE\3]k!X=CCT4Keo+oSj2!l2]?%EQY3kP
%]s[!2010q=TD(su[?ZO_-(V)<9/iML^&+n;nbQPRXK[>0dGpp@qUj\3hJ'0?^!-#g`n/K#2tmqGrr!Mdj:RU)dgZkW_@s.V^:_^_
%Dd@9L9-qo5etJS:mU;mhHsWhOn$'u])>BkJPr<!^>E]or[!VN9kB_Tfl)d@f0J<b<6kK^e>NGSPqJNEQ>k5USIIkR+[X%LbB<1-^
%rKWR<Grk*%Bg*E+A@#OTp_cXI`m(FSSDemBSBk6+S'5$<B^XI,#HgADITCYNO5AB^"A*1R-VJinj_<tsB,EbA_p$6UcHh;sLghEI
%ZIPk.SXn%';UKdXI+ZcZcG"WH=H691[]?7N\V&>PnZMh^FSgCagOji,P8J6/b:fJ(]GFrG?"k;amd?ue&@Y`deuORobM:X#Y;Y-O
%V6aPW<M/n\]<!hdn31co4Bsp;+lD.gf_Er'Dmfqkgp9K]:\3`[*oT^0._5Cen(Wn@M*"W4)h,Q6GHq$UH1Q"*qOBQ-HZUnd0@(.1
%\cq>.PHn$sas3k0]CM9hK(@ne5+D?Tk2Xb'LO=",N!<Ta_68'HffRA2n)VWt^[KaIR_)$o&oO^:.\%E7\<^<$DlfK5B%p5lQ;PtH
%G.+$NhXB#6`hO@hQ/.qMh3YbIa89d^4T/_RNiT4^9rPYOrX0<A:4Ls!h&O(^[E2`R++VX3'BdE&kc\9D@;J)WjhiHA&_JqrH`qEm
%>PWO!c+NmdQF022qW`2`=0?mc+l8MNko\_d.;^V8EqB/ceV7nE'dIhhlKdRCY1(%M[G8`blB56DhVQOjC5r,GWuI0?^-B1(3kOo.
%pZg<&L+qQ,S(%'.Sp@l:hoqVGpUg(r1/%g`)pZo[k1QoDe=q=LW`WKjdmgb*'kj8D-`C.r\Q9%1Z]S\'^",:ER,9X0kKraYMu:79
%CF6-(hdR(V^^.6[_dIl[.a*RMI@`!nL]o1gA)I1n\XfQ6Kt3IU5,`,,lS#F`jE&@sVtm0T%=7/bj_DiirFDrp.8;$1d)u"?>E]qJ
%qB28YT,0TDlfj\%@PGp!IIqf7JL#SCs%%KUPHgHuhsN(?0#"&H0giR_U0^<%m1\pn(rY_^#8D5_fHi&7B:MG`U3QUAN!nrQRHF1i
%'>Cg\"?JY[,=?Xq?k5hYY`8.?DeNO.O^.EursLGAQM/))+?)5B/Ub*irsBsSo8oFiEq@i73R"=\Y.$:IIHIUgo1rE<*&*B=-!4mJ
%eG'gE<lHT&PM:u?bI?G!@E;aESE.01m`-mOqrdKMq(f__C>[LPREOoc0+[Q1)E2Oe>*i\m8Y#ZZ]Cl'h&']XYH-qdB;9_&4R.o0T
%O_qcl3mO8hhNE<qKXPq,okF^YZ/%Gn$;3<8-ia-aaW#%2*,TScA.Qk;#P!61)]Gm2gaMPq1gd=SdKSZ#,s?VIrp*n\qn`6eqWaiC
%3BJocT"k7)h-JQk,t(;'d>,^5<>R$MbB)mj(JfL37=O`0e"f4^O$D\IoidVd]=/0+&Qk-196Zu'^?gG4:%-VUJ,D:_aW6W'@$JRa
%bN7hJmdM9R]s(24=Q^IK?MDj`4hp2_]=&8`ge%s`rLf+t\!D=2jLg-a3a8VR\oN8QlP^##pUB0P#+.!=Zd%+Z/pd?^haeb6bmKI<
%I+"kUBk:@WK4=V3(QG\1gjFk@ikog)nkn_(ds]bpRQn!P2md%ohq"s'7ljGuk-rl>gu)@qp5QK.YeWf6M])E^j/-J'It\8kN4\!3
%ilMJ1oaZj$Fuh,qmcRoir;&3Ng&?.Ze7mfWR'SGMTLlk631C^SO-8W?#1Ri-(18e%jNkGFfCM(b.qdg(7V/=iMhY`/X`r@">psZ/
%J,b^Zp1<^P/Fu&L73>Np-;tg6@WDUO95#p1/UP-#ps*XJqXaF,I-,[O[<^Eh28cRba8'Fq-b3-`Ga!JPh'fOFCTk&<l1/3m7DO+]
%nl2M@p.t9>>no0`HMTfd:A0ASHfc;t@V=S*CufZN%,YoM"(oX7oj#4n3J8:CCh<?QCO9@@/0T>pf6IPrm^.1=<l\-*FPkm2V(;A$
%^%,e'8lM;OgTq-jR:Z!'c($TuhjnCE=)O7=E1[TJo^:c,_VX"uh0Y6SeCDhsD_IK>^JlB>PF&h<&![eFG0aL]IlqXtk6a!^7K])c
%*Z<qCN-$[9"c^6fJ)I]k]QaoEd;r.:YC>p)lhrcc?'M@+kO!87",?0s[JZ2u%'/\Q-Yp8ZpF_I)`%@KBSTd:O1OPA,0,<.%+QC*4
%UJFsNgh$*C.X*_g3khHQhf[>CI(%p*\%ZE[I9LVX,(PFg*q,A?pV47/0<?tU>'mfF5@8cH)(I<_FLKffS&]Y$hm6D9q8^"Ac\mXV
%d;nq:c(CO94N)9)qc`sn5jPU='l:T8^,o<e%kY6IJ73hmJ%WO\It@2cY\o%-eGG$cgrn4Q<%ki6ICN@i==`F3k./FqpE*i4T;*.1
%*HI6kANO,RepEgk/3AWPBc0t1)s_a7,Lak9nqo_!aBHl*m;.3!]?;)tB4gSteQ7noXmKs"e3IplQXM";\"UY^'6Pu.BYVnl-a1tm
%*dN!r_f9!`YFMrlO.XMM^%L3@lUJG[d(=V]#(Bq;4nr;=>J9e,n_WPpda+HRE4s)cI!RIC`.[eMrB;b:hHoQD]626&rpQ79YT,k*
%QfHJ&&tKDk4%3FlgseC@FK*q$Nq*"eU(8/$.1E<t3>!87"c/\_C_[o*oqU8$iKlXq*h5><);Kpe`#WF3%o/u3C:,+t<nD/c`6IIb
%gnouk2NA5cSBIO_fJV3QB@d$ga2P+%60PU^s)!;uh6Wfa'`Fj'@]0+;Eq-;9q("brPKME!?:IK0`//ZlD-:+HjL<$dPis0)A;=pO
%aD(F,NC[``46HGrHF3-W,#`K%L?LkG_0_gN7q5U[(V+ocd,sFGe^;U,f7!.p,;NaI`_qsS6ci;Ha5%0bktX!uL/d:e9Mf'HMJPA'
%/]kFY6Ll`ms5J5$el)'^^2-6`0b+G#Bq8\%Z>og>:Xj;Ofbh/i=;t)FiSU$n_ZgrAf3#J2:cWd@K;dW=oKjSbGGlUAJ7l,D)6m`X
%;dBg_;X-*GO;c5K:cbe6i%(W]\udH[-fp<WqH1%%'/ATNWGiu5J8W^?ITH]K%#kWcER;d,"Ig6VJ9Ms9O0?[p\)YY!ZpSt]def8Q
%nh@&p4!kM;(-hZ&E>ipUd]c<=/\-P3#H1:cCf"!EK"BI7[e+Y96W?l_?8Bd4LL)MABqaA;mS3MYS9BfEOg^&$aR]_1[B&u4l,&%`
%<'5[9Rl?,8Z8J-W,'YNE>!^;>XVQn:1TY1N][![kjrJrZePCVGCc"f:m:O%pC];iqd<kaD<XbJMjK1O]/7TMJ&=74<-%]Q*.t)ti
%,*\5pd2CO2,.87VF_Z#Z`Vi2pa,c^tC(PuJJ0l+<Q2PmrpDIL'%>?j$90PI3e'J:`m9Of`h0cQV4i)pS$!J2!;P!EZg:0S[D@-"N
%G<oIUS\S5RK\>iQj3e]WZsf5VP;fU9""o,]0m;8iDMJLDlm9qb&Fu2EH/K^-f3cer9bP,RoO(_UY*W"kL1e.^^t5g,+:#\JUBI>)
%M@>JriVIr;3;Q,sUl8DB"q:I?IQ>326(*YnY9XbB/"fS8h7P.Z$cV"g5kirg,Z3kG9b`A(*$1>g@[L5?TK"4]S8>N/k+Qc)b0W`1
%bA(u4p28]]S+jf*::Rl,-]!H7e8EeinJsIK+994j.gU&@DOKdJ6TS%J,mi9bFM0*jYG6qpV?Nb:g.<^?GF(mq2)BuDkYi:AP:=aM
%)D9/[+tV%.KT#5RMU:El=M;L0"]L)`ruG(3Q:p9+:*\6ViW2o7U1WWd8iX[^d])=$Ae;Ll#St%;Zg1rrU/A#CL;d$[C\5&6iDOn9
%M't76)'MJlR2,g)H&Wqt(dH]hbn>EWmfV!E)2l/N["L(oThjoKm<'h[oYm;2VL7A3s(,NZ,]8LSOHlPr(,#UaA!s6$8JN0!)[17$
%%5>B[UkrlTY5Y<mmV\m)N1;^l+jMc0ptLF+C,=sM'b3"Z*6>i'_DPeFcLHlKrW_,4^Q?u>CWL:0M4\M"i;5Y/Go[Rh:Ba%i+MJ7J
%ptoBVq+'o"5G%NB08$T>VK2UN1#')Q50-3]8bgJFe?N6`?QK;4BfI_oi%L,0HpGE&kG18^\./o+[-*l)E^`)PD7L]Re4W``,q7j$
%Zu&pJJ=qZKK;PX4Z2c<Oq1iOEZptF"M+fSICe=hU#!J3V#aF@`!9S?n[,Dl`$M@"I&*=!:,,pWQraEDQT2stYXYb/@P-TWnC-W8Z
%8/fXV;t'_`KA)D-Kh.nk0P[IZf+jqZ+/q+'Zs@>fg\(/:_WqW/j$LpfgIY?/&-:J.@fUdgOC:XEQ:Y"Xa@`.AW5T^EVMQVoJWH[:
%HP+Ur4/RidD6pT^g6ReGL;P9O5`(`2[)jlFLCD0Gb;GXknZl<OYq2t7<5:4^?5_a*LcSD_9A?nq]@BI,+:5#r&c'C7o%sqq@"a(V
%;i@>oEQ59VCk?]+Tj$'87N)EWM1?X>,EZg&H[:p,#SN=.P0AS:;+rFl;-)fGa=)>5jd">NpE9"MJPO3K-J7'*+.kHdC!Rq`=pUl[
%%HCB]!<F2DnTAZK+*Cl,NhEPC[N*Hd;<i0N%A@q`K[f?YU&$$l3bd`dZlesGgPMXIQ&ZZ_"e^kp:$N=hY8OG\TU*cq<<GDI1(p]-
%BGA@,UK-n&-s8W82*cF<LCd&e0Hq@1rM]+O:)!l&aW)sk>%uHlL4GMU,Q]Gmd##c;3WYeR3)lfK.Me'p$K7k=6T*9A)E/_f.HoS$
%L[#RQ#KNT#"Zu)__\nC7"iHH:/8.UA#,=3_?1d,QSMMS)nYeoCQi7gubHHnsGZ6'KVO?2jQPumS(JqIa#,=3_I9agd3bM&@`1o?s
%?+7bG3X)@Ni_c7uY2A58SV#:OnYeo#UgrF]?(ic#*KTJ"1c6?WWr/W]mU.Mu8_6A59um^=o#XHj.?8P3ZN;Orq#ih\PnXS1F@XM5
%=:iF?*0$;r6u?gMko=H:`Z_!/,,9P[diBmp(?csk0PIu0/^QO2Yp(1QW8^7D&<DjJ]lAL?$&Qf]6?S,M44tPYl;H&#Fi7NH\<uNE
%DU:_o[A1C=Zsb^=o<.7Z;%s3YXqD)HF@Rl.:b#h_KS1TNomV\H!qH+t7%q1S7B)<5BpYO![),0C;9+\fL^%V\C&-f:E=>Cm"r/f'
%d_NhVbsfPtTY@pfp<c2D2.;NB&lfY*;+4oXI)GfP=aI';D_"PXg=:IGW*UE3+WaVt7`T^KqE8dP$s!I*fbVr=%%".52&+WlbSGpa
%Fce%a0FBo]T'J&8I1#MC$0t)8#!$FL!QY-K"&PP?#tn;_]am@c$8rg9KFUI/$6W9U@C(F4nf1`(V@.es'?]YGAW0!BE2?ZE[M!83
%P0?SpZiR+@H;l/s"Mfg:EuL(_l'P:^<r,:%`\b%67A6b.$7aE#)$@`2Khsk"Ih2r%PAPu6>/[*E?cPEQ11IdC6qkdI"[j3=;JZnR
%b;2"(/)1ZbUcOA960&HsQe=ZJPUsZf2-@.o;@_@q[hSMt7F^i261fe`p6lTY/VG+@$Rb,WK%\)!ML\$M#IZIarh>KFgG9m^f^?D'
%C^9<Le$0+O-AnB>#.T:D345M0Ll0+%820(LTY3;l6d0V]he2usm:$tHKbTa^`rW,6!Gm+<]=eEAcoO&s1GB!+&cBYCkj<DYW%a0"
%LNciO(s['8Lp6`S.MO13>3e(b7ktW5$.op.pL_;c[nXS_Map,K?k#a4B<c-+!XP*)R"J87V(f8a**Cjo"#-k';3F*-$q,pYNC\cB
%6Yrj+4VX/T!=8Ol#`pcUq']o&CFDe;d0(T]TFs7p+SrAR3(e!SQ3H&)!D5Kn+U]\pojUb?>`$&#(PD!eV;G_n"W/k8574,T!`V--
%!-B7/2P=8^Eoe<mN4ZA.DOT/c`>/_V+1*#L$'&11EIG11i"O!N'ZR#d6o0G_A#;6tKTTn=iuFVi"SL_]e?jV;cqR.W+:+@n@;Q)\
%+]-m_-]i5qDk'NgLk*:,jsjPI?D<-;<6h1n;XQM6e3GrQ6E\Ei;3Y<AKYU]A!KDD08"jQ8&5ZmL>+7GT_-I)_X(j#EX=m>C+XAO!
%Qr%m:BXpDZH(IgY"]LQX30f=?-EE)u@G;](kX/W&HNEoM9i(7q&//c07.FCm+W"5g6!Bg:<435YeA+(12P@r2cPD*Z><4:?C8dn0
%KH=\&-m9?@.'m;0+9\-7QK,P!;0qn#+IMIaRfZER$\G7KZlepE(KN:D(tX'Upi<9TQ@uP1X$NMj;-DII-2/*1%<VlMqJZKlT*^(r
%;-<2USM/t?d!NL(J]<lu3Ylj(%="VI"I>]-M1Vr5FU<*HncfM!gZ*<;!6'03W99?j2BP*b:`K3c_l@tnaqkeD)L!4YM$$S+b)Sn>
%`1d[od?Uk[i/BCn"9tSCeYJg(4DHk*odO!0>n'&=P=bHo6)hc@di_Vf!5m3)qrm=DiXA9^[nI%%Wl@)R(c9a*k]ucSTR%+t$Lt&A
%,qp&QgjLj^eYNf;Rnskh5pojG>g\8ZFC@?GJf4m28:`>17k(.o0JjVH^]D?>AI"s6J0<98#/3dKP"M?,;S=$R+J=*L)_<W,aU)4G
%L'M=N.4B]Ul.C(`8oRoUl'f+$@1>\K$3i-@#(e>>KmUOuDth;H=>LcF!YRAe%1n;L.54l%YT]rS$l5r.no+f.3X(C&$j4:!?`8BX
%G7YZ>!%D_o#cdK-U7KK%Vub@R`-45_&K='5oc%ns`hSul0%Qeq^`\-JbnlFUT%8.aXG6S[HH9)*$YjSYpalLU%1%VF$KBH`Jf87k
%.!E1lY&U+\N\;NX&I`$90O%XH-?YU6f'B6W@#5cg?`ob%T-Spg!<XZFK*HCn8VMVX51F(C<#$WMD&Pl2M`0%=cX(_PW)+$qbE@c)
%^.RnF64=d,@%cDOO"U(:Bgd:r]MT<&#2:NhalLKs#,%+GPLuuQ+,,CqV#b<jg`P+&o"h=Z8e#mpE&UMpA[WaTUQ4a6UDEQgPUP-@
%q^<jQMatZh>4EP;5-!.")]/$XGS;?GB1.>tIPll?dBKrAILEq]'a7=n`.E=7\8<Q5eHmZ&(m!qr%!3@IrMUZOd4o*7;,jG$W"BCA
%W9dj6ol0#&%n=Ik&$\22'%G(P2Cd]`SH*ujbTUYEYG?XM,_Gk+6>3\O((Bc7g;]n\C2rXe;6W&tP79qM(npSU@#G\Vn#[$aQ#BKs
%&<GgU/Gu)1_=76N9.Yt$04keX9OSK)duMIR+#OnA#,=3_$P]]&%73'fVF>o4*2#Q4%9BS[6sp0a,m5PDLJ0%R(^]_rPdhjCh,$GB
%<ZU-J7*cTEd32VL(a]uC'oKt]*^tlEHoo52V`k^R?p1F"C9s;Z5S"ioG)&Dl%`QSHUI?>jU`HU_%6R-0jb,q3)Dm=4k_?B2Kj6*$
%D?Og7#,\ZXK!cH>W"sBJ"E5O&O1n"Ya"ekq/drG]PGoQk/YpQ1MA@iBBEZ;f)cJ_YEF@G%2["dbbQi,HA2"j2a!3ltGruoQ#bX7N
%*<."7q@qG"IL&Q!Q,KYiVADZeOMsL:5Rg6W/uJ;X1Pug,"L20c%R2ItRjG;-iXTKPc-XLf&@$pJ'h45D#[uhD;h$I<673=BEsQsp
%4)*Wr9OV)$YQoO]AJN;=QD:4r$]q'V'L+Om8PC+c643g1&H'=[=.UodW(As7h#7VRKdb(`ffWZB!U:.a6$j0Jma`fq6>_KK'[.;3
%ZnDK<73nPUYoI'PM\)<2EH";j'PUj)>I22-n"N<K<#t=(+7`f;OK#1/4@c=O_E9sH+IgV5KdW%eNk#4t5sm@om_Zj-6Fa[_:_t[*
%+]f)]*7^(O)qsm8`9maE7Xd=b]9BcBTns9^`t@(fJF_aP!Ep$_OfhJBTah8Ghp(m(.NeqJK0sZ^C?*<e(\k:I0bQ(V(-^.bL.atM
%Ml[kV/ttVQ$#"!%5kmu3j[%eV!cgOB7NgN<Y#*G%KW!YBoAtAn2"C4M.)?T'EQk(Y!mpQj)Jtaa1gkYm9ng&"4@a0;91(!UG*&$C
%QDcM-j9C?i)GMT8b]nPVTEpR^)P@fcY1J96WsdFcX_<WI:u3K^C'kchhf[q_!nB@l"R4YJ$5Fb;OMu$AYRkh<VKt!:Am@o=Ir.[1
%>5B9BN*[]3Mr;#ao62c+Z"ZL[9]o6AE/8afemQZN6r;bFM%hbcC07DiAMml,AK!%fe2(W5@_/9qJ0ueW%!Tu.iE'*bfth_%r#T;_
%dD/'O%*"(B:HYZP),Dc976b0VQ[B*SZDOqJK&[V33A&`*lihHa!b%gsEdq0VW<hdXEZ<BqLTp)hEh9!0OkY6,eE3?Y!,E6T5FZ.u
%#$gs`e/)M%p`$OZQ+U5KP<M!Zg,:%2<";]+o&*hZGg"TZr6;siE^j7Dgmp7r.4*H^'q?*('B1tib3a*F/;"B]e@3FB'Lpm+r*H)2
%pQ$:,WPcWCPlrZudF)G!_BM[\Iij@V\"Sdc0tpA4HgZ#RWb(spq&GB5#`@0irTYU]qBf`>YKE%EFhnCn0Y%fT9KUn022Di-Q-iB9
%j;`ImPKS1p'd<:Un;^)E&ET?!7^,N+c9HXKD!?.OGlL7ATBG]t)o$c8#=jNac??S%KfB,Y\"Q(9qM3ffLFB"C=!Io#fITK,K?T7J
%W\Q9+U.&%;V)s"XcaBT6KG$q<D&3Tq.SoZi+Ep$,Y&3H<$aCC8cCmmeCdS_DcI\,SlgO'te/p`UAE>12ODj9.lh`,iHmXH1-?l*!
%%,nEUK+gmsM"?@4qeZU'Ae`eMgS6#RbRpO1qNge:aW]<\6/S07o];Ok<B?!5XRN$>=99^c=QhLik^1M])V-'lgsdLMJ!L5NW4(K!
%ZABG=Oc*$Q]b*S*3V?9O$)csSo!k:-r0%\`31\#9De@\f&7:gAa>jCFTjj\1'$:];dhD^jI44.?<Q:bH+,(;J#jRM,"RrgmcQErm
%Lc$30![g`XLK$@H\lbTAO-1M<f*i1VbLO4[VfV-QL/'a$Zk,[V$;[Q2O89R1`OB%Fko?^GT8ji.?gR(mimBK^eF6;5.o+h1gg^tE
%j&oo/,N!$UjAAe+\+T7o,!rHo+*$?gHo=Yq>:T931U_Vn^-h<6B2RQ[6?NO+U(EBGa"=6V)Rorn"p;?-!d.S7arc\)`BgC<WZ6+A
%K??KX:i-JO']RNFGiV2fEn)<.B%2VtMJV)'-iSBo][Xhh"n<*]]7q:?MP?"6hQsKKN*+ckHIY65`=1X(TcK'R?pT;sI&ViEjAJV\
%DFRl.$[tf:*3Nd&W.dY428:V&*`[oTVoI]SXZ4gc[u]f<)atnk*R!p^Q)Y:3`Lo-%I8KZuWVl;M3/2XU:jmR=#5-sBU\YCs.)_n@
%EOb>2lGHhGW"3g#\m?KgrlF#aI99)`5LOGr`gK6#dB]$kd`9c!XU`Z%;+9E;2j$NdJO9$\X!ko]iu--gWPNN`EMskK$IoBaU(EBG
%B/o4RqSP>3@,S.fTK[<prciN9_c`+gL8Et"0;0TPVF"^Ig4!UT[KiJAeq.5u3&GFW/'d-OT<iOF8"_1q*3*S&Np6u_73N]ma'cr<
%#.>0cltV*E%sEZl_cfon8&mF<ohs=Jf/Zf_?(q,!<YXQ@nI0TSe6oNH$kdD&&CreA<W75b9S;/?6C7W8;,k:^jbSNi"$gu6X,lPe
%S!k4JC/%\=UKUm^<AibE"N*qSTfQYcWAoJG)3B^lI6]8]+*rf24?B&7WL'UhUs>YPOEu!66VmAK*,;=<klcEE'&Q6@6Zi`nZZpRS
%"'mQ;)!F#5R[j2H/nZY`4?AdZY/oq8Qsrma`H5)(=#u%[F<%V(?9"a/ZP^Yc(hRm:-r_90MF'EdSjB-<WWnI.Tc,`pe\tWfLe#K1
%gj5rNE9do:_Q?(/N)fk%F=b;2aQk1R\d>I-X?*A?8=`(03Y'UO1n:\[WTsWX00AL[bRY>\/M&WrLjuc<"sFXm-^_[HFGZ^::'@L6
%j]^WJi&KNK)L;:gP@@=q]gDCG5sQP.*7*jpX\<;Bkj0`Y=/\#RK)BW@GYARK89Hg^B20liL$C-:+:np@k9uHnVLF\!Z)=3>nkgT+
%)GC)-!J0!N:.cTcJNHd@r4o"BW,-lGM)$o.Xi3EGko]mWl'l6A:lSI<IlocP+fsnN`I2$dPYhlAKMc"WlQ!p>QI_lu`FD/=$&&)2
%8*t<?4GpjN%N9sl2[#eN##t:uE'29/02uWjNBO*X!`2r#.XsQA*poVeWml[@T[F;NW"3L*59:is(fqK+)WNlY7]pWs`1opJo[+[6
%hg#'PES[O`P_4YjAKjm#3f(e:XL`hID2,>4@Yp,4BflJDDO%K6NOS988K,dIo!TLDM$igj:XJ^&EK7.rXbS?aS3pc?1.D>(m!qG7
%8l$Gg,Ld5tARGip>)NtW0NB3K&T`bj-sV$@P+%EWTFjTkiK9f[K9Wn:&csrO"o1=`UZE$TK6a%.`f;DaKL/C37%l@j[W6?DeL%.U
%qeWhBD>ud,,Nd@l^i2(*$$/[W#17EB:I>Lu'Z57<L=I]jUPcp5q"E-rm5RtW,oYoM&)3g,`1n6)dIL"f@n,0V6hN>?5o#`:,:MSr
%B1%*r:NpW&C[J7N:`I7s5b5WTL"c$[M4qZJV`SA%<G3g!#cK@P:Y_fTKa4>d-P?YTb8q%kguI?rQP!mqS)::QofKOg9D_2NU(EBG
%7n,TL+.riZP6\6b?\-n=X3OpR7Pm;35CjD&(rYG)0J8o\"hZ>HYJY_sX!b=(-M=Gg.L:um5E+A3dt"%OLS?Toii#Q8ckrVbTOVh=
%4@O&_9`'$K=PCRK<Y8@t!Y)UL'a2Or*t/A"%IO8L2SUf\c'W/LUS28o@bF7Z9FPAY=9DohOpk7VZ/h2nZhbML+KbU@UbF\:n]8)6
%>t*]lilQJ07!UN_#qS0\Tqj@p%S_mBD$Fk@=I'@n@Kl:j<*FbI/IG)O@q-&p,^ZW]i4S**399V%*>s2/qD]<<No<M#d8<>up</(q
%f[q[Kh*9@JeF0$G`5s5Ri!FR*?"[#CGDU0*dBQqKZ^?C8'4n///M=2.$rsjsBP8QBRPq;n7;rZ(+Wf/^N:LBZ58m3,s$f1gi7aKl
%Tu`-".TD(#2T4^36APVrRPPC#JnbG._D[?ua0m8J(^n<tSRfksNd=lVr'J>;LnQL\%V<QrcCp6VJg96nO`//1_I79-j$eA,K*ZXq
%+?_37NnP>8R?Oso)/@1,&VB+"NsE#2+?MQ0AtqIdf+6E]a8+@k7YX")7nY-LQ#_OA#r,@mToo1#N0ls@<[DY%aTt0)W#VeH5W\0I
%,j8)p4?k7*_u.Ze4BN>q1gL9>b8PY3GW9XcrJkCa,D@$[L(hQ>P^t2:As3M2NcBhj.u8rpTeLKs@8?IXDrt.cLOKUdoE>CAa#nhJ
%):S/Oj?DH*ojZ9%h3%;G=Iq*$T7NOa<@;;#d828&`:3.3lM4Tr04t#g&Ih'S[Nf<QbVm;YXcaFNTMi:>!FSJV:?>\F>[9ALSt3%T
%'a91De_DQ&l&M-L]a8!:[*%MH2m>U^Q%`YEXXMmn@)NHXJ["Xl,]s6>5o_H_(3GX'S&kq(.XN_FAKU#<9Ie,L`j6GX94M/!3eN;V
%4?=7lD(^%(%,8n%5Q3tf9`O*0$m.'S;(W3R7NigQ'Lp2'Ss^BL^^/Yk_Ymr<4\0_&&4VYd.Ba'D']MtY@?a5A\chg*0c2-+0^V/M
%o72&e.tfU.JN;dH_Ts0V"aNV[/3Y<DRNZQ'$EiX'+`8$lEu&;H"inJ55%S30W)!mV&/nD13T4lmom,F/Km7\j4uqhDPHW*FI%)<<
%98%5;C)gt&imBLPmJE"2;-oIt=m%jN%0^P9UHA$4kS^N:omu,U%+aV0`/EbO^$=SQ__+8a`#S')U+JS`$PCtjf>RnqV_=u*XD9CS
%USo:h2ZE1i]KEKN':7\SOgdKkoiod$9R60ZYtYjB&DGRsY6q0g2Qeo_<MMX_';B7D-*KkUl.[:W:E^kGb=GuSj/S)'k+rd(VV.l`
%XL*A)+fk`n!qE350HR[ADN-='KLHr1^_dG+&#(-!!)iXQd=B#G!s0)tJAQqa_?]>9`+\H@e'N^=V(r#/CQ>-IP>Oum*9E;"\EDN+
%M\C])CVe$Q2dTpA'N)GiZli1HGT_Y*2N]Ie("1Fg8Dh)##MiVs\B5L?Q0KM(<ausj'_un@Ys6hYN(O/*33&b@3!XT'>h-?m4>X*)
%%/hd\ni1m0`/h>ILIqW%33"38)T*K?.+83qYt$t4J$90Q3n$s+ULdWBpSW)7TfRf7GJ<q+<iF#]5M_InboAr91pq-Cf-%/L7u2m8
%U8TF]bm=u<"o\@ojdN\'7)(o(dE0G(^P%?/6FGdN;2@`_1*.kcQOpF^nT^cWq,SoYh'FCEC?%+QCbR=f'Op<eQu<?7VV)P1i;nlh
%(6Oak)@2!k+;PrPP^pEXI.r12\$h[4-pOD=C8brM:TW2s'H>T04ZOH!(rIm5fm(T?,[+QK/j@m\PG@p*W0u)WPu'B_UI7+$piMGS
%KsGb=JVFNZ+iTG$9"#JFTQ5Ht1ZIX3htH+![>#r4Tt3pekUq#`UUm8qd2fL9(hrdWJ1g'`H%8(Ef?lj\[JY$s35jT"mq]3_b9?h]
%:gHEm"CaZ^J$_mJe$GfZ'-Bef^$++eOMfQSM(a`P<5o#.*t&)dN#A7R2R<6Ioms(Ze-@=TTFiiC#2,!CkucolY="0b*L0;KE^@tH
%)J6>YdtT<sE88OMZp!2cM@;!UeHVm?+W_ZI^pNWoA01M>(Du5[YusJ&CjnpuN\mem4rS0`"mN^r:skgP3PX%NE]'94Ggp9D`oW8C
%_B:p)1)h]16NUS9;"1R6nnZh60I%>M$H%Mg$&jL@O%rY^'WR(GU(EBG7pth_8i%qM$t!GKU[l8UC`nSAW_N<39Q,7]l$]ASTJ(_6
%>)3":lLGRlW/D&O)":gTQ(+W[Yref)clpAeN_6Gh\Y*ifQ5R6Kpe3ZO@$$K]2&%8TGUsT4WPo]GKj'-Sfl3i\1t$)(DUfOh)%)PN
%6oke7J>IFfe)YQkHFXXqGFEjO6a'+D>Aj^K7UO?'7]dn@a+%`V3oVt(%SE5[SR`foKM[WSbN'jH;2@_"$DZ]EG^r6i9E8gUW>''n
%j%A>]J^Lm3&f=o6MsQn<pC#@k9jg;dlqBi#k]0\+/hi/Q?"-cE1jKIt+V;e8_i.W&d/5RbP#3#O\]YsO.PCh&989/PO,c_:1eUFS
%(_,"V;jhDeQRf[#OI2+=(e@?A=HqJ@M_Z\*5]h;!5gbi8/\f'.68`c1(t?JmX%ACYDZs97?c.h)?na^:j$a**icA>`E?\+b'H.UD
%J3l@Z-@o$0@U3@UWcb1BGfq/[=6N7ao[USe(k('jZRb3(:l'^FOjR%ZSVg\!l)IuoAe^<;bc&Zt,,Z>'&Bm]"N*']-c8.i9+anKl
%;*-6`!?.,]J3l@Z-CG2<Yp$h%]MoK69GJK*0VAu<Nf@t81>NY,5":p-go,na8R0^Q8I3::$X$"eF@_a"+4UMK-`;g9?`lS='T`+S
%_)FZto.tjsd12G8+IsAjQ!=RDJu\LOb_U[RHEF^=*bfoUOe=XuF<mdh%3,[8V#))G)E9'lEglmR03=S;3fgk--"s>%[qa9_$lr6i
%kc!QGlUP*c^6TXRb<'rSeW(P'e4i%&jgsq`%8_IP.LP_0R)Z.]iS_8l-Q']qnuY_B4)K8?bVB(&oE.o]Tb'k@jSOhI28\_i]U4@V
%+*r8a1t8f3Km7]%mHq[jbRAJ>GIo7J1s1#mL,]Si`1pi%gB--FOLB`?$B#*$e9T8NgN<p;0Id>Bii%m)Bne9_dV*.^&1&m]fDun*
%epp(L3i9oO$/,qp%/9n&]L`=me6l`1<hb9r)SCD0U(EC^'Lp3RQhF,%NOCd;a,&I3!>oS'+FcL7T%7L!D=q%ebQ+bV6lZ[TW\YJ'
%L]ti;1e`%h&TtH7$f@h@l4J`)(^qh2ULW:&Y<[?[+iu,RY_b"-'cQ'cTFd0EM/No#S4#f8\[\+DQ#2503".4RULW8PUAm^./<4t`
%(\jjC4soRZBE:t76s3D9`HYO?O+<t%4<Tt8F.2;lb$n,";EPsB*YO2AL;hL,6r6N=S;r/49e[Fs@\+kh&+;;N$i8<eK-")P((Ya^
%nHE#>G_B1RVEr]HO,O=snT^@EU,j^@`e1(]G*8>2\:$1TqcdpE]`P6.9,tq!H\Ip8?JO9SH?`Sd)M]5bG]XpQ^E"1<0=AHUqX>P.
%k*Hj^1s?tA]_Y6/IM+s@"-hf-Hm;b\TjNQfrmnWeo;O6HXjBpAAtHnq'ZGh5%I+Em.D@nsR[cUJm?`L0Dc(mT>oYuDUP&i-4XD.O
%k,,+D-'=JF^/ZTqij7mn%7)ZPph@hMif#B%Ak-Si_$mK@/34X@ddduS$>-hCKnhK#eFN2=%P14P6R?(PV&$?/$K*G&r`UU5/B>+A
%c%3pY8>r98i<D)*4kh=c,PD(!)4fCiU_FR0*YdAh^J'%-SA4cQ:L^Jr-GH3"#!AKs0_t)J=Q6/_7_BGM.7YCW5`TF0.C@VR=0;R'
%&s(MrkZLjK`+sb/.)SB:J6II8'YOL`X<*sZU)I_*KeeP+WWVH0bY9_^P_k_=9n',R\?bol`Fs*T'gU-^[XTY=0JH6YZk,\]Gdt9Q
%9mM\FG9CRs4h7f8r$LB>"t5+];;4]i'F,s/+>D<b\HK)h+CHqE=6\Mo_7I-ar:jGp>c8.-BGk50(!LS5Aq2oXD]l\NN$l^q`Q?Di
%M!Is!=LLp]#g9*L19e")4:bGJ\5.p3a7r$W3lhh1U7l-:%US@C;DCN/CR!kp5Y8nnhsu"n)_c86,VTLO<9k=`G1R;=XeD\_*LB=B
%)7-l2A,MT*,`7Y:`=t++J'/[@,(H[lMA$H1MEDc(Zn=V`:maCn#?dF.'G#!M\+JZGOC(Z9eYW&,'YiB8%r0en]dtZTF$X.m;Fj[&
%UGW_(\@KV_EgmQ2UceY74'jjXT$7l!_2c@Q#l'i=T6Ze`"HHRQM(L)@L<koINEt%.[`NlaE!m!aY\tt_a-c%'#UbA-I_:3sK*;8o
%p]dLZf*%M8Q;0Y0,TCb^Q_<EK&-6@M9^Ek7jsD]%Zj+Y[@tRSnBf1;$e3k[;CS^'7#/p"*98)@GKsuqZ-id_'..]Jdn1EO\a<s6W
%lTLb<3Hb<\,p3\h-:Geh.!bp23A]-oH1+*(%>(Ff)^(`+*>$%l*-r5bnqQC#!**>B0ne"Y"'JgI9*esb3QQV6*CmWuV)05=Oqik+
%n:5IA.(+heU).?/_"(EDniD@r86QXig_QV,Y>dbm<a2gO!(i&&&oK@VBh`I6f0j<YZs?WWW67KW_`UHk&COE*,Bgu^-=[ZC_,Nh@
%i.D=IS7]*:-=m<]KG*=05Z2m#0o7%rSlA.n3R0N+KQsrXBM]hqQ-]RN+daTN)tO6P8VH\c4*7osX:PFb%'1j;ZS<S65A8_pL;4$+
%Z2&IG3/^ro>!`M"`!$te1b_B!o;MndlObqLdDopaL7g3QO@WERXUQ4>V@Uhg^P@#n<*ke:S7r^d*T:gF77ISUL'nSie4\3`l],dX
%oljH<j=TesdT]Fs>,*m*6&</ZLp&(u9#G-K<:5W'+H@01k@6e@4+J`-YuiD1<Xp'+"JS^_,_PYi(%rbHX!>SsO>.m0EC#L+^`UQ*
%>#e&oBi1NM/NP;+1Ec.1\7.c<(4Nmsmt^/E68=Q'c9s-8W'/=HFRg=_#`AaA@F7ADXakjsomdKG>k#'mBVa/[:iCHC?SL&,#di!D
%o^kFfUF40)Q!R:;VEK#t-lGHFl600!;IJ^Ai3-p3$4P\/ZA>CSYl,PJ;-uI1Jhq\F6ht^I2!8lGl9I"#kqp<.Mi3]D6Qd"0/aqU*
%l2GOD@$nl">#p/%%lhrIZ:JT3BCVj+(h@kS4i/ES8V#.CL-QFH[nHtrX/c^KOFXhpD<V>O@kd1?,%CW,e.roJ.?"=?A&b00M.?c/
%ie!p9+r_ktSTs<kT>E8f'1K5U*lM'F-#S"EqSt=Idgu$$dsVc>`cjTX+\i/[1&Q&mA<\4V&=&BF6_J.>.?-O19AFDW@m_FWgr[Is
%(:bk>_1DYQAuGbCZ$9@]T7.VC2C(-d8qm]cOOm.#0C,dG+VA$Zr^a+0Bt"(Ac#.g:/7nc&5A(OXLmTNqPQe#tc-QlM'I-0o6MON?
%AurtP^joid+Kc$YbDLfs/rt^dRD9X[LY?DqKKt,*f:`Ap80D4MOG5a90RV(5mO\rcAYRP_ph7>]6;X;cQAFt*JHTUM6suGuF_A-m
%EJ/S6W4Ra"e[$Hp7B'rZm\/YHNtK6JI1"\!+[FhUTT3T?&k#4mW&h!ljfVRaRRo4Yf[tXq35S<Fn9o%EJ[.-AO1,=@&5gY&N0e,I
%6G_lp1^$t#A!<&b$%gD%,^?"8T-9SS:XgU<BG1VPGWp]s+[+kpNe:jNpDlu&O]%!9@K6Uk0arZQ1u<MA]2lGu!"p@O>H]tQM*U)D
%BJYDB9O&56mA^`"q#`>7,t.NGDpX]hWF<,PLGL9\SHj1d%=j!>L$[H#+HS8\Jf9>C0W31u_P=3dT#9=!iqA999dQhL-G3!aYjaGr
%s4iJ4/W:d+Z'r2K%1n/1hmaNZ&3A!$lce>;cp9%k&gd[@o&dC!r@::O65P5d@L+7sYqQVa=!>X(m[E`+W-tlm5`8-D<I&T;l#D5-
%BR^.M`JYuUKnpE&@1\+-\sA<1"e`[h+1)q@A\^$BDXl2;-oc5VL*5GR,(P\^$3`n=F&pA6D2P:!LcIeAi,((Y50It?Hrld+-Er;N
%57g,bX'H2r@#h)qiE%d",FRaP8,bUYVejj[kj^&-V?oK_N3Uo$Hh("JU2*/i5R78EBV]DR!"7+8HZn$BTRe5PL0,fi"2fN/QhOq8
%jGQ\J?NgTb$;2-h?Q]FA[m1cPh<;(.="Z7ekO,m+MLccS8:h"7ON"=3Y'Vb!JrPnX2$!H[TQtsP$h^94!bdMNk%DY'9(DZZpT?3/
%S7nTnj+oN5cD[6O#V#KnUS9%YBF<Y;,A9`^4CY(a-q7;"p)]*K+4&1ul#O]rLZ0R8\E.=\IWZ);,gO7bE(0"<nK`p+Hs=+)(a/oN
%.DA#tb@Z_(Dt0A_5!_1GRta#04oU`K`gab\_NNgq3:Qh"&ZI<_!2b;\'-a.i9If`H0l@@9W)S#/A3`0acm%gYTPqqX'+B'*?b'G9
%TP87_,E_P\AiN#/5jSqZ!Vf3C+\%aZ"H3M\A$HU.D(LY$kDPHO>Wr6%I)Ei/ifpt*'L#V)JL3pRI&Jd@*J^W<,M[**2.lC_157lT
%d<Et/JsNX%'f6?+L?HXu+F%K[#1Em=JR9r@QZ@fo@b8Xem,B<K/'Mi=UiMJRDuho%nIVFRg87.OL3?)&,)0b`5"t`tRk%_cOWG%Q
%&+TFfoQYV.G:CT@g&cAnXjP`4A:hFMHjn=7&fJJjJHTU7=<Ib-!?i/<is&c`M!mgkr;*(.,D^(<H2X0:j9%Y&OmR(lnT5#;4\btL
%]Dr%tfq;%)%gUuf2-d7JHmI2`4rERG+KoNZT>!W;(Z>k?FcSXAXFgqV+_pZFHA1W),*?i"82/gBIbpa_5'[Uq9OqYeCpZ@B/MgWh
%J\Hco_&5-;igEIXOrr$4o%etD:hDB!d2]D&TfIe/%Yb?Ze%`QXU%'+QdVAuF."oF0^3:$F0S]1+#`Oib/]2g-c"2nRM=UA)M_@W[
%5Vm5U%+3[=g,&jD>lIjadG7<6`,,q+++?BfQOBB.UXW\eI-r8A?m,[4RI_P7KZkHlWQ_,"Z%b3BE3\`F6tfc$-HAf2Kb-f&**3/H
%9XO-F5qP0Q[kZ6m*<^t6jnM%-J>HApcT^&pE;<^H%%er1monX`5o3Vt5$/)Ad"/($*)uW6:h:^lbKpfb5K*aIn8n^j-ZC<HFon`V
%_1IDcnH8pb#(]rj149'(r<r.gQCVFu@c@e#K?hF6=T60?4G\o1-Dkrda]L6qjXAjuFG\8O@Pp4a(W_>*_KKku3aN?t)Y_B:mQB\<
%Kpnhp@[4qu>1S4p=E$Bg281l!hLA8*TL>86RA<E?_Xu.Do>Y3KkV$'9iI]PfF,NQ[U]Lq6%5>bhQ8o^#$brilA6n^5;?W16$h:9+
%3bq%D=E#8XR]t_ZV</6^`FC3k(ZmZl1tGXg=E#hhU@i!E&AKQHs/0:S'rJ;QA<$i6_65oW,FngWEE&Adk_.DJ!uC;1F,hQ&7t*Ro
%YsH2[4G"=g$j$FBnQGgpOQKA9V8e+ee>YWk25*C,7`nCB.0;^UIfIN.YqZc%6UG1/mM`q/3+drm65]AL^3fp,6U6odPbtI5)j+0c
%CNQJJR31QpTc/Q@5V+l)Y0f>n)7V1j//3AT&0.$mkg0GH//&B'n2$@?J(rAf]2)i*o>?rCFW!GI@A12i^U*7$Eh1"aX)L7[42<J0
%W'\kMM>g+LBr&;s*@pI0_MsUBokbXXE$/nj,8"G?]:R"=P%"OpLI;"$.1R5U3+@ZAm>+NX47t;[H!G`T^UB"2?^mN%EgKl0E\4h1
%DXc\OJtV.u:W8tDg45OK6F.d^$A(m;G^(94(+?@)[#rFfDi8T<jUhAFr6uXG&FDh?(9Z:"$;eH=OH1W>:eLPA0l@\:Ocm5\PR;S=
%][U_P+=]_GQD@S>5`+_;Srhm`?nMdoL`t7q1F#%oqSYT3MW3R*kgR="E(rP4^P>=mGa"W,Llmh2\EB?&jJ%,r8YJEE3FO5<Q62q6
%Ru<_%YQ`+EhkZF(`K/5Wd/S%P9j0,cP!$L-6%4UA'M*faHleU%V$2GQXbF?tCF,.QPEJ1./ZLY#D_M-[\IIuigg#X_]!\K<qu5S;
%mcL;??uC]fC19VNcre9"3?U?fg'Y!QCYi[$0U=-K>7+U,\P<)EKh)MGCY#Y@Y*OSNrim6W.I8+<*VO5V$4<R#F\kIr)LN<Y6kaEK
%%LSgeoq4R@Y(IA<EmU&2i/3@#=re$]/1Zl)dtkX6d..^j,-Fr,8@A@L=VO_IE'Jm]4/K-EY0iD*^+$`aJYbEHWi&8&g0qfQZs]r"
%';N^:O^nbo#5a=4]H9+E4II=EoRVY#2>ZMO<Gq\hXfS\d;8cl^S%L4F0]Lt#YoSf)(+/t=MDG:%R.XGrOHIsLYK&b!]l_Yhp.EJ)
%f@Us1!rY3j"=bi1JL.5a/bKFcmIq$5Z:4p"f+o4e*RSMEI#l1d])W'"i,bAj6YD/D4nT+44jn9gp`7?PCoK@!.\mk_0rHmSOCghS
%^qPIQWUk\TGicW)M9XG]*m\AsT*!](Cq:O8NbiD<je8nu"$k%H$g.^i$%rr)^kc]/<<:(C?Tgg$IQ6\N=EEW<[U'OARYJiIZtrGV
%A[%+2#EdONA#%+7JCnft4OI:0I;LCL/duD#Q"`N,S4XBb;!LSp.?dVCJn!g<!.)b;Y"CO(#Xd`3_!%3-+:IQMXL-WO>8cQ=4D]N^
%K3kt$quJbTA;Ufe@RFL=;[iOqK6m]h&l`<[JIfh8:J/+X5S9]**J-ie9Z-k^S(CASZWrU`as5Ba+;d>E=`#<-EhGXAMnF@+E>2W$
%%Rd;<H"?_3.KUg);!>`U'SCGA[cF@iH7qZf`kE52X;o4'-r?e=$X2"#BnMq[j*o=P[TXX]BRI6-D.2"'/WRQ4p<f]EAbrps/J4,(
%Rg_W*IR@D%T8k,Q_2jZ.I(TA<b@,.\-`SQ]HoZ'Y-s"K8_QjBH5DOJ'IIX3D'?B$jZ4%[$]MY'^+1.+q"Ts'^_;6l?%K8$[/ej1"
%%7OKVqAsA3*=P0OFY@$<oH5pp%SOpqIA^(J^mg0(5$ls]`Y@[V-MMF!2DopGZJ(l)ZE,YCc8\Vj\:\So3Z5=Jk-B-+6V@hu;oE$=
%Ki>Xt5R:r"e$N6;Y(\3(f!mR#@ol*kqZ[qXZ=Sq.eQm43mGC[IPT>ls$!,+`?4*o1+%gV6qHU)LZqIXWZnWJEUOYF_Ks7),;r$RF
%M@>k#*arI>7t#Dn07AG3#LMhEn\QQ32e1Tk\4r9/dp:$l%na7GRN^$&M\G&$="Ih<]W"h0nBs:3/Dnm+LY09JD2$tPJ#5^C=T)'5
%?BbnlPlgJ;>=,R9-j:Wd8rATMQT<4"IU@A3"?;e+;P_[Ka([XJQXhns"_A.%5l7g?$:;7e$raRB;+2$?AF:iIH1$N,d83a=Smn%s
%X,.Ws484U;b[mp)enEo_hdE6c1'67o]uoPSahYG+NMNd,6!X2FqCTY"A=q6/:o\GbAk9u]l<%SeH)W?f>\)fS&?M,&5qH,^2p@*/
%>0HXSRu,t^#mur`'G:)MBi&W3[>.>4BO?Cja-?bR02u?G7[DCjTacarOPANEDeMQr8quD![4mPa:q`1CC\jZGUDXE40`1iL_Rc.Y
%oL=6e)86O-pCpD?[f^+-HQ,`:Lj,q0L`hL"8>>9W7+u2%j(Q4Rc92G/ZXcf1!Uc\"R-36.U(qjFB<`/F#RDJ]J25!R'<6$kC,cPf
%Eph?V`eu-m$eMI<R[Tl3aK'O[LDVNd4MRVCL.EYGYUYFe5Nr?E`ePG9?-\^"`VUUee3LNNZMVOO2Sr(P.Zn&>iXCOr3q"P6Zn;K`
%E"YHMT>R@?YQB..k<JeWS^"F4*Q^f:aoT\e.dh^WjO98d?O):;!kDdK'L#H^_S]f%#+oaW\T%U,DQs@kq<\")oX@ANSLMPUog6P6
%8;e^bR6'U9ZiiS0h]t$R8a\3_6\I`Q#,fsC%fnNkU)3\i;U]t&RQ@].BfX?OQr'k<E0Q+]<!]c8`U^W=h!X1LhR@'!>S;E)E+t*`
%Mm/?-]_(t)mIScbb!qGRPer'ooFr_#3rg#NUKt`$pfjF+`LD?*aTZLY@Cg(HDF>eXEc:g63g0p)e5t\Uj?n>[3a:Q(INmo.lS:T3
%rH2#NbM2^Q-sk2lr[%]@7I#JU\)Ls'`$-02D8S4heQ,9o1@QpN;gO7f=>rl"%W,qR_bQn0o%-I<)o=5O1;VoP<]+*Mjq-qR8Fl$/
%0(gikIdS[P13p(D7usXkEeRaqbdD<FX^nMS=S=m#!a[='9DSJ:LGYW'-$W*M:D)e9[cK!I(d\I.JD8!D#3r1;:Nm/LO6JhY2r$>g
%F@Y]Ef>>#g$l?0qbDs;3MO/6[H]4ciR9Bqnf([+P)EOpLOo&[MJpc"/*IXK#Xi#M@YMh'ecdYj;;XV'NDU9P9g!PmNhesO#^.q;W
%H\Z]\8`;J5'V6;,N?9<KE\Dio+S1rT7\,2bL!TDca;rlqIE"qJV9D!fJe,C4ob(F8TBU9V]>:keO'?LZaOtLBNB.AO$D6R$OW3/;
%ko!SqGfsZ,m;fDTdClE;,OTojM'l7fCJR#/2=/4VPk2TnFqiP(73:O=$:WJqDHJu+iZ-[?,#>"=40NbI,F[*,\BjS,%jOgb%pA%T
%foJ#(PcW=S<-D8,8f1XFTj/<gELoL@`VMSg_Do-:Ao]"/`_d<d07OquO7&1u6hPJ#$n_e)hAKG7i(BbF?`ggpM<)3BoC0hS3@RNo
%mT)B>8P.Tc."o49)1SW$2$:$`-.Qj-OSW"@M,$mFdN,&Ar2dFE7n^cFpq:6Vj<tFL"**[57E"$V(S@E)Eo9_/&!_SLY@Lq_*H4IU
%PfSae:`o%_N!q*i$\O'Yf_iXP*'H..Z@!K:cX-8DB<X;js);'?>GSK?Om)iFa$9N.]3NRBI7!`!DqG"3oJJspYD2BUB@>j<'K.&C
%"0[N?L9N'DSh8k"p^_jWM+;fG+?sfO2O.h8;"9]V4/o9*R>6!&j;hs:=Op5`%GV/GP>iQ*9a`UdM4uUQ9o,uXkc,&>/$'WQ+91tW
%$)bLZd1Bf?^X;Zui@p]1J7?G_bf]r-edq;&F\JL`CVQc_=$ASFH`E;rrgm^1[OEZ$9NV3AG?eW=iM@CKhdOcilNI-cdg7U&><S,*
%']Q+=ADptF;B)Ni6aZYY)^6q7:*Hsm7DLXi6<"WdHii+_iM6u;3tjcq#fRt0*4A\n@#4NdSV*$-Z>`)l&KZ3*^IE&:n_VpE]:2/L
%VG-`,dL*b9i,j6a[gd.!.""0kJbS5)#%kotbuO:Ygo$P8..un95*%2Y#:BctZtR*AZSQr.,_J$jHFtU@L@10[e?=s`i',%t+FNpR
%dZG6\F9J.RO<[\+i8Z-n,i_b5P!AFVY.K^$Q*onn7B%Wp!+koDT.sT?QVmS;0TChRjkm:@j&i!_D];JKBe_&I&$6:\3B&gN%<:8B
%-@Hg^*;C]]]0@45oK$*q++'HTBq@Nso[M<P;R1BAiX[tiA\u(8gg%02%XF.!+hPU5(<W:#PX1E7b;5Rg<*HB^jqqa)0V=JaQi.=G
%N/"MX,HaiIIA(U!5VG"%#V`oC=bmZkbU>t_W.I0BhM1=MOr>Zr))&0X_m*^-&;8:=4nAUY$TfCh5Q;!6#8t$[>Q=?u,e!*,TOc:1
%\9"F'?6L^iV@X:K^)6"^])O\)(o$p"*?d.\C)_JMEC#fCGL0DXg^]3+_P:RS>8'd<ld3#0VrYq>^jq[kBQcLJ?`FhdNPLQCYk/))
%n?a>=-%S]735#ms3`q*BK<15XnfI<5;NI9uk8tiW2>bZ)S'CCFr:71c,D09(-_IX'X<ecQ#n,GV/<W>>TM\^O`NOoHK,%Q^%1\Aa
%g9qED:h@H[+;lCIi)_fIs!^tf\bkHQGUWdD>Ig>T+K7uQH?b=U<dR&m@=^'[.UgP(UtF&G)GVd(n'4F:NJm\[Z!C0IXE*3$H\40c
%k`upZlI\pBol?/6Sh(ii#WpZr21f\N7g[u=VS((_2]fJ)%('g&!,3U62/W+H6W0UrbpFOLK0uTjV&_$l5Yi&EdNVUOPP)=$=aFbD
%L`FA\dul\N&V@?8gmn3J1R>SJDV22&#"`<cKXDS-'$.nnOHfoC2.Q"`^(_@Q/liiVKUORHI]cs,47rtqqnEDPC7Fl8#)@;+CF,8b
%0*hqV*0:js*bM$1ABb2#n.!=DCE<!AC8c;@P\8?B;1bCqPLV6I]Uut*CX3?Qp_d9'>Y"<nn5,5$;'8icd\G\dQnXJH_8'[^37/aX
%HX*@S=CfrQ50nmi?Shk4kY:fXZ'Gl:HS=HUN9hP3q?EL,E;rL0p_d81iq'PsbSPpi1HBI=fH>.XN3\N<5!s.G`m+hjAHtHR*eP8[
%897"fUfZVU?q+NWpf8ddlsFA]MgPW3dn*O_]tIN%>8bDd_;GS)OUcqP4hEk)i6\Xu,P4>0%mS26l8,4ARRuTao@As6%\NHY=r9*I
%eESt(l=WZ((&Ba%HBGEW:#@YQZr'pOYG*,tWfE0aS'_;2O72&[T$%T>1^uL&H5CLK+/.r^fLc,)Dd_nDD'mnC*;(nZ=lP$'RL6`!
%3""m2)b;.)GQT%7g;,F,6N9%aRuFmB6J1oF?D@NZprraHO3ccRWmkr0>bJs8SKQ_Ha*9mP?.Z-E's@L&H\8#'f:!;h]>lNB/"_J/
%)eLLNWW?V'._eh53@]sZ@\RF<P"%F^U/MY,\KZ=/d:2iMII]-X(9Es;H\3WkQ?GWW8>\b!Ye?@C6in7/_FN-aA(sODGj$2n-+Y0k
%6s-C!S:c9DCDuJZcTVPQbd:C^&IWROKa''K[J,Po!P,)lA-D^kSNlpDhseU(/J?M*NO9Nj+DV0o2duq$"@,;tlnE;7bm+qVU0D?7
%-o)'b38AA9rV^l_ZOqtoZa*BBM<Gul,Bc11O5!5F^LdKTlnf_0\nf73.G\\81K]b><-BIPnH=XE!Y">9@,H*:f,BY\B4f9F%epfZ
%@ST^.E@Vj7]"iYQ/A)3nU)3cSHRd4(rIBK2$8G3AbP&De9/`bIb2.[,`,O/QBl(?D%$;S75`%c]Ji'doVu#e.MHPG[)VC`*r-AGZ
%>.!9dIp9UF8O$Dno$\V>Dc*$\cKNuR,&?6V?&p_G3u1^m3$IS<?lg(gja`S!fVQK9,6a/5%i'Q&NaoncdpRll9nUV\_Js1?\q!3k
%"lQVW28m,[7iXM#7(e:=GE-Y^KMttYZBL[>OW>NUG"d_ZC;mJ6_WD@E'M?r3K5MHZYuP[$RS+-Q-do8JRZ'+[#.YB/'9G+4i%$B*
%fUH6$kr)ink00Sb_a'K]N<J*dkK,6^2;R=)fnEg&>U>n4PE2+<f91AI6<=n]O'2XGOB5aBS`jcILf;"BgQ$tSLR^?uDM-bb/rK-(
%EeK0W$7Pi&Loo.*e9t0g&'l?I#"1L;YHG7VVoS()27J;`N(:4cdgCF'>KbVV>8;C3rd%I1b-ND>1Co\Pdk"j,S^sr*$MLJuaSN9E
%aN*Ji91SkV/Ega!dZ'mk#XI&!L!UcN86k93kO%TUKj+mJ;h`S.0W@+ep;1$Fkup_/@Tl%3:IA@`r;:R!&tR.Hj@dWF?(d:b!dEIC
%R\Cqq$mtQ8q;]ml`#SS/bWQQukLYGJ,8DQB($]p$E>c@\O-nA#l($>WB8V`X*9a!D#n5cJ/GS*J%P1,L-J\FiUV`-5FS@,On6MLa
%Dp$A3!n83rR8PkmEKgdUWV\D7)5lHL%":3_1e7lMp`*UoAa#9*FOrkWbF.4%-=T,b_c-9LX!ZER*4)ul#(g=m6;XI&Ro[=eli`+`
%%NYjk^p'#-pGmG(/2V99?@9jhD,JC%IL=pon.\0J&3"FS=sh\P(OVg3X$pBik:;KdW)fM;lDr=Ui^-t&<T67RPq[^HW9s9:lc3QE
%M.a#\fEdqC;)m0-.!$n-/dKTt)n;$Fo<Q8g8LYjB5+pGhp%'E#k=\+TST)%?dh8Y>0NirYS^lgAD0.f!b!h5.If?Qn#[c$U$k77D
%3i;7t8T"#t6@QJ?$;=5*nAAiCVP@XF$uZ>[C;'3@@k</9Sj^#IHZM.t/1sLIcf:j=#^?;]Nl.!e/]_N<4stLj#[3#2S!N_?YJYWe
%I[k*^\A!H&B0M@lUVgG$);`2!+5M2W")D;u1.OIMjOk;T1<Imp@N&(Z3hBuHRq01mAquW>krl(@m=IE0l+mJTTYKE>(V&CA8`@=K
%?L8Z)I<PR/hJh@T4POfDbV<saHD>J]^B;KdeI$+G8EkO-l1<N)1nPL#L)fi=fo,3j8lq_-oCsB,aDYcV.l%M@b4bTOEPV:+:Vp!D
%J)lgLKg`419%b?.gAL@0Tt,=n#79nun-=HQ+ef;hrbs6moIHN,],Wd*3b7"7`GfD=gp]7lYB$j8ko4VOGf\<:;Gs6ug3D+F0-^/l
%4[GE8s)gVEogX,%ja3qsjt4j@qZkf2*[3[Z*>KXTj55A6nt"p\UTj1lU0_@@9tH5VRJD2C6h=(EiE@jQX`;W*N`jUMghMc)6gH7(
%MU0G']6rB<*<LSd_KFM&o^k:GM;Qa/=CeqdR+L-[Th/>[Eq_Y/,2[)u/2D'0/e.$<8r*0hj&V'ZR`K]Ac\dYfQ^i&?F[G&NAj4`O
%cG@WgRSLRVC(EC,##EU;kWE`ZVL(s.<.a5qe;;<0e-Y^"G$=cA]\dWtnk-P/%W5]$,q[GK(XFQE\h1)TSE;r`2Q)YDl!%a?k"bI*
%^/<epkL+f#RW)t*=niJqaEO'`mp0=dRetd/-g]\f4hEN+%JZb&]\lJpB9EbaM=r0HdbQ`+l&h:(lc^]Dlc^$69g\F.icNj$^Alq\
%TP07_M.fcS>'RJ#j$7,J94*%E>lYq8>KPbim2'\T52Iq*Kgn3nG0m$8nD)L-LF2S_k//C\-V[7#a:=Y\n@4YApWu=BdsP9Y\Bb]s
%AV07HHL4E<^krQfD"=F,\%Z3rihu;UFgfnt<$Q(:If-0]If-;T$i(XOGSQ@%&ZEX/5mR-4e>.1#hR2nC-k,uaiR'k0[#'%C\>4N`
%Xaf,?5't:8<eg3N+!"2K,Td::J'4W%mjUFN0WYVYhrR2_fI6a"lUND@$F%(_SUAG=B0>EKN`\M,+S?tGeF#2_TCjBUQ]3HbBJfX9
%TA8IcFJS>\$)(1,eYKQ7G>13RR1i^5p^F-rnSUCSX/]SZlH^;4#/*V_nWilI3k-\-PL9fe**m-FCp(&[%,%g*a\FfsT=u[&L-^sQ
%P*-Hke],Ll%F571Ae5a%+iS5=)7*3(55kh;__?bM]ARI<$f"XLBC?+F,iQ@/@X$DVf=)CM/.V+!e"j@)2+QOc<&WVqi7Vi@ScqV`
%@ijkr@U^`bBf.=kd9R\%pC;G#XQSjYp=-@,G."o6en<e$+5u\8/$PFYc)U?d"a>qNWbrci<T;=k;0Z?(dd:iCNOLPkHLZ=fOAo-P
%9)qIuV4^X$'Uk7=3]'?B;(%k%hc^0M%9cHm0m@IslDKEo,4*\6Bs@URA[%3Clg?$,BKnfYqXl#NLDQdH#p]mb(u,#C6Jtl<TBRIn
%hDMY\G6B7qHN/D@qtQIfAkF)h.79EoI8%-aUTh@/GDVSp[j,p$1O5&-+.$knO>p#6%OXS=!]'VX^tkdgQ?O$0ZIn$tr;:R!.YVn\
%oGgWlXsOM+\"*oJ-B5l-j.15@#8ZLScgN`R'p=?;aK@Ps/\[Wh`p/l!`GG,ANuo0t"1ck_MRY6]@&o`s_(An80,_/Bd/)Ttet8_Q
%I&>>SK1^Ngq67po2f6%FnCZCN7?.HpfY8YVqtsme@-^nM)lHu8Kd'dsV_<!/9d-)?fm:dUG^t:#q?G8&*u?qT3QcNV5f.Yi'sOC=
%2L0_RYeV%7+'6Q/1mL&^ao.rjffemLIrQ3pYd[mpc2Te2h(#)$V6`#ar!H8h^54Mr+$T.h31tod$@2oa8+*0$`<*MfjGjF<F9PcV
%Q?'9ojZ^tNB4Y;lK=,PF<@8lWl2_Q@"Lu.JG(`6>G7ej8LO<!&-#f<Xm\ac;`Hf2+,$)T892<$sC*fo/beZ$6F9N/o0rNQ=f_b[D
%j3hKKPm@3QeE+KLQ6!,rTP/t`V&Qb1:8<'2E;;&g]jTMAnUX?<B5U4'cPM5H<5>:L?%5p2^KJQ#U"Y@W)HhbNDF]f`f;Hq:QB(k\
%ELsN0/=##T?)#,?TrmpDbL^ADZJn2]0nJta&!(jCP`H2hGd(L)UIfaql2u#:]=bG]ja"MK2=9"'*A<_S0fhJlCN.j3A_gH4]buRP
%]l^V-C"j/Tm9q--?A/"Vc\rnt7pWGXDKFVHSk_+VfAK]g#5oHH5Q;"=cQ^(J\.e9A]u[\r$hY-8TpJM=rs4+<aGBhec9huPL)f7g
%pUJY1qk:Bf@,mq\E5qs=S2[JUpR/Q=V<@-4UYFdsCi50cEJW*A4VD'si^K'-mtlp1:o(LpUdT./na']Z8j:L>>tK<TpZY?"dc7_'
%TNMi]Bg199g>#JjI$a9^md_>e#(>sjcTf;(e"u"MJfYsQAhX*q$J-`R!R:&OIJsiX%Wf1nbpRlj2_<A13V!V#'e5i*KYOLP&P&hO
%F5h_.YMjC:8.[mHb^PqqkLVG,..Dt6`jT0DVPA<WR[op*9JAD@2#-h:<tQR3(''Z7,:8+2PuX$rinRQ(m&YbD=%_T>*/HX5Y9Bjk
%pB1Bl,Q']qULl&*cAN<;^r;]p6Q*ghECYlt/<c(+=`l4a`h*`Y)pt4<>*3Q;Y&B\4h?"F0U(.j+)A0g>>N'g967>f92(:-'>n[bC
%NQ@1.:M]+CVXq7In^-V5h<,m=Dj]ht*)'Yi,S<d8b&pD[fUBQ%JS:2DqHJq03?(HHDEgifgK8N=rPN/erF<[of6lI*#X[RT8IhJ(
%(_g[9.4NYKD*6Q;$B:7m3!sS%9"NNDLXp1pk9&Z$=E0RY,F*NI&%n8:f/3YHnS@dK%-02f2Lg]pjD5Ze]DXQ8D.Ci<pCEP6pCI&\
%4>'nHgl3>@/tSFI$<:8(8kX9X`l%a"XGu&L,$fI0EmSdt%gT3e\BdCVhp=SC]_&&D88>ul01/`!b8^+m5a==hl2$?W;"OJgIn/0!
%!jQ+`<10Io?5AD>RWRuhO77@L$s2hF\P+3bP<lb1clSWtmdlM/2i*FV0,.%emNg4]RKhqY7-upfO^c2%mcmSfD.BYTkJ[ZmDb3,C
%EPs<kSp0,("p.<)"=mL*lX2&oqtMDcYQ'+:)YW'Z_<Bi,<h72R84Om(^$Lc:?_a0V:[q2I#2c:)S?;EZP^H58CJ><E#nE?N`J_#t
%(aRJ[oUP_.02X9$MTYc)Kc0]`Lcnp]n8ZpG#N\Fh]nZkoaIh?U.96M\#fb^Tm!#i+ak:ZMq&LJ8X_a.>H.ocA78,E3/ZbYXejH?3
%fAFu3F4DTo%brad7k'$seD/,HnHDuGTGeAN]d+?%dE;HcPJYm"7=?J"abI-)GdKS0%.*#pe+b`dR)#9tp5&/n=URjsi:5636n'<:
%,)&,oqI1?FH-<YB'7%spGpq@O:jNJXfWP\Ni`QIh#q!b`>JAh4l1e,2\/V?kGdIP-6.WdOZacUjLd+)W47.,$Tl`rAqnQt/Hm*L\
%ko_1^a5kCVBnj68T*I:@E7!s)fn`NOmhjI"(Xj4H%-cqjIt1tf1\$9sfdR8>_-].V"ggD!)GHNX^:7niXm;uT#CRi8b2)SDog=rb
%oXt]H<+V-Bd"`!O]#"<)\g[f)epPl*4X:1t3@6Gi=aupVnFs$Y'Ss(9]'oZZ\uE)'qiYT;:HNt#;2L?j*,`3)pNP)rUE_ipJ8r!7
%."A*2TjbP]U*//O#WDV5d!Oro@CP3BHhIgn%b]cJT=Ad1P27HK[@eP#naS@qd0V>BU@.Z*g(9Kq*V+keBMp&g:Z7j,ZA<nA$'Zdl
%kb9&b(#;@66[,"6h-0$#BqT\8qK:UX&6p7dD.0lVD4t2'f1FrM,I=:c%UBB?&K%"Cjd=Dn)E;Hf,&Y!Xp3"957s.(.;SW<J^/i?M
%H,q9m[!eI2OZ\&_eFa-\mYn])9Aq(6YUR^d.kHs9!r5Uo.Zk&E?^rrk$R4KjADiu]+1=AYj?0/a^\HPX%iM&_E"_qs;Ef&h`ieT%
%g>U1k4%!qFg*hn(q4(8LOsAUG:WEu[ngR(L*`9X5P/4#%7eiSu;u?$_/H8JT([[gR!kmlF8sY@,WMT*k_m)rHPkUh!n.PVVkHRK_
%qNOlBKQB-`C1"NcpKSV/D`<);pJKm`?JeCfK\#6425C=^OCOO9L5Xcq[7D&LAYd(*d4=%.ji6W@Z<'<m=&Qe8;mor+UK`6!)>4]:
%Ckk@?lH7RDc30C6Ki2JBJQ_S40l0A:Nmdd-8r?)**1Wa6!f,rX^jW:F$%;&a\N%1Pb@=GS5l2O-/^'Q=7jQ>c0+6U!^M^W@BUNO&
%Qo#b1m?Slu;eJ8-[ElbXO/V]VFeW24)b@oO9(VJ/I0[AHH8@HoZ/'j+4l+0?SfoC=b"6L'GkAH_@GikG]4MT?EPmSkI7s<3\Xtqu
%cm&S>5P/bRP(1oq;br*u!Hg/kYEQh[g32)n1]-(&=E:^,l]p4;\oW5$g?cJI^dT%s%rA?qH])+8;+LbbY>%)Q=#aWU8WQ0'%ZWJ:
%Gi1$oarPqB^p35smkiB#,G(SV(h6ken/\(1m?IihW4tW,M\P?F_KWA`[T@clNDEluIAX5RMW<"L4%f2qmrV+38ge),^#eqs7?E],
%'L#I*5:u8n`be36.3?\?[G8KkCV4lE2l/P7#+]^%]a"ZA9MfE(D^]e%r;7\r/6=$P`j'`l"sXo]r&M=RSL:cdDPuh[>g)!d4s(Tk
%T>Jrmlp+Agenicu#J%SMGDU:He"k;-KcBJ!mkN6&\hW)a,#/H(ViF@u645BZ0=]S[ePVtta8VN4:O@b/]9,27PBM2(p;t/NC\m"1
%AamZM=arnlH`Woo[5eLj7[K/r\H_q>R;:mM#*^@b*V5H?`m_btiImp@",DEojCP`).&OeB@$pZ$A\]YBV$;.[.lX*f7O01Zh.Lm&
%Fj^]eZh'a)lk-&]D(&FtPRSBZ@64#cIi;KSIL"3[.JgtFThN4G\eXK61d0c2?9LE:UXY)K(TOYW,JFLJh0!S6BoBX'T1A>oKBTg;
%;%mpLJ/N(%3&\HOqVq0CS5K-4/unYL*q/_pp"B#*lWnkQro/cf]ZHdU]>Fm7>>Z;#dse'gBsM1$O:5'"#<7Aae;gUoM"G@jrJ%.R
%`]c=iSk?Mu`3IUf`D!1p`PL.,.q6?'$[+^nauGJOY`q@Nj>0bNL&jCWK.:'tP3IZ'Nl.,+5o`&8V4N*qV^$g\fkMiDD.+h]UJC69
%(;k.X8b%J1qD.2lF.9ZQV1iO,q\XXQL2/<.ATNH635J7!#P`WhKJ./OlNPBfIs/&t/a]48_lJ.cDW2Zc3%cG:n&B<nZo!Z:Pi.UP
%BcbGoa;6d+_j.B%C8UuOOOH^rB_at1nIuTF-4q=\_k[03f$kT#lLZDc;'60k\c>iAbWE0a*]F\jQ:n`d?44(Qe]C+j*";u^Xgl`N
%'Vm_t2Dq.da_6c4?93TJ\WJ.j_n@]E(2KU=FQkYVc?\e,.n,#_pg%Sk$.UL/]M_-LJ/AA33r3;X\"3`]_&6ck"[T*G^!;ILhVHm_
%nmPcL6)+P]X!eL3W$Tqpf-"3EWeum&prhA>bdI=N9iHLqa9"V<;ESJ8^Ve0a[,tZAL`B(5/j\*P/p#S(\l4Q92>09&DE(R7'PNZg
%$DFk1]$T/^A=!(bWU]EYk5iWcV/Wl&6=Bs*^>(__aC3/WBXEl6.=#I$"PVM7*1^iAG8_pu"mGgG8i'aegujbGFV<IjEd*&seZp\\
%TZ.Agd-4cE;WJ=BHbN;^V8iI[UHeP.860iQ%n!#"lC(sHW2+HF962`1.k2X$k38&b8qC',e!H@aKkIhKY<%35AY9@X=!GqMajB!n
%C+8'TZG"/!MEn-&h75m(Db)q36+KLrjJ:[9[[ZV=p.BB;3q?0[lZX)ea,MR]MZ3d-kip`N'oBqL$mXOUOBY!kCEU6EfoW9@I7p9o
%h9X0uLlH:JBGUC&%l`8W`p84=YonJ+UUKEbP-(:IVNBY4.PW87bIs:?:l`kQqD^5jONq0m]%QDB>Wu]3HgInfK&2sY=]L"E?MaG"
%Lr3;@)9=;<p*!9qe_-uInlbRJ(OT8=5-E!8'KX<Z,3URlnD2VWZ9EP19O:8lpYdJQT\O++aQ.J?)bZ;<E*ebM5Mu&H=^ID7;lGFU
%r4%OXAPULr%L^83dG6XbBV8!hRr/f4TQ7N-8SOliVk;>7r?sj-]REt/O&p?YriUW'&(c(4Lp^g=7kl\(Q[A_K!fg_'*4:m5Z]97s
%/t.&;nh'M`Ubk92)gh4":5DuA3e<hm3m0h"=1RCfn%!i%%#,L;b14gGCRnTW0\\=7*E6[UN%f*0iXk:9&@qbinHKW$)hEM.QXlJ-
%r%*OKF!M4b"6gffW11^8aqIIGnA)?dU1jn&KV%TX=JgmcopWi8*P>O[cP%YAH=Z#tc=2gF=mVfnLi@&hr8K2)9[KiKTVKZBI^Re$
%15R.SoM#!)G#4aJf%ssBkm]b5AW5be%KdYe*;p/*1K-MaRn)$]%uN@ub;s@'SR7pC4@[s<kG\oe_QaR,BGpC_?kghfh(+.IdiKbi
%mL`7+(0ui+G+^8*g_&<uK#l5o=$\V!:c(;gqrt2H.$Cd+dJi'B;rMH/r@mTgKdI$X(unqN-+kNDnIUcte7ULZ'Y&5\8dH`1hs)QT
%k?1;<`X)l(GO6GN;h4OU%C^A6GV,;2SJ.`%DO\@8,lQesgn@tndd:;RDYcs2APp(3^(U7!mFUuQ:n><c6^;3s9j\0"fSa*>J`M3\
%.b8KXVVi74fQ*j1KlS<,^)V:Ef0O[o5p#)LhrZ#RGt_1EHsS[G]QTC.Y1<N9-uFY?.=OX(75/rPiq#Lr'.oSYh_$t(UHOqS.=@jB
%Aiph]4b!juEIfK=q]7'LohP1Y)n[k$A`7@Xqbld>f;Jl<IEE&3XQhhYh2M9Jh`?YYH\@hEBgUHF7][RG.NEF`+Z<8^L/)b8<F@1X
%rGN!b*Z&tt[FE3QE9-f7rmY>o/\apf7SBu>EnP=u_B<O(C+d0V"6qn8B$M5k$1Y*OCm$i,4=7^%b%#(iPZXZ!JJ9tA<*[>a$q>4I
%a+bIg:mCoNh4^T0bFVZFEb'[S;Vr]UY)O<m?=_$d<jZ[A;)"F0P'L7m^,DfY\tBq#!AqZ"@FD2*r__H8U7d=*@*X*OVs'\7@-(DX
%U4ll0E12($"K+-L_ng,LeUKAMn:C:VGb\R.5'(l=[:u/kp`)fPW?7P0$DVq_Q0+"Z9(pId>5qbFbNUFdk=f#8@[oO\$6g.iAuZhI
%'*kQaLV9?fg(qT#CgV9LR!'./."`<fY[>\D5>?s3]mnW9jcRn%pYrkr#DY+T*p1aUjN;Zh)0V^:ih249N%i_DmHBt##rgcbB7Ck5
%&J\MHg&T_G>HPdf.7c*j<s1Y;K/VIG@:B8;,DsKo2Zc<m<scXu6,--.lu-B>s.0k9qoB@?,4iU'(kH_UOe@0m/J^*IG&m3T3,tVJ
%SM+f=6)nfnE\(?WePiH+2jK6N5GGWlh?+(ln$=%Q6)+r&lT=H.Ym01PA3`^E;+h'o6>OQF1TcK.]t`s?@B(@.&h>M9XH8@VKTfC^
%SO:p?%<G1jE(HJnaF*0tYu2mTRh\5EnrReAT\)\=)n&$s$sf#8C[85:iZh+6P5,MU7A=iR:L?eB$q"&EV:4V.ZgG:P_2A%VV+Z,W
%aKhZ7ST0QB.[i2:ieLgFW+=&"Ut>+3i'Nf*^UV(IiX+&?)[H,9Z;9]l%\t"UJkf=T7LF2'T6<=O<["t&,a<m/RX>.dE!KrSLb+;K
%O@WfSGL&CT'hUl9Z0LS3kt(XF4Mi(G*17d;V)^!h>G+0m\g8!&@\ju:E2s^,Fc3;S=T*16[QtD^=kt,ieEmQ6h7D*(h7@En\u!RX
%3FcN@Ma^qYEg/3A2SlhAk_>/P#ur6@;6"NuR@A$[=PXT&"jZBK.*9b?eSW1*FHgY$gtrTI3O?:kE:\9h>AR_oYEu]:?7-GjCdIdB
%Q=sM!;4*]Y7=lhF9A>',,W`I%od_>W7:26&`"-MOg(GY@YCCaS@@q0oAW%c#o61'PnQXJ1#HX`_&;u5;ig/kHhWf:3=Cb0=FW4cA
%,Y)UNDD=tb*,V[dN<m-:P#o+)U"`Iel8HM*7MMo'>6HCY-$aVP&PFTKYAPRJCeC&*?$%>`Ok&hcqc\la/Uo8%#%U375EnV2f!UFS
%Id#Jc25ltPYg6c@NHCUIe'Ik)XhpMBaA1JXdisOV/6uB*#!>Zuh(.25Yi`J2D1H!/-9ibE$WOu>72lR+),/L[q6gGe4C"nPSTU8E
%AQu1#^Qj]pe$X]l<V"e7Xs#-_,SZOiFAYq/f;b&!R:96/)qc,%OLlEN=P^"<WnJ4Fb,G\_gAlY$LY&t"-0._REYNIibG9"6gfb4s
%=PF$^1JBeR&>Nt;E,TAJ`NTVe8MAg-f!YTK;8Xng:U[D8Zpr>IfAc'Q"o[-*[J8^B$s;-XjB0qR6o6Kq+Nh5ECKe+=OLl^e[+)/!
%\25eK:liM0>+iQ^@82(KeSPP&-&=*ao9qG]9<RS/!1r.=Wh-s(7%U1J=j[-d7$^P/M\Cpu(PSG,1qJnQMO%*rQ($4ko\S\HqI3(Q
%fI3H,&/.KZ+AoKn,Xq#s'1M5mFc$qjFIL)t>"n>6*QPI[%EF;V.9^J&<N2^+l/\bc-C,>t+]7'sBS#k'M,Ue&E(F>I7>i?)3UC?H
%95`/==A:[?lDts7jNt9-m2&EmC4Z*46<#Q89!ke%>,8Zn#un%F<MrIm;8Ao@.FBE`Ra`HVOMamqQM<Aoqc^@N9`B5hVD6DAI(cOH
%jPF%@qO6t"e[3[L?*8TUdtY5XTIWJ2bXF>m'HID#$uMMlQJE2"i=mlSWGSo0U8;NSWng(j_Rc!P/=N:ZT<1Pb]h$PV%I=q0U'9Yf
%D5q9k#AfN=8^da#12UCQflQ'+D^@j(P,llF(r3_K/?%=*D:r]:PM7g*>=(X**beh6cqUej'Q$M:g\]?`e1L\S&)$4pZp$p5.B7rG
%O\`l2a_=sG22Dm![\`1M;q-\<>L3sNa-!e6C3eOQQG5$Md^B:RW,L+m5e2\>#OQ=V%baHV[;F?JDcp*\['_3tpaITTltI&t5I-.X
%D+c][VeeZM$s/t),uiqR7[,JnQ&B\E9?J$K9JNOiAIFa#>"NOA90\BWdhgK#6ZgHdY9@MAds'6K-Xq3k!UYJT(J*?pate=$\ttIc
%A3oMS9TSi5KsnjpC='M]'J;9<e-j9uE4K>@E[k>Z73`SGE!boc1F_)mW004jCVt_B=m]O.,!8h(Rk2ssYk?;ldhbrCeR5"n><>D'
%#?#828h(WQJYj9JZ-"@,A@oHR/mco5.Wlj`Qep9X!ei$_o*fXO8h0R'>NK0&.bCT,orHEi<%_k?6Z];5T\S&D@]Nc-5!&<WL)LEn
%8DPr@rp`c(:3(7a[`W/,V@o\F#o1/EgaX-1!n['ESB@Z>Jnif!BiqQgl>g_g)Ah4pS_&1I9+QlB*X>'m1=FWQe0-&:Am=:nMToj?
%8MH4h\!)tL:AuN,:mC!S;OR/omd8N6-r*@Us7!uamqGoh8"d\CAl@Qb_Q3\iDQ5[N5;f;P,@"5j8'sP:9k$/<%0p#r8$t'==<d%u
%X'\j]D.B,p+L0[K@I)\iE'#2"=`ePNn.G*7P(?Y0Pl36!>eKOKEk/22(S21qkY9X=E1FS%8OV`"*0O&_U2ueE>]$%D8=aTYS_IOd
%?l.L#k;J\jaQ58E>bHN(,!*2A)lQ;L/t7nKe[^dOj%r9HmNdsrC>lkD,q;E_XE*9#[HVRp<%`H"I8d\7L*VNgXE%aa=elS4b(V(e
%I1g3C(GP,DGjJ4A/^dM#_$)="L>2T0$>`u&@5@d4l%O;uJM^3eVJqH@)=fJ@9--X%*5$AeX@1RZTYl_?^4_?PS3D&i'*meg:7#,@
%P)68^Fk*so\fY"%gFt%pRZI+n]TMr[]Y6PUf!hdL^n7KBJb6U#CKp@H/fCn%4]5d,HQpkGW.\F:e<mU[PAooE[\YU!.pI+]l&Us`
%m'SY8g&n9s4".-qE`uA%r@*\BPO.p@f92^'D5RKioMUr=cdn>DaamE[PEN'PMG4S48_7SJ>C'u:9E?*$UG&LLHM%Z/P&,_Qd2j^[
%h;qF)Rat@M7I+u:MDjK0bE*_t.G?n-d#19=(5a:Z<`c)19-X=UlIh>"iJF/&hoYkcodl22cDmIid9Vhtaa1DReT:Cf>On1AjYTLC
%/Z]$J4b6P=T_iJ$'J1Ka&)sIJ:mN>1<O@I7ZCF0u7>mdmcn@g\-Af$fAK=<U#(I:Z$!+=.<^jWX1J7<)pU+:([W-[('c6"pa/Z=b
%X4c$"9b5rWc/O1QD@TgmdW60a*@3#$[o(8HA2?n+LVL'Q\Eo`+9hJ"n(O.rI3YqHa1Nfm2l%1K$Y@A5/_n#2N6/0+$'HP@u?h-S4
%Z*:(YkHn")P2VX1m#mC*6iJQ>G3IS36bokuSU=d;1s-skh:D]c4d'@sRp\94msT&igM"uEXCH69+>Z+F=PO%$WV&,9n0S`hhm\H*
%V<\i;()nnN8[P$nf7K<Om1>[M9hdGTmV>,,K#:P=N5)[5Y)Nab7R\&.AJ1bPfI\]r<VbraTJbuVH#_i^aqW#"h:$sVfpM?-(+@<[
%3,`OFQI;KUF]5p9RMY'$QSu5XAm^]@/(k&`6+`NGM$:-=>?Y:?Lfk+$=LonrHWHk-Gd-jVK)ZCe8S.i-<2Z98Z\D1bId@g9OW5n(
%'8_<0"WYS'jFK).ae\3'l:u@^WsTV!L9);ZHN6&;;[n'ReS,8"j[YY^W]3R=U0AGE"]Z!NnJpmRQNA0jqW$`UdIFfo_\8<sJ>?L;
%P.Xq,oa2D25:7dT#2>92$9#aT+T($tQ$k\<)YQFr@8BK6eg1QL>(66_R;?$WU0JfifSIm^1L:DHin_:)0^2YbGLgX8]4b-dAlc/.
%6daPf@"EXR_j&!S,fFbfNlh\Eeq6?VK3?%-Cba"=<X"t#o2Y7M/?#->P(Fu*HULo=5ioSR75f<A]@AE\\@\nBYFnTH0rmK1;(SnQ
%5pAI@V<HG[$<+p$<n/]Qb58I,V2?\[b[a_?mYk/^_Oa^;f2TRUMB2/hDUCJ>RJN#&70MXKja^?1CkT@J&G8UE2WC-igtS!L`P#Oh
%D5oW4=)pS9TLd,O[@02[@i^K.Z6nbGWag&7eWVC\d]n2]j_njaQ>iRT7E7#aC._7Adcl4'pTu%dQkAoG`s1=[3utqJ-")b\%56tu
%5k"7)JfBW-rG<E]gVZ&f@l^r,,E%+2S<DtW%%?9l*\1C)8s'Q)mpq"?0J-Mj>E4DR4'A$:V&/Vr(1SiZ!thV@p:%$"3Ze1QW;!F,
%Pm*<oVd!;;X/:&`\>f]N=_u&Jd?<(F`IfXDr7u\lMO$F;NR*Itac7MLb+`PmB5P)H*V@7>ASo5?(:BO+_lKX<XhdpE%ePQ(jsI0F
%l)m]$Pu9V)fX`ufg=Wj:Oakr:*@J1r"kBMNXDEsi=P99:PV"AYM<u$n>Io*DHr\p!^In+G[\.V8YAM[DpA0KNm/^2(*L&E)h;kOJ
%-$>%iWbTn_D;f5=ke6=`[W"-ukIU;*\!Eg0k".t('11<6X'"2;6IgZuZ'l;"9A[BpFmqi(CGc]WT<Kda?;e*7&M8>r-s;lNCK-Xo
%W`Zd3(igid)RdP(>BI"rfKKkUeo+qd^olV$3<i/dIRWOeI]!!IB\*_e2,X"?>h@:mOdL%*M04mb!Mim8=UV.NrWuo#9=^"@fp/nQ
%2'sN:4_RiG]s9>o3o]k0iNt)ehSPXX*>I2[+5;Cs_f1H[:Y4nb(1l^Gs6N0.cXU_u0:d7^/MS_G\%eY3iP/'!_Q?HCat#B":^itE
%G.@lQ$<P=Bgh&'7\9SNmED1Zm%W:<KVStM8Cgt4+>-q._H+@dG'#gR"S:7)f"1cg^D(>?ZMK1'P%Ec_+AlMGG/tjmZVaej=G74mm
%$N!/P[:dDQ]?IdZ4<'=<jU@Aq-bNp<iO>_e385b,S8^Ef8qIa)>RKd!8(*l$g^Etl.7JG3IV[[$Fgg%m_?Ft&.T=%h>ne4E9,gL,
%=0#/bNS_rdq@X:=S(\WF?%Rkm&LgA!,;7VDE;[SFach=Y.cK['b3^uA,p(G]af[pRo63J0\4BCn?qmn&-8c)B7+7!Y,YoYjN$0JR
%0BcE!+ruNec;cp2W(90RlCoF@%9C4]KgS=XRL/6WJ$XG(C3$%=g(@j(eY*<@*a%ZU+*o2$RdhY-0ePG@5(A;njHsGO.<4;=&(K#R
%UrujWSKuCJ(/g%R-16T@s/2e=cU_1rl5&7!(VR88-*\l9!c._gEX?&KEq^+mR/:G!QG[Je\B%jqDiYlPEr.Ci\#fcWH*4<+&,?NC
%Urb4e.$7f)/<]cK`?4/4V6^aO[_dj@>%g!gQrFo`i7TqOYJGYg-Dg#q]T4/a,8.NoLd*@orK:PJ\ll&n8$27]h`'eZ:2fBJ5;aC?
%Ja3(3:4O"i2ShO:4u@k$X4DKT!q@6T,PfkrgQtQd@qQ,l7^IZ-00"VeH_2"QUG)=LdK>E>.=">?(U,t+:Il%cQTVAi6JeV@fTO3d
%]?qF276=O>`R3;GGib?K%]*Rt'd]G3:r)1K8!q7NRi+5Dc)IKd$j"2ce@b6`j$43Z.U[\J_'Tnj\o;oBL]?=KdmOOm;>A-8kr]?M
%aJWGoWgI.:Jjri!NKTr24PB,o.^VTIXX1I`S;H*_7Qpkh6k('rDG98Pl""9mr>`-th^D#:Nbhk4fN!dU3k/$^>0oP`QsD7@$,&#b
%7r@WG[pLW\3eU;&d!^=Tdf*Z6<5\Rlh>P[Oo.J9+L"N/7++@&7'^oGr3Do&,VKE.+bEsI]?PRsaYajR1ln,Q)d,jqns"fujbT8kA
%;>0QtH:aZPj`$(TR9Bq.b)I@D,):e6Cqjh[qfDg1"gK"c=dFg-MV&g2*M#A`_/7l6_=N^Pak=_E4qCMO80sHmRR]Fa?E&Vjr/'jF
%S)T\eOhGU^-Cu/V254A<FY54.7$5M83+I4gSO#A&dH3P7nrl*F5d5IFk_hkg@'C`K"S$q*qA[N-VWps-c#>Ji:Z<4BNHJ%(NHu,V
%`kO,`H&L^gF\d;@c68*9/Ubc/<,.?Kh(Fkt>5<=/Jb0h`Vu+.\HsBX#Fq3#6^:P+o]QA?J]W<N:jn@)j4--j_s5VdM[<?^nlIZ:Q
%4@kHQ&7KK=b:s@.<K-%QZqI7fpX5o[qt7Lk\SE7Q0[Gb&SD[Ic*[tnNbF@Go_;TmpnrpFG,G_BE=;U$qY/5dN:p844%UV$&Uj9DU
%co+Vs1.c1Goe@Eo'(C'dH>,[`Y!L6'mqCk>NBr=XUO9a%N-8cPams+J@C0=/*+)9?6#1/a#stS4h[^$Q3R6')WaV\dQQXc"G^Wl'
%%Kac4''@la_?'.rrfHU#9q_oMfQ.J"!^^07H#?VI(@'XPePlRNfs>u),#nV"Md/?+/qB/L\kf%p(P%egoOO#*!GL>F*b)Q5Z&P*m
%kF8poD/7T&nl;8S9eQ?K[dLkK2VkpUqa.#l!R-U)ReiH#-S5SO[kF?@7l#$c>Q!_:qSD7pm>K^JRe%Zd=l^"GDhZO2gnr,1%KE@^
%J/r]Lo,^>YNmNh.%TLG&ML]=&G@C"[@*H6ed#qgDTD+l(Q,t>sZbm'(c$`isO.BZ;^U.KXgtbbGm!sRlWfK7mfA<[YK$N&Qcg<>j
%o!j?u[]jWHm)R$2?PfLUUX:;b^N_"\ijF"Vqq<6[hE#-hB%L?rac&OEbiCbtcPR%42*05)"&Ws!H5D\]A'paaV$G<`3)XG=Y9#@(
%B8cr`N8[Zu)8g%OArMc!'tH'H)5EC8W..<4W#UlC0;PKBSo,MI[\eh#N-RDP:@UCF,(nk0imk/==Br.=I3.dd%4L[WIs/\Bj?93H
%?G!gL30lTnl8V6E/=Al8-V(IQ*q_-8Sn-MlNBYC*GoT=$Do+UuKPJH%!?LTj)^,^PMXt/3LnsZc;EA76f^+d<B5/kX)^TfWl1K)K
%!<5(NP1rh]ThF?#r@N'-9q8=bV/p2f37gM:ANDS0\jqL?oXM:@>fcS]CEqmRa1OSH/Yjn\9:BL?(XDK4CcQTl4t'.QM4R>\KLJfr
%:q5,!j<mB6-Zt/ubEaWti]KTG:Q2eJU\T3&_H&/W)k!<S?6Y9sY0P@4l;?(B,L+OBN?M<JoCIgWkj"g'6+c4-9%rk/2V)h%<SqVo
%@9>Mfrgr._CULGcpOUiNgXC!V:2UZ)Vcr0)-set[Z7E%7?i>j&;B.4(UH,dahHRTV4%1O0!Z]f@)/..Zkhn_>qb8SD_T(9c9:L7r
%n"n9KNpH;l@_=J,Uj7+t70H!C[mC-Ja#4K>ZpQ!*grPL[+[t&SZs+\*R^PA:q`M8HmS$AaSh4c/;mh'-l4-Eb#"XpM"&Be";,&rZ
%c6.$9@e6O>#$aq\Ij,0HeJC)=)M.hK?#p34&JTZUa+!a_@r''a_N]r@$0+E/@2tLZ$qj:V$^[bM)20)K9ocqGeJW%)SDnk**t,Xn
%WVripgWh[[al2lh5gEKgG!uGTbI^QtU\]'`#EPb;(.<(Xrp4_=kRl9d6q4P^QR;"Q5bfDk+nWfKmtKkb6YC*^:dD]XY<DM>P>do?
%7hFZ\VKU4DJ?AUG&Rgtmos016ISGb8ZFX@47Y%=ro@l084O_'`GdN]SiE?&#F)XCg&rfRdA_b'k*(WuN\&ijBoOKR[[g%)h2klog
%)Vml_VlE`INVniB]08@>CAL&L-O@@i*&ST9Lf2n_5Fc7[%gSo`_54LD^!"`)\L$o`m]>3b-q%ZEZB0]oea@>_:*R]$*jSK]U:qqg
%;573oBBOj1cR@E(l@O.J^Ap9_NK#@C>5-DNU#E\=p@LL9!*f,%(fj5%q:gHiG=7c6)R<:Vf?s]h4A5gEBBkfpcOQ$fn!tZ>J<il?
%oW[@RkB4Us-f/MqmQ>7u<,jn,aOG&=&Q1m@_0!C;oYkqCAXuZ1*[m4IBK:uq+VKK,oTZ/#SJ6;=!W'tpU"IZdLR2TtmXeA]Gm(Yc
%9)1AeFg,q3YJ5k=Y&LI38*k3p*:lA,;OXigUsk@Hk']=g:Vd^u_S3De_8[)WBZWq<+BqNo.V9V&@H/3h*^as%,*K1LUqm\r_6JWF
%ha1NC&MqsP72&#o*J(0-6MH,k>r87h>':Zo9p$i2+7&CKNHu+[I^O#_,#mJR4sI(U^FYW+bk"O:9K:sRo0fi!ID.?KOebJHiKFXg
%(Y4*2HoLn3+%!9<N;FWfRVQA%>c&RJE0c`Qi4Z)80#&rcg`aN?l)[LNY(e-p&&fL,B&3rLDI7rY3B2F:ad5ZI;3h-)>Xt6M&XTJP
%/=\"4-$V*._c9:[6fWqB>#A9H(o/HJ?RKuO@@T[a8B7.8ZZ:9`YNLu4&0@:d42!2*]$e)&51AD0>h<tG6E;\&$Zp]AI?#JV%rTEQ
%o>h-3;'!04S;qL1f?XM;$PpbP6\P2Ma/%^Vce$VtTI$MTGUr7#rE%JB;h7r!%4&&&)f6YLW&1NLf94T+DYa..5V'X!W7>G#)=mTL
%\coJ%Zl!`CICMI\OYuUqM6dZ&7'Uoh0DAe5f([7sM,EY9QCRY0c.;X7M)oInn*iLtS=SJtcdpPsT-^D3\4c^g.eDkn>'as`XWqV-
%O0"BZe]q^IBp[:bIFlusg[DM0/2]dY>>M_UQCO9#0($R.mWeAe`mlrugg8W9T/J/7N%HC6oEWf.ii$rGQ^i.XQ`o_E"30Tcro%&3
%+$JF'T<G.s5YFk1nQ+N(<M.!L=p8TO=uC$[+%X##UXGc>Emj8Y^92fd"o'2-C9ln/q0Y?]!a9VJN48@A>b<&2cgC.mLt*C'dBF(h
%1@]%,O0"rjeIH04Bt(ErIK/XqWj_f`OEWFFS0=N.VcuDZ:5eXChVV>*8,q'GY_L\CZKCo&qMA)::mRVp43Q7M:TXWoTiR@'B?99%
%kn_X/dpftTpY#D5G]FPer?n,?nq1mu=P10hj#V&V")0u><'$7:::d">fCdGr5Bu?\FlK&>c6G>:5$q*pJ<l]@j/ou/X$1t3ZjP07
%[;+.P5EPRP8#8S`jJ:P@HsQcZ$EtUe2-FsSI(l1i!A-;```m^1Y"q0B*;^.=GG52ChqDp^iMbMo\J.6Vhm*odj_*Xf6Z+8D0,Wk`
%p#2PoMu3K0r@Ron=as118O$eh]V$4a5'0[>_IFa;+<-S8Fnf-\3lim[58uHLH"K9WGh1K-j:(j34l$0CEip6\GouIfRf5#\BEd$B
%dV?)(k)kWqUH3cS3?@1HYFc92!pk\G9pV:mT<G.s5YKB;j!sN(0.m=]#2G.8M0M&FfS;)DCHL+q#I85V<;Vk*[sO[hep8_%aSG`S
%T'OYd;Y.u84XnM9PM;pY0C<\XbbK)kl)dgjNi_J.Z9D_s4-Lu"]:@'q\u%!krD)ZL;Y.u84XnM9PM;pY0C?ZB=iC!$l^HniJfR`l
%UZSs+%d@YQO0"BZe]q^IBpZ/RIG_,N1jK#(,)fPdOu)1jolLRTa_<Kdb58g9e+HI;!S4DW:"K.^=Z8(8rQ15O?>'*1m\pq/5LaGR
%j:(j34l$0CEa"F2nig<N0OCjJm[s")(?3`GA&jn@ep#&YM*gT(QBq5)bLC`2HM*M_+3pK7oQVWoaCji'(=/.bA[i*E].3F9S6>sE
%W_uL@oT!#i;5ddBdaAV<RJNMSV7.O]*EdE;I(#VanLQ\%L9%Q)<[QD,CjPMrAq[dOm'gm)5+4-c[-\C"S]"Ci9eJHjF"UhO3?t'H
%QLfmnB4C>8QCK+jYGYSi92:E8<o2_6T>#AM"_beW2/2Y(8Ge7=d\0oddd:;RY('UYfFPBY/3-']?Ve.]QCJ`NXh51r-Z$33ON?fS
%ahEY)1qW^SVf%.M;YWq8`t">'GLWP$YS[/T60,u5:R1.*!O9YWYI,$HF@]3l_*!MXLSX\8+DS-Wn)Ye5P7eO1GqZon;2c+iSDVL[
%$Atq$U\8rS<Li^FK6bsLOPl&n?ljJL;;tgLKDCll$B@695LFp6ImAH:mo#@:=tX"qOt4tu=F2"+&*A_K067VofjVGU4h"`gX4l%Y
%-Crs'q3JqQ*doU+hAT`1s(o`5#^]DBiCcR0TO0&U3$mkLa+=Km%/9M"O/Y;n2'PJp_^Y.H_kSBk(L##e.@t4OHaVERVPbdjm%B5r
%_?jo6:o'9,P)]T*\kG'ZK10JoZJ'au@6s1@S0=N.V_"I:-=s]FqWrk@Y=0].X!Scd$.2Dnd"S6]e.X?p;(]@*VA3X0qO5@>WMSX1
%=?34a@1;sZ4_=F?2(?FKe7WPP7qf5TemsNU_VnZ/XrTu+dn+is/Wlf+FI/@oONZ/(,WqM8>rRt^XWoDD5#2Dd1eC5k^WZCk'iIT8
%HrV=`hc'8Icni0!jn-KK@oSA'M.tdJVS3Dh(H%96LE/[ea,ul8T<G.DT;<lG\;U3"9p.$9FB'SQf=1%!Qp5?lIf;?`(!*>>g_,hI
%Yrl;T_IjlNTXNasT-`Qn2`g$*4Xc0M;VOXM$i4g"QCj_CT"95!E((ZBYWrU*?AGMQSlgQ&C<8%^XWPa9=!Xn&c6$LaTV`p'S0=N.
%V^rpdk4Qr&;'2r44B\-?Wlae;p>Ya=Tl>focQ'kqA5nJ)M.m,rVS4AhV>X@a22LjG:!OoKmm1)?923QJ(\QIMX;NbCb#spnS;qnY
%ZNti92G"Eg,r2Jh\&>Y*/5oW629T3Qq]T:;*]&K^T<!SqS0]Hb\BF\e26Mm2^S]'U[rWaY!radOf/3f<!ZBO?>@LbtQDq(-!Op)3
%&)i"I*4j-5T<G.DT;<lG\;U3"9u:a`O(Uni[7;dul^C7OSA*)UU'5R:9(!=UqQW.g4i4D^4EV:lo;6W,B#nWN.>qi<8J/+W5$X(l
%&R6qoK7Ib(7nn]15WE*%*5i1p<(h+cC&M/2^*5#cq"[:%JSJh<L4$_,Z@%t,Pi47[UGWA8N3171f@#"5r&>%Squ?mKCrtVuX"T&I
%#,)mM*k[9#CZ.5^mX9#Qbuit]LVotWd1ul,*Al]*iTm:YpU^!Pb6"r:QN$T@D"NFERF%G;\@b*HOf5I8S]=l7,g=l\)LQZ,T':)I
%5J*q?aORhT\p/00qDp&G3t/!P_ImU44=E/6Q.X-FQTIZ)n;3LeN]IJP$D6SOOW,I0GldBqVW5:1bAGa%BIS>+^I<%1d0EuMH+A\i
%ffeCSl6LI#I&=YKDF?s%XmG+DCT4^ccVA@J]nD]gBDQu9VLT<V)PtAS=mhPM()rkQQYf"BBb@?Xl2]+tk7k7pJN$>2m':n8gk%g6
%]T.A';p#!sdQrA`Dn1:P%N:i5d0XT8#"0!:#rQrk3>"[jr8MXS;IJM?U00Y.I%o_8Ku\Y:q.D5kK`d?[dDeJcK(ZZTadLq5l\R^Y
%XmN,?7GQ^P0Y(>$QB9l.L[a@7];X&6);0B06)ciIS*k<,&Zacf\9=0mO6WEV+&m`ggh.Q:%V;ET.ttpVDQ6]2c=c5^q^:YI!,!6"
%qZ`]<L$J!=O9<REeUNG@<F>%+Un<hm(2<^`3"7KAom<XFmibaraAho/<;?^F)pIj7Y'`4eh8-k-nj.'=B^GBe;.#j8Hc:Fs46dC=
%>+GS,_]:Sm3flBF]Z?N\'6JZ@G82bX+dYN/X^]8GB'd0@a[%I6cpk:;<O.EmQ7tjF@`]L*0p?d3h2mZnmXfWlDe&[;g2mSUeI$Mn
%lJ-n?59X:KFi-SaBc`k1p/!=#*d1Ro3]O=CICACuj@LsdYW8V96\&1iX;:?uY7R;Y8)O8@55toUo*6QojCPTg,%nDmP!a7%fq=\W
%^AglVO3jpFZWnZ1cj5TRF0QD4i$"\@s-`j-TeccEH5CV:R#\$R9kD>5q%t$AW%.I:kC\A*,3G!j;_^Iu0$j,T6&]jk)639oJ[5T(
%`Bs14Wf`]=FRqd9E7c96Y%0_8e;aAp8*fn#EDW.I4l(f5nC(L#RT]O+XH"fB5'X9`B,_=.D6_$[[nR/_l[,*fhllDDch+^=[Yf#3
%eZW&'h,Kl>,#Y/::HhXRrG.%Z5kF8j+VtWEoRDQN:@1]Ks6G1k20%bKqS00RHSLE[kl4+"`^;i]NZR2ZG+4,)[qRPdW5jF'n>Oat
%eSPjBVdI+AKb"&$N^oX[*q,BkX;ZZ*Z];B4X\<Mtf;*60pFZ:A1]8mgNflUho_`0eePVbn7oA`0g1Z4_L-)>/E@naE__f?kQr0C]
%nJ"K+O]-YHaV9N7;<h>BAiKolX*(oi%cQ3;b]u7e3U2>)W#DL[VUea1h5.:D1OQ9,(9/tC>D;gOIC/8<h.%nY+90l@rSp-?q`k&8
%J+Hp6hkkMYq1#P`fDe8L^4Vo#Gi55(!!;0Hl\\.qV3Sb)MWJqh^H%nZT4'(\af#o*Nct1'P*dprk3*CP/>5$be?DiH\28#sO:V%F
%Xq_oU:bl0%dKWUGTbJ/L[&smum7/fk71NuQ6")sb&u,/=#dguNJg2(\^_&*sC83G29@LsNR*lecZ!-1qh%Tmm8Fd0:AI-aGk"h;+
%_T%i=^m'4qAr=p>4ZO!->=7O4jk,2&Zjg,OAN1HW'fnKR-=9S/R-KL78M?nPj,D>_n_;q[PRB*t6#1&88Y/i4^%kFf.4J)]RF'Z8
%_L)G6d#"_G4Qq<*FgBM;5AX.om7>MIb4gh/'tRq/5N`ipdHD9F(mNgq>dQhINd$q3[S1!e&rTm(\HW<o+]EOI%sHUBCVJha9;m(\
%k7QhQ`SV#.lFM'6GJ#=qBuA_D=BXfn'Q"7;@\'7,Cm8p@74rsY9.TjKHRkiS-h]o\Jth!O9?s6%mh^I('MjW+$XVeo2H"6i:RJc6
%*MqEMnYQTQM(1in]3^o4h?oB1p1B1)pmM?j"mU.n>]lM,3)VQ>Zi/m%Ke<safri!rU7nDXfAc_*nGJ[M409ARO".4Vjt7%S@t96`
%RLt]Es!.i=p8ca0U5XbrPXgu$(OmlUaVQ`D_?pPHBhM/IdR4ZIW,2fa"*#oW1\ppDJN`1Qf%q5UDNToU3lKtIY1Y]*P^0"&2unql
%4Q:RVNZ&'.a"A`-5Eerr'E\3$od]Y1EC+K3aJH#UK(qa0&TE+#O-)m=>on!q7tpHYN[lSP$>X3T=BUYN^A&`$Su@@Wp^'[Q@4r=W
%WuAt7`@<dqcA!HW^P5?`FZ.SP?Yk2=HeA.q7FG4R1e+r:$'AClB>hB1UPus<3..bN\r9iVM];pLI5*<0*M:4g*URYpP66q(42jo%
%`Ok%2&_-r<b^^T&&DcbO4:,!\882BYiQ9._qke@3=A@jIGM"J_YP:>`&0>,q;[bo"LtJO'k0Q1Si'ntuRcf?AS[bQklmSjT>W5hi
%rC1S,n]Y\]?I(?8>]PXn"a/bo(%cXi.!-!R)3b(P:_0p8d7asoBb&9p>B3oWpUYXW!@#f'#1j05U9=lD7kY^1(H;T1JOhS%lqpe\
%n>FHnEiT\t>,EK)f6$Z(DD4+Wi7mENE9Kl[a\6rjS=DEClt0XaZt5b`V"A,o#D3*V+@S?+K"m8cb<Np3cNqU&_JH%%KE^7t)Dbf9
%i[O.99IVg];/i47UD)eU@l6H]q1o2QiRel$TF65)[,H<9.+:h-TS!+R&B>,X[-.52A.;3(`K^(Xrc<sW4H<)t,&)4X6Kum.Oq`nY
%eb]4&1F^tEQQKP&NP;oM,5J)hVG]h\gaYWHnVF":qH/g)[aXLgK7'UrqQ30mWaU!d".$kCa,=G/@6rC?+F<KbLa7ud-/e$GBra&c
%cZ*qm^?-u1"-GE%7A74*9LVi9Rc*hkB7`Ukg>5E-&Q3_6Du*om7?l,(77\a1,&+bTf&O+(Pd!KFUcI$Xe>G]O0K9uk(ADpMIk9S'
%7>L;),0hf+#)0H_KMj)>"kc16Ds^#5IHE_J"8(9-*"6[]^A(X%OSX+;J<OZi!qt.)m6Ds06HQ4R6=3EsE;$Q?Q^u$"J'VjU4BT]\
%'QgoJ.*k9hd9BS>Y&MdZMk9un;(G(a3bCHAIP.H;T<HZjRGN-/*pIM(W13/aaqKo\7&DI^NLT=*jDME4''e(L%@W&B3n_3uij47C
%n$/m/*d"\L.*k8C/rcTtX_@$!r;7o_S@n)-P9$_Bp*r^!7pt_09W4QH<+jS&F<9umj>)gbb":S>3[_>)kZmZ=F&r[2aanQ.H`t>B
%-bAr6/uO_Tc7tgN'Y6:QZC^_F<=""Xe(iZ8VI'02?VD]4*nod2@AMKZQAItHU-#;IF9gl@M"<SQ.hh'4l;[7_Wm_U7>j(BA-e"gp
%T:P4c`^P($^4?cm/``k]hS;=\*-JpF^iPgRM/\@/b2#HFYcm6QG`mE^O:pG9%Vkl#[[Te9\)pORI.N`P^3Qf%p:7ApS]P/i%l[>$
%C@bbW+-b;D6o_5gjW.cpE3,q9YW2?(>C#8?WLp1!(:Nm@GooS"OeYYf*L-5Mb=&^oPK)i2-b7\pY))qb<J4uDOXd.#H@/g4iII_/
%/%Pi:5Vf@1]\j+h0bDJcTK1%)QGe5IHSMU4_XG4!Lc9@7<C;3XH)`+2_qiKn%iYm#b;#/Zlsh;4na'am1HUN,#+lo,n6f^003KkH
%PVm_Oi,0Q+V!_[;Bj4\B/OZ+12,@RQf1+n-Cb1:P03rZkifUA[*-DXDK5P7<RAe7eC#"T^8a]UfY))YZWsHi.5e:ELYK(8\&k+6b
%f0DA>GF-\N)^4NH$]Qo[h2Bo9AGU7g8Hd#H<&[tT*m44B]2,$F7^Z)6Egham9GPPXCD5KaCFc*-mcm(n3N>Qhoij"3g.6(^%3BH9
%&EgH_iC_(Y6+VjappqWWmPiABiff3jRnP<W!>\9!W`7(Vh#XTKW&faa,,/'Js"-?^NpP6hKZ*Y[%isF,Q\b]<m1"5DqA<J5:-N9D
%rDe\%l$.sZ73<FAJPZ+^KN1e25@"&%mA<8IiPaC0'R7OI"Zr5(gor!*O/jQHrb&h!ONQA>Mjd,8I7%m*Bc[$#>#<ZAKZ*XH)VP=;
%S]=%$LfN(=14;o!99/A]r1X]2;RO7l8?Lq#h_"W[LEG&*'J>E+P%@bp3oD'n*=l/J+6+&cKT;nb%"V('Gq4>KTp4PdM/q'l5>C#I
%RiN!K-\m?%jCcTX$u&VLq:4PKe#O3Vi)(S\r^$85qHdruc<G_!5@^WnUDT4b6+XreW"@1B0C)o=i2T#+GW*]rW?15<*KdbHnECms
%7QKCEP_3tPC%>H4.YVdTQ.IsP(/)F8otfm>,)u.oCQC@\`R5[bC_R+uV%)46**^LE..suSNRAE,X'Ue6iS_JB%6F)SB;5iSNT-Wg
%MJ$1.R_2\&9&U^Xj`QPl`=dFF#Glp3h'ha"p2$L#9YPa/MEtqj7/SQa?<X/VHnB:K*%ck[qAMp"R/.T_V3eO9Kik)iE&YqUUsaGW
%>-TQ2CD;ua2i8AD^\.99l$FV6nlBPP2@?NZl8<uM.$XuENpPr*7;>KIoED!CnnN8'$4MZEs5ecbAN`MW&_AEP8u$VXQ*um#'t^=3
%NM?"?7aY]0\%Y$cI8?Y9hJ2H*7Y,p^P-=,n_-LagroKlH^)"gR>gq:A5?mR;C(tLDNi?qfpigKf,Ham+PXb2%.nu5ZMH)*1UR8]s
%;63k$O8>OA&$d/9^"+7]7FHO8C]6AoS9>lkmk&NIF;-UL"b);0PosE)>.@p^!]neUmMO#knMjE,OR+P0W-_0-Fk`g>f]H"a3VJag
%pp%<X'&)ML&":UE/O"P/1\[qd(]ga-jDH8>$\I(5ooLPr2)TJBQ!B.pg'ogsoQ3#_CZG>?m99qR,[2T:OYf-gTm84bq7Pa`9;utl
%Doi-*V`UEX8@-\[QVSmaoYjdeW1R9_BI4d_1g_?jn_qA[guO`H[F7FP$5#0ZVW96G7_!i1le<kOTA"Cp;hP`t5<fZoa'$EEM+?8p
%Nk0Bp-s*+c6n6n^j4_UHmb5bt;*VOIcqHRMG'^@4a)=@=OYL;3jQWha^,Bi%*Yf-n[^4iX<5d_SBIC)=4?kJ)kB79f"'I]'p$Li)
%Y!U<"/)$fhm:;CWG-W=Wk>i1`M+?,lDtWnpXXL8/j#uiOPcGA0S'r4gU(_g1)g=B'T;e&p\'mSJic-jIjAR/X)%9Y0)>3CXl)m@r
%6n?ueEUDg4GO=IK.%e,/OA$.[mIX_G&%>L9)="lt]n>`r.Vhh):0\2"dF-Q?\-T7M2L"Pqat^doD'iA!cZ+(36eY:q\op-5<hX&u
%'lDCoFu%0f4'<0gF/oSk`$9&q[sEG3S`jYM\D,-S?%mNiF&#sJeQM<c&%5&h=&$E"i7@[n2IT7bc\aOmO0"n2qKDF/X&(Qk'eRl/
%Fu%0f4'<0gF/oSk`$9&q[sEGS4;$u`RQ$&uFjk2mQOr]T[,$@)PO,Kc8E.pql19?Si=*9n>;)Wr-8sWD`Y#o?12*"Y#MdloQ@YJ-
%R3_3\cq3Wm#[QuMqU-iZD)=E(42U_QI(5.k8"n<lp0S6GO:(*=pEdigAK-d%c23(ak1rnHGs<_s(V!/W"Mob2"q5IZ0WR-JTEO48
%^!G_S=G2XN@.-?q^u2.I?o[@&Tk0tk@+%":L::?6\<5>h5/'a9#N`K%G8mmbGml*c[g<RWnaUJ56PZtIIZEU'kCe%%Sa[VA'Ac$#
%/omB$N9-jT':tEC9mEgsqRKUZB&\qJGjk>#GWVahrHA1l:$!5OJ:'\FkoJYiFFcqVj1aJYqt3?3*KF&(q"Hd#2IJ\mY:;Df"3D_)
%!VI#@;)o`F/G'Li7.Fn$.^_KmYgVdfXpu_8pDSGS!Qpk(;tGG3f1if>(RX]s+>OX=ZX2+o'OTB2j7GRkV4I!YaY,JC/(\_tA0]3p
%+%`&=-^RMK.$ui/,WX!&89..`cWrt1-3qt]oNmU)N[2\h?`+rA`fXoGO"\mQ3KE,88pf"[is:_@`bbp9\))Pqj)]5tI>l\Yks4gd
%#*Mh(8=G<n,Se=[,SSrD,qG[;Y191jgbnlr5cSUL:jgmnFjiL8@.p5j('nS*D`l`bSa#"Z_HB_(kL]2g<VeRT%I#ime;^5UC)<41
%gd%7khU+Bpr@kMYlIT&GRYOBkN8A=>iF0*(bJ@!A^M^%Ra[>IVZ_kWR$BKK85C2oGC!BBJGfB2^3_+,/kEqj$/.C_j11XlcR.bDl
%gP14cEJu"Tp_Z;#1-Yc8r,.m.[J0/-RVVAXI(0&se(qcI=ECXg(+O0IZqK.po;AcFVKJE0_M*mFDWfu7%3^FS"?EtR[q24"^a/Fp
%aJAMSaGQmf>:!r0*n^gFX2B]_d"I%5G)mbAFTcugh7K:03`p\sJ(9BBe28Ve>q=lbkWD=1KkJDF%+,1!#WeW=+\/A]CDJr<<0C`"
%M9O!OP+pV8ZL[;eHE4_l7o7GpCQ8(/m\&@IaV"P4Q?*dLg:BdRGN!0dj^-4aRch4"XGA\K%omfr*CGju6$,rki%>Z\##6'qMO`aF
%'Y,FQk>i1`M+9UahWs^b;$>S)UsP0sK?>T'i9oZ!\oo^Ji9OkL](+fobtN@RI17G]N@F&RCN`>;(odhhOlW3q,bmD`1_1Nt.Z>HB
%-Fb-k<^Q]=l9R4OX2Tia'4-I=HVJ_2h9l,GFH)%SP@*f$@gS2MDIir0.,d/_L;/[2%u#3M)bENt8FgkHEm6sAJr8R.OUCK2Od8_V
%[0k7h4L.iV<e&GUU))\!ll&7rV457j>>3)E%W>o1hJ8mDR""(%)kduE>[!grC->RP+_QRZ:`[q)m_PcGfT9'@r.m8IrJ7lplK>m!
%3"Jeq4MTG)_[V9?ioq7V^M_3m)m3.8D:DrqI1N!*i1frGK&;f=%%mg&bHi3,GbbG_;)a"8b5L)cO?m9K\,g,,])cGRdr2>i1]re\
%!57"AZgH3DgdJWPI1FEM#PV?lR(@fg.JJG+p%<0LCSJP/\OXO<jkPo$q#ab=)>.k-l)m@r6n?ueENS:IGKo3+.%e,/OA$.[mIX_G
%&%>KjhPlNIEcAM9Raf50BRnYPp)Z^eY5)P8X-FGpD4I4g30-:Yl@H=-*-JB*cs;3gM,prSj'0VNpT7speBbND1_3*XNUAiT\;A4'
%PNAD$%_Cs:0p(F(N7IgO\\1Z37Y5^9IbSmcG^o*^'@0kMNaTr^aJa#%:NubO*a6T2Mf0f'gGb60:d;F(coaFr7XD,SB3T'q3+fio
%dQtDJ8)3WoXI^6nD<AHqi:"54Q<[]9&m7#Mp%`<VF<G?GUV<-YeLHeW[%^85f1o(]f1rK)o!te,alG_@:@IlNE')UBUP@Ndl_(k\
%i,&+WZN`PFom=hc&s)Y<n&9BKbkZNfT:]^d#L[d9e@!ak[0e2n=4-'@b5:2hM<)CAW/-3tK<#:&`$9&q[sEG1SL-IPa8<gCTNm0a
%Y!S2c"4ZnOa3tH!^toHT8R^;uc^2p?%IQ@+<\ikWa[<3pQ[r,APJjkkPM3F,/"V3-Q(XOiUi#a1LC^j+r&)f;=.h4]&'>(m'<ZAQ
%Qk5?^`^7#0k0OpW4YF,`\u.3Y3=#!e$`M)'SRS-\X?&I$X,`C,eV_[`S$mQUS7RYCgf_Y,,)TrjWsCG>3KVt7][u2]m=Y]co:GO`
%])2<W)9u`D""L/'F5AHm13,&>-N/@A^6A8YG\!SkW#nd+m]LGqk^Y@$r-1!=rHPUllK;1[RYaNmT&/c&d<;6jRDuY_4"8\a:^PZ*
%i.+_=D,9:*IoJoo%5BK^<Z9sJ`*18-CF,aiPs!k;W-N&.Rk3,]:2F\j?bB*]-1!0X,]31I%NfVa;8gWl=Z$(<WL74dPg#q$^g6L&
%L0$X>WY_`chJh)ZY:fgm((55m<0#:k(i3)eR<U!c=Its5ek*t!b@e+tXLpB%Mrc6D@k:tTrS1K.cK))K+$F&/Qiss*lg^2,Z*ZD3
%Z1qlgq&F;J>!JZb>=#d8"=aT[qDjLagH77]84Jf@2O[CP]=MRJ"2^l(_oX1uj2m1WT3F`t-6CibHE5)Aa4#]q`OssIdp7ZKLYR"e
%]s]@Q[_&+"7!mFqSZ6"+]4N+dk,U9TZ?A"ggW<Br6HMVGg8+9+A<Qh5Z6JSs<Y:dW8(LFRp%W>b+UUItf"f%<b#LtBhiB";6uLtE
%[prY%=k^OCBu90,<,H])T'OoE$s>Y0p$Lh><hX'`.U&WfmGoO:mGs-QT=]uB9FdlcoNmU)[Sr(IQ1qq8:p*,IA178@pD0bbh=FrX
%I?hLbqK>2mMK%peJEjCq3/G#+6.\XKmcq+e[$",rf1&MMf1)ofo!te(alG_@7dkKpE#VgLaEu2ok\d/QbMm$[65\#[mPur&IbOY+
%*X>tXT:[LLdQZg+")08GlC-t1]*^,'X_<p<\!'DOgW>>OT3F`t-6?;O^")/\m0$Mel(7JV\uTf03qAZF&gG9L;]\9Vp3KM[MrmsC
%+[Sppa,G3bCF,aiPs!k;W-N&.Rk2:9<,CG]<]p?7.RCE1aP,j[%\IU5%&^;fT'm03't@(Va2;#P&GnWJ_;kPDpO'G`bf?.`.)b/m
%n3ku&Nk/7P-s*+c6n6n^j-n(]mb5bt;*VOIcqHRMG'^@4LYE+IT#NqV*HY@+L&!]_"$BY]HI$jr6(-tDkJ;Fn3N#PeK&TI*B/!l`
%ACS)PVcncoS^CHE8`SRI,kp\:7F]Yc+uBsoXI\55n_&(831K:/S9If4_M.h7a.-4MpmLSB&"^X)\0jF!'eAI3\^5M7B'nZA[?FJF
%:7c288g^^872jcQ:3+r]Y))YZWsHi.5h]!%p%W2^rKddEp\O=opi$1fqEP"LJ,YM4^\g<GrKfbKH%Ea1+91n-J,Q#=jY-Z"s7Y&o
%q:"7"e%bnDs8)&B^\m[f,HJTYn*?Tpr6rFYoj@`[s7@sorUI)kbCBB'61C"cnFqG4DuT-Rs/3X/IfXfckFV~>
%AI9_PrivateDataEnd
